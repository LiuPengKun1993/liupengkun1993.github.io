<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>liupengkun</title>
    <link>https://liupengkun1993.github.io/</link>
    <description>Recent content on liupengkun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>liupengkun</copyright>
    <lastBuildDate>Sat, 03 Apr 2021 21:43:48 +0800</lastBuildDate>
    
        <atom:link href="https://liupengkun1993.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于我</title>
      <link>https://liupengkun1993.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/about/</guid>
      
        <description>&lt;h1 id=&#34;关于我&#34;&gt;关于我&lt;/h1&gt;
&lt;h3 id=&#34;刘朋坤&#34;&gt;刘朋坤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;毕业于河南科技学院-信息管理与信息系统专业&lt;/li&gt;
&lt;li&gt;90后 旅行 爬山 摄影&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;联系方式&#34;&gt;联系方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;微信: YMWM1528961618&lt;/li&gt;
&lt;li&gt;邮箱:pengkun1011@gmail.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;当前地址&#34;&gt;当前地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;北京-海淀&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>NSPointerArray &amp; NSMapTable &amp; NSHashTable</title>
      <link>https://liupengkun1993.github.io/post/ios/tips/nspointerarray-nsmaptable-nshashtable/</link>
      <pubDate>Sat, 03 Apr 2021 21:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/ios/tips/nspointerarray-nsmaptable-nshashtable/</guid>
      
        <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;开发中经常使用的集合类型有 NSArray、NSDictionary、NSSet，这三种集合类型可以解决大部分需求场景，但如果涉及到弱引用集合类、NSCopying 相关问题，则对应可以使用 NSPointerArray、NSMapTable、NSHashTable。&lt;/p&gt;
&lt;h3 id=&#34;对应关系&#34;&gt;对应关系&lt;/h3&gt;
&lt;p&gt;NSPointerArray 对应 NSArray、NSMutebleArray&lt;/p&gt;
&lt;p&gt;NSMapTable 对应 NSDictionary、NSMutebleDictionary&lt;/p&gt;
&lt;p&gt;NSHashTable 对应 NSSet、NSMutebleSet&lt;/p&gt;
&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;
&lt;h5 id=&#34;1nspointerarraynsmaptablenshashtable-三者都是可变类型没有不可变的父类&#34;&gt;1.NSPointerArray、NSMapTable、NSHashTable 三者都是可变类型，没有不可变的父类&lt;/h5&gt;
&lt;h5 id=&#34;2在添加元素时无须判空可以直接添加-nullnil-等空值见下方示例代码&#34;&gt;2.在添加元素时，无须判空，可以直接添加 NULL、nil 等空值，见下方示例代码：&lt;/h5&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    NSPointerArray *pointerArray = [[NSPointerArray alloc] init];
    [pointerArray addPointer:nil];
    [pointerArray addPointer:NULL];

    NSMapTable *mapTable = [[NSMapTable alloc] init];
    [mapTable setObject:NULL forKey:NULL];

    NSHashTable *hashTable = [[NSHashTable alloc] init];
    [hashTable addObject:NULL];
    
    NSLog(@&amp;#34;\n\npointerArray = %@count = %ld\n\nmapTable = %@count = %ld\n\nhashTable = %@count = %ld&amp;#34;, pointerArray,pointerArray.count, mapTable,mapTable.count, hashTable, hashTable.count);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打印：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pointerArray = &amp;lt;NSConcretePointerArray: 0x600001d50460&amp;gt;count = 2

mapTable = NSMapTable {
}
count = 0

hashTable = NSHashTable {
}
count = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;3三者都拥有初始化方法---instancetypeinitwithoptionsnspointerfunctionsoptionsoptions参数-options-代表其所支持的放入对象的指针管理选项&#34;&gt;3.三者都拥有初始化方法 &lt;code&gt;- (instancetype)initWithOptions:(NSPointerFunctionsOptions)options&lt;/code&gt;，参数 options 代表其所支持的放入对象的指针管理选项：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    NSPointerArray *pointerArray = [[NSPointerArray alloc] initWithOptions:&amp;lt;#(NSPointerFunctionsOptions)#&amp;gt;];
    NSMapTable *mapTable = [[NSMapTable alloc] initWithKeyOptions:&amp;lt;#(NSPointerFunctionsOptions)#&amp;gt; valueOptions:&amp;lt;#(NSPointerFunctionsOptions)#&amp;gt; capacity:&amp;lt;#(NSUInteger)#&amp;gt;];
    NSHashTable *hashTable = [[NSHashTable alloc] initWithOptions:&amp;lt;#(NSPointerFunctionsOptions)#&amp;gt; capacity:&amp;lt;#(NSUInteger)#&amp;gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;options 值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;typedef NS_OPTIONS(NSUInteger, NSPointerFunctionsOptions) {
	// 每种类别的选项互斥，只能每种类别选择一个
    // Memory Options（内存语义管理选项）
    NSPointerFunctionsStrongMemory, // 和 strong 一样，默认
    NSPointerFunctionsZeroingWeakMemory, // 已废弃，在 GC 下，弱引用指针，防止悬挂指针
    NSPointerFunctionsOpaqueMemory, // 在指针去除时不做任何动作
    NSPointerFunctionsMallocMemory, // 去除时调用 free() , 加入时 calloc()
    NSPointerFunctionsMachVirtualMemory, // 使用可执行文件的虚拟内存
    NSPointerFunctionsWeakMemory, // 和 weak 一样
    
    // Personaility Options(对象处理选项-如何进行哈希算法，判定等同性，描述)
    NSPointerFunctionsObjectPersonality, // 使用 NSObject 的 hash、isEqual、description，默认
    NSPointerFunctionsOpaquePersonality, // 使用偏移后指针，进行 hash 和直接比较等同性
    NSPointerFunctionsObjectPointerPersonality, // 和上一个相同，多了 description 方法
    NSPointerFunctionsCStringPersonality, // 使用 c 字符串的 hash 和 strcmp 比较，%s 作为 decription
    NSPointerFunctionsStructPersonality, // 使用内存的 hash 和 memcmp
    NSPointerFunctionsIntegerPersonality, // 使用偏移量作为 hash 和等同性判断

    // Copy Options（对象拷贝选项）
    NSPointerFunctionsCopyIn, // 通过 NSCopying 方法，复制后存入
};
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由上述可知，当我们选择 &lt;code&gt;NSPointerFunctionsWeakMemory&lt;/code&gt; 时，属于弱引用。&lt;/p&gt;
&lt;h5 id=&#34;4nsmaptable-的-key-无须遵守-nscopying-协议&#34;&gt;4.NSMapTable 的 key 无须遵守 NSCopying 协议&lt;/h5&gt;
&lt;p&gt;我们在使用 NSDcitionary 时，可以看到 key 的类型遵守了 NSCopying 协议，因为 value 是根据 key 值来查找的，因此 key 值不可改变，为了保证这个特性所以使用了 NSCopying 协议。总结来说，NSDcitionary 的映射关系是 &lt;code&gt;object : string&lt;/code&gt;，而 NSMapTabTable 的映射关系是 &lt;code&gt;object : object &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以看个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;NSObject *a1 = [[NSObject alloc] init];
    NSObject *a2 = [[NSObject alloc] init];
    
    NSObject *b1 = [[NSObject alloc] init];
    NSObject *b2 = [[NSObject alloc] init];

    NSDictionary *dict = @{a1:b1,a2:b2};
    NSLog(@&amp;#34;%@&amp;#34;, dict);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;NSDictionary dictionaryWithObject:&amp;lt;#(nonnull ObjectType)#&amp;gt; forKey:&amp;lt;#(nonnull id&amp;lt;NSCopying&amp;gt;)#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上述代码会报错：&lt;code&gt;-[NSObject copyWithZone:]: unrecognized selector sent to instance 0x600000998180&lt;/code&gt;，因为它的 key 是
NSObject 类型，没有遵守 NSCopying 协议；&lt;/p&gt;
&lt;p&gt;而我们使用 NSMapTabTable 来处理这种场景时，就不会有什么问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    NSObject *a1 = [[NSObject alloc] init];
    NSObject *a2 = [[NSObject alloc] init];
    
    NSObject *b1 = [[NSObject alloc] init];
    NSObject *b2 = [[NSObject alloc] init];

    NSMapTable *table = [[NSMapTable alloc] initWithKeyOptions:NSPointerFunctionsWeakMemory valueOptions:NSPointerFunctionsWeakMemory capacity:2];
    [table setObject:b1 forKey:a1];
    [table setObject:b2 forKey:a2];
    NSLog(@&amp;#34;table:%@&amp;#34;, table);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打印结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;table:NSMapTable {
[10] &amp;lt;NSObject: 0x600001fe4180&amp;gt; -&amp;gt; &amp;lt;NSObject: 0x600001fe41f0&amp;gt;
[11] &amp;lt;NSObject: 0x600001fe4200&amp;gt; -&amp;gt; &amp;lt;NSObject: 0x600001fe41e0&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;5nspointerarraynsmaptablenshashtable-在-add-时性能欠佳&#34;&gt;5.NSPointerArray、NSMapTable、NSHashTable 在 &lt;code&gt;add..&lt;/code&gt; 时性能欠佳&lt;/h5&gt;
&lt;p&gt;具体可以参考 &lt;a href=&#34;https://www.objc.io/issues/7-foundation/collections/&#34;&gt;NSArray, NSSet, NSOrderedSet, and NSDictionary&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&#34;6api-提供相对较少&#34;&gt;6.API 提供相对较少&lt;/h5&gt;
&lt;p&gt;这个可以直接到相关 API 中去查看，比如 NSPointerArray 并没有提供 sort、contain 等 API。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;基于 NSPointerArray、NSMapTable、NSHashTable 三者的特点，可以做一些 NSArray、NSDictionary、NSSet 无法做到的事情，比如弱引用、或者存储键值对 key 值非 string 类型的对象等等，但鉴于三者在 add 元素时性能较差，以及相对可用的 API 也相对较少，还是要谨慎使用。我目前了解到的是一般第三方库会使用的较多，比如 SDWebImage、IGListKit、YYText 等等，当然项目里也会使用，但使用相对较少，主要还是使用 NSArray、NSDictionary、NSSet 这些。&lt;/p&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nshipster.com/nshashtable-and-nsmaptable/&#34;&gt;NSHash​Table &amp;amp; NSMap​Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.objc.io/issues/7-foundation/collections/&#34;&gt;NSArray, NSSet, NSOrderedSet, and NSDictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsmaptable?language=occ&#34;&gt;NSMapTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nshashtable&#34;&gt;NSHashTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/nspointerarray?language=occ&#34;&gt;NSPointerArray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>iOS 开发 - JSON 处理命令 jq</title>
      <link>https://liupengkun1993.github.io/post/ios/tips/ios-%E5%BC%80%E5%8F%91-json-%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4-jq/</link>
      <pubDate>Thu, 01 Apr 2021 20:13:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/ios/tips/ios-%E5%BC%80%E5%8F%91-json-%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4-jq/</guid>
      
        <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;看到公司大佬用命令行操作 JSON，着实很秀，想起自己操作 JSON 要么用在线文档，要么用本地工具，非常之 low。&lt;/p&gt;
&lt;p&gt;一个真实案例：有一个比较大的 JSON 数组（大概是这个格式：&lt;code&gt;[{..},{..}..]&lt;/code&gt;），我和大佬要查数组内所有字典的相同 key 下是否存在重复的 value，然后我还在思考怎么做效率比较高，大佬已经查完了，只用了大概几秒钟的时间。接着他给我发了一张截图，我看到截图上的 jq 命令，脑袋里全是问号？jq 是啥？貌似没一点印象？确实没印象！于是开始了解 jq 命令行工具，这里简单记录下，非常感谢大佬打破菜鸡的认知水平。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先 Mac 命令行安装 jq 工具：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;brew&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jq&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h6 id=&#34;安装过程稍微有点慢如果这个时候有报错大概率是本地环境问题&#34;&gt;安装过程稍微有点慢，如果这个时候有报错，大概率是本地环境问题。&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;安装完之后，准备好一个 JSON 文件，或者直接命令行创建也可以：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;[{&amp;#34;name&amp;#34;: &amp;#34;张三&amp;#34;,&amp;#34;sex&amp;#34;: true},{&amp;#34;name&amp;#34;: &amp;#34;李四&amp;#34;,&amp;#34;sex&amp;#34;: true},{&amp;#34;name&amp;#34;: &amp;#34;王五&amp;#34;,&amp;#34;sex&amp;#34;: true},{&amp;#34;name&amp;#34;: &amp;#34;赵六&amp;#34;,&amp;#34;sex&amp;#34;: true},{&amp;#34;name&amp;#34;: &amp;#34;孙七&amp;#34;,&amp;#34;sex&amp;#34;:false}]&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;使用方法&#34;&gt;使用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看创建的 JSON：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 表达式 &amp;#34;.&amp;#34;，不改变输入，可以将其优美地输出
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 紧凑型输出
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_JSON/iOS_JSON01.jpg&#34; alt=&#34;jq&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其它的一些用法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 属性列表
cat ./test.json | jq &amp;#39;.[] | .name&amp;#39;
// 计数
cat ./test.json | jq &amp;#39;.[] | .name&amp;#39; | wc -l
// 去重计数
cat ./test.json | jq &amp;#39;.[] | .name&amp;#39; | uniq | wc -l
// 条件查询
cat ./test.json | jq &amp;#39;.[] | select(.sex == true)&amp;#39;
// 根据索引取第一个元素
cat ./test.json | jq &amp;#39;.[0]&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h6 id=&#34;-是管道线的意思把前面命令的输出当作是后面命令的输入如上第一个属性列表命令把--作为输入进而访问嵌套的属性-name打印结果见下图&#34;&gt;&lt;code&gt;|&lt;/code&gt; 是管道线的意思，把前面命令的输出当作是后面命令的输入。如上第一个&lt;code&gt;属性列表&lt;/code&gt;命令把 &lt;code&gt;.[]&lt;/code&gt; 作为输入，进而访问嵌套的属性 &lt;code&gt;.name&lt;/code&gt;，打印结果见下图：&lt;/h6&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_JSON/iOS_JSON02.jpg&#34; alt=&#34;jq&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;jq 是一个效率很高的 JSON 处理工具，使用起来也非常简单方便，我这里只简单记录下常用的功能，一般的 JSON 处理需求之后都可以使用 jq。&lt;/p&gt;
&lt;h5 id=&#34;今日心得jq-只是一个缩影要学习的东西还非常多加油吧少年&#34;&gt;今日心得：jq 只是一个缩影，要学习的东西还非常多，加油吧少年！&lt;/h5&gt;
&lt;h4 id=&#34;参考博客&#34;&gt;参考博客&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xktxoo/article/details/87909432?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control&amp;amp;dist_request_id=&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control&#34;&gt;[linux命令] jq - JSON处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/tutorial/&#34;&gt;https://stedolan.github.io/jq/tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>iOS 开发 - iconfont 矢量图使用</title>
      <link>https://liupengkun1993.github.io/post/ios/tips/ios-%E5%BC%80%E5%8F%91-iconfont-%E7%9F%A2%E9%87%8F%E5%9B%BE%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 29 Mar 2021 20:13:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/ios/tips/ios-%E5%BC%80%E5%8F%91-iconfont-%E7%9F%A2%E9%87%8F%E5%9B%BE%E4%BD%BF%E7%94%A8/</guid>
      
        <description>&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;组件化项目可能会存在这样的问题：不同组件引用相同的图片，这种情况怎么处理？相同的图片是存储一份还是存储多份？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;方案1&#34;&gt;方案1&lt;/h3&gt;
&lt;p&gt;存储一份，比如我们可以打造一个基础组件，这个组件用来存储该项目用到的所有图片，其他组件直接引用该组件内的图片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：只存储了一份图片，适合项目内图片重用多、且图片较大的情况；&lt;/li&gt;
&lt;li&gt;弊端：
&lt;ul&gt;
&lt;li&gt;维护麻烦，假如该项目有 20 个 iOS 开发，那么这 20 个 iOSer 可能同时都会修改图片组件，很容易引发冲突，另外开发人员的职责也不够清晰；&lt;/li&gt;
&lt;li&gt;图片组件复用度低，比如新开启的一个项目需要使用组件 a，组件 a 有引用图片组件，但一般不会直接复用原有项目的图片组件（原项目图片组件内的图片很多），需要另外新建一个图片组件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方案2&#34;&gt;方案2&lt;/h3&gt;
&lt;p&gt;存储多份，每个组件都将各自使用的图片以 bundle 的形式存储在组件内部，各自负责，我知道的有几个公司也都是以这个方案为主，包括我目前公司也是这么处理的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;解耦合，方便维护；&lt;/li&gt;
&lt;li&gt;组件方便复用，比如公司多个项目使用了相同的功能组件，直接拿过去用即可，不用担心图片显示问题；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;弊端：会牺牲一些内存，但图片小的话影响可以忽略不计；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iconfont&#34;&gt;iconfont&lt;/h2&gt;
&lt;p&gt;上述两个方案各有优缺点，那么还有没有优化空间呢？在耦合度和内存之间找寻一个适当的点？&lt;/p&gt;
&lt;p&gt;其实还可以使用 iconfont 矢量图，可以在网站 &lt;a href=&#34;https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2&#34;&gt;https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2&lt;/a&gt; 上下载一些图片素材，然后将图片素材中的 .ttf 文件拉到项目中，不再使用 @2x，@3x 这种图片格式，而是通过 iconfont 的形式创建图片。&lt;/p&gt;
&lt;p&gt;通过 iconfont 创建图片有什么好处呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;瘦包，字体文件比图片文件要小很多，因此在内存方面会有所改善；&lt;/li&gt;
&lt;li&gt;增加复用性，开发可以根据设计图灵活修改图片颜色，即一个 .ttf 文件可能会使用多次；&lt;/li&gt;
&lt;li&gt;iconfont 相对图片文件更为保真；&lt;/li&gt;
&lt;li&gt;维护成本相对较低，直接让设计同学帮忙做好图标，后续如果有颜色或者大小修改，直接修改代码即可，开发和设计都更为方便；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前暂未发现明显的缺陷，看网上有人说，iconfont 图标的绘制规则有一些限制，比如渐变、模糊、阴影这些可能会导致上传 iconfont 失败，但这个影响不大。&lt;/p&gt;
&lt;p&gt;在 iOS 开发中，iconfont 的使用较为简单，可以直接参考以下博客：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/61957b4bc348&#34;&gt;iOS - IconFont的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/3b10bb95b332&#34;&gt;在iOS开发中使用iconfont图标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>2020 年终总结</title>
      <link>https://liupengkun1993.github.io/post/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 31 Dec 2020 11:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;2020 是很特殊的一年，年初暴发的疫情，一直持续到年尾还没有结束，看态势必定会蔓延到 2021 了。&lt;/p&gt;
&lt;p&gt;这场疫情对每个人的生活及工作影响都很大，因此疫情是 2020 年度个人总结绕不过的一个话题。因为这场疫情，几乎每座城每个村都封闭或者半封闭了一段时间，这是我三月份去上班时在地铁上拍的一张照片，本该人挤人的地铁上只有寥寥数人，当时的感想是很怀念人挤人的时刻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/subway.jpg&#34; alt=&#34;地铁 8 号线 2020.03.15&#34;&gt;&lt;/p&gt;
&lt;p&gt;疫情影响了工作和生活，但工作和生活还是要继续。接下来我会分几个方面总结一下即将过去的 2020。&lt;/p&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;今年一直待在七天网络这家教育公司，由于种种原因我们部门没有移动端的业务（本来是要做移动端项目的，但由于疫情原因，北京这边的部门被取消了招人计划，移动端业务终究还是没有迁过来），所以我主要时间做的不再是 iOS 开发，而是大数据开发。&lt;/p&gt;
&lt;p&gt;关于大数据开发的工作内容，后面会在【技术-大数据】这个话题下着重介绍。&lt;/p&gt;
&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;
&lt;p&gt;接下来总结一下 2020 接触过的技术。&lt;/p&gt;
&lt;h3 id=&#34;ios-开发&#34;&gt;iOS 开发&lt;/h3&gt;
&lt;p&gt;工作上已经一年不怎么写 iOS 项目了，甚是怀念，毕竟之前几年一直在做 iOS 开发，现在只能偶尔和几个 iOS 朋友同事聚聚，另外自己几乎每星期都会写写 iOS，忙的时候只是写个简单的方法，或者用 Swift 练习算法，聊以抒怀🤣。&lt;/p&gt;
&lt;p&gt;今年读了几本 iOS 相关的书，有一些写了读书笔记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/objective-c%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bios%E4%B8%8Eos-x%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《Objective-C高级编程iOS与OS X多线程和内存管理》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96/&#34;&gt;高性能iOS应用开发 - 核心优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-ios%E6%80%A7%E8%83%BD/&#34;&gt;高性能iOS应用开发 - iOS性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/model-view-viewmodel+%E5%8D%8F%E8%B0%83%E5%99%A8-mvvm-c/&#34;&gt;Model-View-ViewModel+协调器 (MVVM-C)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/model-view-controller-mvc/&#34;&gt;Model-View-Controller (MVC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/mvc-%E4%B8%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B1%82%E6%9E%B6%E6%9E%84/&#34;&gt;MVC 下的网络层架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《代码整洁之道》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些读书笔记基本上都是性能与架构方面的，因为自己想往精深方向发展，所以啃了这几本厚书。&lt;/p&gt;
&lt;p&gt;另外还学习了戴铭老师的 &lt;a href=&#34;https://time.geekbang.org/column/intro/161?code=PbktFs%2Fw7EHB9TJpCcw1bc9KoCR%2FYLnpUmqrB0uOruk%3D&#34;&gt;iOS开发高手课&lt;/a&gt;，很推荐，这里是我做的课堂笔记：&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/ios%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/&#34;&gt;《iOS开发高手课》学习笔记&lt;/a&gt;。戴铭老师的课程非常底层非常深入，我从这个课程里学习到了很多知识。&lt;/p&gt;
&lt;p&gt;另外我还使用 Swift 在 LeetCode 刷了 60 道算法题：&lt;a href=&#34;https://github.com/LiuPengKun1993/Algorithm&#34;&gt;Algorithm&lt;/a&gt;。最近刷算法的一些感悟：必须每道题都消化透了，达到能够手写算法的水平，不用刷的非常多，只要各种类型的都懂一些，搞明白算法逻辑就可以，类似数学题，一通百通。&lt;/p&gt;
&lt;p&gt;设计模式也是使用 Swift 练习了二十来个：&lt;a href=&#34;https://github.com/LiuPengKun1993/Design-Patterns&#34;&gt;设计模式（Design-Patterns）&lt;/a&gt;，这几乎是 iOS 业界常用的一些设计模式了。&lt;/p&gt;
&lt;p&gt;还有年初的时候计划用 Swift 写 30 个小项目，但后来因为一些原因（其实是因为懒）暂停了，只完成了 12 个，这里是项目地址：&lt;a href=&#34;https://github.com/LiuPengKun1993/Swift30&#34;&gt;Swift30&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;flutter&#34;&gt;Flutter&lt;/h3&gt;
&lt;p&gt;另外我还试着学习了 Flutter，Flutter 配置环境还是很简单的，这是我学习过程中总结的博客：&lt;a href=&#34;https://liupengkun1993.github.io/post/flutter/mac-%E9%85%8D%E7%BD%AE-flutter-%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C-ios-android-%E4%B8%A4%E7%AB%AF/&#34;&gt;Mac 配置 Flutter 环境，运行 iOS Android 两端&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;还试着写了两个简单的 Demo：&lt;a href=&#34;https://github.com/LiuPengKun1993/hello_flutter&#34;&gt;hello_flutter&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/LiuPengKun1993/flutter_shop&#34;&gt;flutter_shop&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/flutter_list.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;总体上 Flutter 给我的感觉还是很好的。比如它的优点：一份代码多处运行、性能接近原生、体验好等；但也有让我感觉不是很好的地方，比如：套娃式的代码嵌套、环境不稳定，有时需要执行 &lt;code&gt;source ~./zprofile&lt;/code&gt; 命令（这个只是我作为初级 Flutter 的使用感受，也许不对）。总之还是很看好 Flutter 的未来的，列出几个不错的 Flutter 学习资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flutter.io/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutterchina.club/&#34;&gt;Flutter 中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.flutterchina.club&#34;&gt;Flutter 实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cndartlang.com/&#34;&gt;Dart 语言中文论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于跨平台开发这里再多说一些，我们公司有几个项目使用的也是跨平台开发，但使用的跨平台方案是 &lt;code&gt;Cordova+Ionic+Angular&lt;/code&gt;，我个人不是很看好这种跨平台方案，业界用这种跨平台方案的公司也不多，但因为年初我们技术总监说要把 APP 接到我们部门来做，所以也简单了解了这种跨平台方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/cordova/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91-cordova+ionic+angular-%E5%88%9B%E5%BB%BA-ios-%E5%8F%8A%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE/&#34;&gt;混合开发 Cordova+Ionic+Angular 创建 iOS 及安卓项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/cordova/cordova-%E4%BD%BF%E7%94%A8-app-center-%E8%BF%9B%E8%A1%8C%E7%83%AD%E6%9B%B4%E6%96%B0/&#34;&gt;Cordova 使用 App Center 进行热更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 &lt;code&gt;Cordova+Ionic+Angular&lt;/code&gt; 这种跨平台方案总体感觉不是很好，性能、体验、可查资料等各方面都落后于 Flutter 、RN 这些。&lt;/p&gt;
&lt;h3 id=&#34;js--vue--nodejs&#34;&gt;JS / Vue / Node.js&lt;/h3&gt;
&lt;p&gt;众所周知，大前端这个概念在业界早已普及了，每个移动端开发人员多多少少都会接触一些前端开发的知识，另外还有些前端人员也在学习移动端。比如我认识的一些 iOSer，他们很多都接触过一些前端领域的知识，有的是工作中用到的，有的是自己抽空学习的。还有我目前公司的前端开发，也是一直想着学习 iOS。大前端必然是未来的一个重要走向，当然我们要学习的不只是前端，还包括后端等领域。&lt;/p&gt;
&lt;p&gt;在工作中，刚入职七天网络时我负责埋点 SDK 的开发工作，包括前端、移动端、后端，当然这些在 2019 年就已经开发完毕了。只是偶尔需要维护，期间我总结了一些 JS / Node.js 相关的技术点，简单记录了一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/js/js-%E8%A1%A8%E5%8D%95%E6%A0%BC%E5%BC%8F%E7%9B%B4%E4%BC%A0-oss/&#34;&gt;JS 表单格式直传 OSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/%E5%90%8E%E7%AB%AF/node.js-oss-%E5%90%8E%E7%AB%AF%E7%AD%BE%E5%90%8D/&#34;&gt;Node.js OSS 后端签名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外我还基于 Node.js 实现了一些常见接口：&lt;a href=&#34;https://github.com/LiuPengKun1993/PracticeService&#34;&gt;PracticeService&lt;/a&gt;，算是对 Node.js 学习的巩固。&lt;/p&gt;
&lt;p&gt;除此之外我还学习了 Vue，使用 Vue 做了一个网站，代码放到了 GitHub：&lt;a href=&#34;https://github.com/LiuPengKun1993/vue_shop&#34;&gt;Vue实战项目：后台电商管理系统&lt;/a&gt;。主要使用的技术栈有：&lt;code&gt;Vue&lt;/code&gt;、&lt;code&gt;Vue-router&lt;/code&gt;、&lt;code&gt;Element-UI&lt;/code&gt;、&lt;code&gt;Axios&lt;/code&gt;、&lt;code&gt;Echarts&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/vue_shop01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;大数据&#34;&gt;大数据&lt;/h3&gt;
&lt;p&gt;接下来就说说大数据了，毕竟将近一年时间都在和数据开发打交道。iOS 开发和大数据开发这两个领域差别很大，我为什么会做大数据开发呢？去年的年终总结上有提到原因：&lt;a href=&#34;https://liupengkun1993.github.io/post/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/&#34;&gt;2019 年终总结&lt;/a&gt;。说到底还是因为“救火”，结果把自己送到了一片全新的领域了。&lt;/p&gt;
&lt;p&gt;当然做大数据开发也有好处，毕竟接触了新的技术领域，开拓了技术栈，涨了见识，对数据端认识的更清晰了。&lt;/p&gt;
&lt;p&gt;接着说说我在大数据开发中主要负责的工作。&lt;/p&gt;
&lt;p&gt;因为数据部门前期人员较少，所以我一个人负责埋点项目的所有层的数据开发，包括 ODS、DWD、DWS、ADS 这四层，目前埋点项目稳定运行，涵盖了公司十几个项目，每天新增的数据量有上千万条，高峰时期一天的数据量将近 8000 万。&lt;/p&gt;
&lt;p&gt;后来随着业务的扩展，帮忙招了几个数据开发，另外随着埋点项目的日益稳定，我逐渐很少再关注埋点相关的数据开发，开始转向业务数据、数仓分层设计、数据建模、探索新技术等，并根据当时使用的部分技术栈做了简单的记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%86%9B%E8%A7%84/&#34;&gt;MySQL 数据库开发军规&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/datax-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/&#34;&gt;DataX 的配置及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/hive-%E8%B0%83%E4%BC%98-hive.fetch.task.conversion/&#34;&gt;HIVE 调优—— hive.fetch.task.conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/%E6%B5%85%E8%B0%88-hive-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/&#34;&gt;浅谈 Hive 性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/&#34;&gt;数据仓库建模——维度建模&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/maxcompute-%E8%87%AA%E5%AE%9A%E4%B9%89-java-udf/&#34;&gt;MaxCompute 自定义 Java UDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/dataworks-%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/&#34;&gt;DataWorks 错误汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/canal-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/&#34;&gt;Canal 问题汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/quickbi-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/&#34;&gt;QuickBI 问题汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/fluentd-%E8%AF%BB%E5%86%99-oss/&#34;&gt;Fluentd 读写 OSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实做数据开发，很多时候都是在写 Hive，数据建模数仓分层这些就类似于 iOS 里面的架构模式，一旦定好规则，很多时候还是写代码，写脚本，所以数据开发者很多时候自嘲是 SQLBoy。&lt;/p&gt;
&lt;p&gt;关于这将近一年的数据开发，以前的我肯定想不到自己会有这样的际遇，很感谢公司给与这样的机会。但我还是想回归 iOS，大数据的同事说数据职位工资高，我深入思考过，大数据的技术栈我懂的并不多，目前我的大数据技术只能满足于公司日常工作，而且做大数据几乎是抛弃了自己积累了几年的大前端经验（大数据领域很少能用到大前端技术栈）。因此考虑再三，我还是决定回归 iOS。&lt;/p&gt;
&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;
&lt;h3 id=&#34;居家办公&#34;&gt;居家办公&lt;/h3&gt;
&lt;p&gt;年后担心北京封城，我和媳妇儿初五便往北京赶，紧接着开始屯面粉、米、油、以及各种能长期存放的蔬菜等，这期间也被动的学会了做各种“大餐”🤣。我们公司一直到五一假期之后的 05.06 号才结束远程办公，因此在家办公的这几个月一直待在租的小屋里，只有晚上人少的时候才和媳妇儿一起去楼下跳跳绳，透透气。&lt;/p&gt;
&lt;h3 id=&#34;国庆节带爸妈北京游&#34;&gt;国庆节带爸妈北京游&lt;/h3&gt;
&lt;p&gt;国内的疫情控制的很好，入夏之后，出游人数逐日增多。想着来北京工作几年了，却还没带爸妈来北京玩过，就给他们买了高铁票，好说歹说把二老劝过来了。带爸妈以及小外甥去看了天安门、故宫、长城、动物园等地方，还带他们去吃了他们平时舍不得吃的各种“美食”。但也有一点遗憾，就是当时预约了毛主席纪念堂，但不知什么原因，网站上明明显示预约成功，现场扫二维码的时候却说我们没有预约上，很大一批游客都是这样，最后只能望而止步了，这里不得不吐槽毛主席纪念堂的预约网站。总体上还是很好的，毕竟爸妈第一次来北京，希望下一次能带他们去更远的地方游玩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/tiananmen.jpg&#34; alt=&#34;天安门升国旗 2020.10.06&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;阅读&#34;&gt;阅读&lt;/h3&gt;
&lt;p&gt;今年一共读了 19 本书，其中包括 6 本技术书籍，13 本非技术书籍。技术书籍一般都写了读书笔记，放在了博客里面；非技术书籍有些也写了读书心得，存在了个人的印象笔记里。下面列出 2020 书单（带✨越多越推荐）：&lt;/p&gt;
&lt;h4 id=&#34;技术书籍&#34;&gt;技术书籍&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;《高性能iOS应用开发》✨✨✨&lt;/li&gt;
&lt;li&gt;《App架构》✨&lt;/li&gt;
&lt;li&gt;《Docker-从入门到实践》✨&lt;/li&gt;
&lt;li&gt;《JavaScript 语言入门教程》✨&lt;/li&gt;
&lt;li&gt;《代码整洁之道》✨&lt;/li&gt;
&lt;li&gt;《Objective-C高级编程：iOS与OS X多线程和内存管理》✨✨&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;非技术书籍&#34;&gt;非技术书籍&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;《肖申克的救赎》✨&lt;/li&gt;
&lt;li&gt;《时间的玫瑰》✨✨✨&lt;/li&gt;
&lt;li&gt;《悟空传》✨&lt;/li&gt;
&lt;li&gt;《飞狐外传》✨&lt;/li&gt;
&lt;li&gt;《人间有味是清欢》✨&lt;/li&gt;
&lt;li&gt;《中央帝国的财政密码》 ✨✨✨&lt;/li&gt;
&lt;li&gt;《挪威的森林》&lt;/li&gt;
&lt;li&gt;《亲爱的安德烈》&lt;/li&gt;
&lt;li&gt;《显微镜下的大明》&lt;/li&gt;
&lt;li&gt;《中央帝国的军事密码》   ✨✨&lt;/li&gt;
&lt;li&gt;《富爸爸财富自由之路》   ✨✨&lt;/li&gt;
&lt;li&gt;《投资中最简单的事》 ✨✨&lt;/li&gt;
&lt;li&gt;《中国近代史》 ✨✨&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：有些不带✨或✨比较少的，并不完全代表作品不好，比如《挪威的森林》、《显微镜下的大明》，这两本我大学时候读过感觉不错，也曾向几位朋友推荐过，但如今再读就没有那么深的感触了。估计是不太合我现在的胃口了哈哈哈😆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;徒步爬山&#34;&gt;徒步爬山&lt;/h3&gt;
&lt;p&gt;我个人是比较喜欢徒步爬山的，去年定的是徒步爬山 6 次，但由于疫情原因，只出去了 2 次，其中还有一次无疾而终。因此真正上的徒步，今年只有 1 次。那就是 08 月 29 号，与媳妇儿一起走了京郊古道，全程 15.41 km。初级徒步，虽然很累，但感觉是很好的。&lt;/p&gt;
&lt;h3 id=&#34;健身&#34;&gt;健身&lt;/h3&gt;
&lt;p&gt;今年没怎么健身，身体素质完全是在吃老本。2021 要对这一指标进行加强。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;最后回顾一下 2020，展望一下 2021。&lt;/p&gt;
&lt;h3 id=&#34;回顾-2020&#34;&gt;回顾 2020&lt;/h3&gt;
&lt;p&gt;O1：技术&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KR&lt;/th&gt;
&lt;th&gt;完成进度&lt;/th&gt;
&lt;th&gt;总结&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6本技术书籍&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;算法&lt;/td&gt;
&lt;td&gt;80%&lt;/td&gt;
&lt;td&gt;截止最后一天，刷了 60 道 LeetCode 算法题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iOS 进阶&lt;/td&gt;
&lt;td&gt;80%&lt;/td&gt;
&lt;td&gt;三本 iOS 相关的书籍、学习戴铭老师的课程等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设计模式&lt;/td&gt;
&lt;td&gt;80%&lt;/td&gt;
&lt;td&gt;使用 Swift 练习了一些设计模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flutter&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;简单试用，目前水平应该能写简单项目，开发经验不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JS / Vue / Node.js&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;简单试用，目前水平应该能写简单项目，开发经验不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 30 个项目&lt;/td&gt;
&lt;td&gt;40%&lt;/td&gt;
&lt;td&gt;只写了 12 个，后来放弃了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;O2：生活&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KR&lt;/th&gt;
&lt;th&gt;完成进度&lt;/th&gt;
&lt;th&gt;总结&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;20本非技术书籍&lt;/td&gt;
&lt;td&gt;65%&lt;/td&gt;
&lt;td&gt;只读了13本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;带父母游北京&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;虽有小遗憾，但总体上还算不错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;徒步爬山&lt;/td&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;只走了 1.5 次，当时定的是 6 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;健身&lt;/td&gt;
&lt;td&gt;5%&lt;/td&gt;
&lt;td&gt;只记得奥森跑了两次，偶尔室内锻炼，总之今年很少锻炼&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;展望-2021&#34;&gt;展望 2021&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;KR1: 阅读 21 本书，其中 6 本技术书籍，15 本非技术书籍&lt;/li&gt;
&lt;li&gt;KR2: 输出 15 篇技术博客&lt;/li&gt;
&lt;li&gt;KR3: 跳槽回归 iOS&lt;/li&gt;
&lt;li&gt;KR4: LeetCode 刷 50 道算法题&lt;/li&gt;
&lt;li&gt;KR5: iOS 深入学习，研究两个三方库或苹果底层库&lt;/li&gt;
&lt;li&gt;KR6: GitHub Contributions 300+&lt;/li&gt;
&lt;li&gt;KR7: 跑步 200 km&lt;/li&gt;
&lt;li&gt;KR8: 爬山徒步 5 次&lt;/li&gt;
&lt;li&gt;KR9: 学习理财知识&lt;/li&gt;
&lt;li&gt;KR10: 学习教育相关的知识&lt;/li&gt;
&lt;li&gt;KR11: 了解装修方面的知识&lt;/li&gt;
&lt;li&gt;KR12: 拍 1000 张照片，30 个短视频&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：目前能想到的计划只有这些，可能会有补充，也可能会做适当调整。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>DataX 的配置及使用</title>
      <link>https://liupengkun1993.github.io/post/bigdata/datax-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/datax-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;DataX 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括 MySQL、SQL Server、Oracle、PostgreSQL、HDFS、Hive、HBase、OTS、ODPS 等各种异构数据源之间高效的数据同步功能。&lt;/p&gt;
&lt;p&gt;其官网地址：&lt;a href=&#34;https://github.com/alibaba/DataX&#34;&gt;https://github.com/alibaba/DataX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;快速上手步骤&#34;&gt;快速上手步骤&lt;/h2&gt;
&lt;h3 id=&#34;1下载-datax&#34;&gt;1.下载 DataX&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/DataX#download-datax%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80&#34;&gt;DataX 下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2配置任务-json&#34;&gt;2.配置任务 Json&lt;/h3&gt;
&lt;p&gt;下载的 DataX 的目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/datax/datax2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置 &lt;code&gt;datax/job&lt;/code&gt; 文件夹下的 Json：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;job&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;reader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysqlreader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;remark&amp;#34;&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;jdbcUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8&amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;school_menu&amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;writer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysqlwriter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;remark&amp;#34;&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;school_test&amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;setting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;speed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;任务 Json 由三部分组成，分别是读，写和通用配置。&lt;/p&gt;
&lt;h4 id=&#34;reader-部分常用参数&#34;&gt;Reader 部分常用参数：&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;与要读取的数据库一致&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jdbcUrl&lt;/td&gt;
&lt;td&gt;数据库链接&lt;/td&gt;
&lt;td&gt;数组，会自动选择一个合法的链接，可以填写连接附件控制信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;username&lt;/td&gt;
&lt;td&gt;数据库用户名&lt;/td&gt;
&lt;td&gt;字符串，数据库的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;数据库密码&lt;/td&gt;
&lt;td&gt;字符串，数据库的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;要同步的表名&lt;/td&gt;
&lt;td&gt;数组，需保证表结构一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;td&gt;要同步的列名&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where&lt;/td&gt;
&lt;td&gt;选取的条件&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;querySql&lt;/td&gt;
&lt;td&gt;自定义查询语句&lt;/td&gt;
&lt;td&gt;会自动忽略上述的同步条件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;writer-部分常用参数&#34;&gt;Writer 部分常用参数：&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;与要读取的数据库一致&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jdbcUrl&lt;/td&gt;
&lt;td&gt;数据库链接&lt;/td&gt;
&lt;td&gt;字符串，可以填写连接附件控制信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;username&lt;/td&gt;
&lt;td&gt;数据库用户名&lt;/td&gt;
&lt;td&gt;字符串，数据库的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;数据库密码&lt;/td&gt;
&lt;td&gt;字符串，数据库的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;要同步的表名&lt;/td&gt;
&lt;td&gt;数组，需保证表结构一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;td&gt;列名可以不对应，但是类型和总的个数要一致&lt;/td&gt;
&lt;td&gt;数组，需保证表结构一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preSql&lt;/td&gt;
&lt;td&gt;写入前执行的语句&lt;/td&gt;
&lt;td&gt;数组，比如清空表等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postSql&lt;/td&gt;
&lt;td&gt;写入后执行的语句&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;writeMode&lt;/td&gt;
&lt;td&gt;写入方式，默认为insert&lt;/td&gt;
&lt;td&gt;insert/replace/update&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;job.setting.speed (流量控制)
&lt;ul&gt;
&lt;li&gt;Job 支持用户对速度的自定义控制，channel 的值可以控制同步时的并发数，byte 的值可以控制同步时的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;job.setting.errorLimit (脏数据控制)
&lt;ul&gt;
&lt;li&gt;Job 支持用户对于脏数据的自定义监控和告警，包括对脏数据最大记录数阈值（record 值）或者脏数据占比阈值（percentage 值），当 Job 传输过程出现的脏数据大于用户指定的数量/百分比，DataX Job 报错退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令行 cd 到 &lt;code&gt;datax/bin&lt;/code&gt; 目录下，执行 &lt;code&gt;python datax.py ../job/mysqltomysql.json&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/datax/datax0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后看到 school_test 表的数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/datax/datax1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;到此已经成功了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>MySQL 数据库开发军规</title>
      <link>https://liupengkun1993.github.io/post/bigdata/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%86%9B%E8%A7%84/</link>
      <pubDate>Sun, 27 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%86%9B%E8%A7%84/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;本篇记录的是 MySQL 数据库开发注意要点，是 [MySQL数据库开发的三十六条军规——石展@赶集]的学习笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;核心军规&#34;&gt;核心军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尽量不在数据库做运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂运算移到程序端CPU&lt;/li&gt;
&lt;li&gt;尽可能简单应用MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制单表数据量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一年内的单表数据量预估
&lt;ul&gt;
&lt;li&gt;纯INT不超1000W&lt;/li&gt;
&lt;li&gt;含CHAR不超500W&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建议单库不超过300-400个表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持表身段苗条&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表字段数少而精
&lt;ul&gt;
&lt;li&gt;IO高效&lt;/li&gt;
&lt;li&gt;全表遍历&lt;/li&gt;
&lt;li&gt;表修复快&lt;/li&gt;
&lt;li&gt;提高并发&lt;/li&gt;
&lt;li&gt;alter table 快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单表1G体积 500W行评估
&lt;ul&gt;
&lt;li&gt;顺序读1G文件需N秒&lt;/li&gt;
&lt;li&gt;单行不超过200Byte&lt;/li&gt;
&lt;li&gt;单表不超50个纯INT字段&lt;/li&gt;
&lt;li&gt;单表不超20个CHAR(10)字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单表字段数上限控制在20~50个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平衡范式与冗余&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格遵循三大范式&lt;/li&gt;
&lt;li&gt;效率优先、提升性能&lt;/li&gt;
&lt;li&gt;没有绝对的对与错&lt;/li&gt;
&lt;li&gt;适当时牺牲范式、加入冗余&lt;/li&gt;
&lt;li&gt;但会增加代码复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拒绝3B&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大SQL (BIG SQL)&lt;/li&gt;
&lt;li&gt;大事务 (BIG Transaction)&lt;/li&gt;
&lt;li&gt;大批量 (BIG Batch)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量不在数据库做运算&lt;/li&gt;
&lt;li&gt;控制单表数据量&lt;/li&gt;
&lt;li&gt;保持表身段苗条&lt;/li&gt;
&lt;li&gt;平衡范式与冗余&lt;/li&gt;
&lt;li&gt;拒绝3B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;字段类军规&#34;&gt;字段类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用好数值字段类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三类数值类型:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TINYINT(1Byte)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SMALLINT(2B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MEDIUMINT(3B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INT(4B)、BIGINT(8B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FLOAT(4B)、DOUBLE(8B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECIMAL(M,D)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将字符转化为数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字型VS字符串型索引
&lt;ul&gt;
&lt;li&gt;更高效&lt;/li&gt;
&lt;li&gt;查询更快&lt;/li&gt;
&lt;li&gt;占用空间更小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例:用无符号INT存储IP，而非CHAR(15)
&lt;ul&gt;
&lt;li&gt;INT UNSIGNED&lt;/li&gt;
&lt;li&gt;INET_ATON()&lt;/li&gt;
&lt;li&gt;INET_NTOA()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先使用ENUM或SET&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优先使用ENUM或SET
&lt;ul&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;可能值已知且有限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储
&lt;ul&gt;
&lt;li&gt;ENUM占用1字节，转为数值运算&lt;/li&gt;
&lt;li&gt;SET视节点定，最多占用8字节&lt;/li&gt;
&lt;li&gt;比较时需要加‘单引号(即使是数值)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sex&lt;/code&gt; enum(&amp;lsquo;F&amp;rsquo;,&amp;lsquo;M&amp;rsquo;) COMMENT &amp;lsquo;性别&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1&lt;/code&gt; enum(&amp;lsquo;0&amp;rsquo;,&amp;lsquo;1&amp;rsquo;,&amp;lsquo;2&amp;rsquo;,&amp;lsquo;3&amp;rsquo;) COMMENT &amp;lsquo;职介审核&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免使用NULL字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用NULL字段
&lt;ul&gt;
&lt;li&gt;很难进行查询优化&lt;/li&gt;
&lt;li&gt;NULL列加索引，需要额外空间&lt;/li&gt;
&lt;li&gt;含NULL复合索引无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; int(10) NOT NULL DEFAULT 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;少用并拆分TEXT/BLOB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TEXT类型处理性能远低亍VARCHAR
&lt;ul&gt;
&lt;li&gt;强制生成硬盘临时表&lt;/li&gt;
&lt;li&gt;浪费更多空间&lt;/li&gt;
&lt;li&gt;VARCHAR(65535)==&amp;gt;64K (注意UTF-8)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不用TEXT/BLOB数据类型&lt;/li&gt;
&lt;li&gt;若必须使用则拆分到单独的表&lt;/li&gt;
&lt;li&gt;举例:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不在数据库里存图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字段类军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用好数值字段类型&lt;/li&gt;
&lt;li&gt;将字符转化为数字&lt;/li&gt;
&lt;li&gt;优先使用枚丼ENUM/SET&lt;/li&gt;
&lt;li&gt;避免使用NULL字段&lt;/li&gt;
&lt;li&gt;少用并拆分TEXT/BLOB&lt;/li&gt;
&lt;li&gt;不在数据库里存图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;索引类军规&#34;&gt;索引类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;谨慎合理添加索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谨慎合理添加索引
&lt;ul&gt;
&lt;li&gt;改善查询&lt;/li&gt;
&lt;li&gt;减慢更新&lt;/li&gt;
&lt;li&gt;索引不是越多越好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;能不加的索引尽量不加
&lt;ul&gt;
&lt;li&gt;综合评估数据密度和数据分布&lt;/li&gt;
&lt;li&gt;最好不超过字段数20%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符字段必须建前缀索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分度
&lt;ul&gt;
&lt;li&gt;单字母区分度:&lt;code&gt;26&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4字母区分度:&lt;code&gt;26*26*26*26=456,976&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;5字母区分度:&lt;code&gt;26*26*26*26*26=11,881,376&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6字母区分度:&lt;code&gt;26*26*26*26*26*26=308,915,776&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符字段必须建前缀索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinyin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;小区拼音&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_pinyin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinyin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不在索引列做运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不在索引列进行数学运算或凼数运算
&lt;ul&gt;
&lt;li&gt;无法使用索引&lt;/li&gt;
&lt;li&gt;导致全表扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自增列或全局ID做INNODB主键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对主键建立聚簇索引&lt;/li&gt;
&lt;li&gt;二级索引存储主键值&lt;/li&gt;
&lt;li&gt;主键不应更新修改&lt;/li&gt;
&lt;li&gt;按自增顺序插入值&lt;/li&gt;
&lt;li&gt;忌用字符串做主键&lt;/li&gt;
&lt;li&gt;聚簇索引分裂&lt;/li&gt;
&lt;li&gt;推荐用独立于业务的AUTO_INCREMENT列或全局ID生成 器做代理主键&lt;/li&gt;
&lt;li&gt;若不指定主键，InnoDB会用唯一且非空值索引代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不用外键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线上OLTP系统(线下系统另论)
&lt;ul&gt;
&lt;li&gt;外键可节省开发量&lt;/li&gt;
&lt;li&gt;有额外开销&lt;/li&gt;
&lt;li&gt;逐行操作&lt;/li&gt;
&lt;li&gt;可‘到达’其它表，意味着锁&lt;/li&gt;
&lt;li&gt;高并发时容易死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引类军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谨慎合理添加索引&lt;/li&gt;
&lt;li&gt;字符字段必须建前缀索引&lt;/li&gt;
&lt;li&gt;不在索引列做运算&lt;/li&gt;
&lt;li&gt;自增列或全局ID做INNODB主键&lt;/li&gt;
&lt;li&gt;尽量不用外键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sql-类军规&#34;&gt;SQL 类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL语句尽可能简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大SQL VS 多个简单SQL
&lt;ul&gt;
&lt;li&gt;传统设计思想&lt;/li&gt;
&lt;li&gt;BUT MySQL NOT&lt;/li&gt;
&lt;li&gt;一条SQL叧能在一个CPU运算&lt;/li&gt;
&lt;li&gt;5000+ QPS的高并发中，1秒大SQL意味着?&lt;/li&gt;
&lt;li&gt;可能一条大SQL就把整个数据库堵死&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拒绝大SQL，拆解成多条简单SQL
&lt;ul&gt;
&lt;li&gt;简单SQL缓存命中率更高&lt;/li&gt;
&lt;li&gt;减少锁表时间，特别是MyISAM&lt;/li&gt;
&lt;li&gt;用上多CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持事务(连接)短小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持事务/DB连接短小精悍
&lt;ul&gt;
&lt;li&gt;事务/连接使用原则:即开即用，用完即关&lt;/li&gt;
&lt;li&gt;不事务无关操作放到事务外面, 减少锁资源的占用&lt;/li&gt;
&lt;li&gt;不破坏一致性前提下，使用多个短事务代替长事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;发贴时的图片上传等待&lt;/li&gt;
&lt;li&gt;大量的sleep连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽可能避免使用SP/TRIG/FUNC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线上OLTP系统(线下库另论)
&lt;ul&gt;
&lt;li&gt;尽可能少用存储过程&lt;/li&gt;
&lt;li&gt;尽可能少用触发器&lt;/li&gt;
&lt;li&gt;减用使用MySQL凼数对结果进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不用 SELECT *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用SELECT * 时
&lt;ul&gt;
&lt;li&gt;更多消耗CPU、内存、IO、网络带宽&lt;/li&gt;
&lt;li&gt;先向数据库请求所有列，然后丢掉丌需要列?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不用SELECT * ，叧取需要数据列
&lt;ul&gt;
&lt;li&gt;更安全的设计:减少表变化带来的影响&lt;/li&gt;
&lt;li&gt;为使用covering index提供可能性&lt;/li&gt;
&lt;li&gt;Select/JOIN减少硬盘临时表生成，特别是有TEXT/BLOB时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;SELECT * FROM tag WHERE id = 999184&lt;/li&gt;
&lt;li&gt;⬇️&lt;/li&gt;
&lt;li&gt;SELECT keyword FROM tag WHERE id = 999184&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改写OR为IN()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一字段，将or改写为in()
&lt;ul&gt;
&lt;li&gt;OR效率:O(n)&lt;/li&gt;
&lt;li&gt;IN 效率:O(Log n)&lt;/li&gt;
&lt;li&gt;当n很大时，OR会慢很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意控制IN的个数，建议n小于200&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12347856&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; or phone=‘42242233&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;G&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;12347856&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;42242233&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;改写OR为UNION
&lt;ul&gt;
&lt;li&gt;不同字段，将or改为union
&lt;ul&gt;
&lt;li&gt;减少对丌同字段进行 &amp;ldquo;or&amp;rdquo; 查询&lt;/li&gt;
&lt;li&gt;Merge index往往很弱智&lt;/li&gt;
&lt;li&gt;如果有足够信心:&lt;code&gt;set global optimizer_switch=&#39;index_merge=off&#39;&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;010-88886666&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellPhone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;13800138000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	
&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;010-88886666&amp;#39;&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellPhone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;13800138000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;避免负向查询和% 前缀模糊查询
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免负向查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOT、!=、&amp;lt;&amp;gt;、!&amp;lt;、!&amp;gt;、NOT EXISTS、NOT IN、 NOT LIKE等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免 % 前缀模糊查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+ Tree&lt;/li&gt;
&lt;li&gt;使用不了索引&lt;/li&gt;
&lt;li&gt;导致全表扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘北京&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; ;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;298 rows in set (0.01 sec)
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;MySQL&amp;gt; select * from post WHERE title like &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;北京&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; ; 
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;572 rows in set (3.27 sec)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;减少COUNT(*)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM VS INNODB
&lt;ul&gt;
&lt;li&gt;不带 WHERE COUNT()&lt;/li&gt;
&lt;li&gt;带 WHERE COUNT()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COUNT(*)的资源开销大，尽量不用或少用&lt;/li&gt;
&lt;li&gt;计数统计
&lt;ul&gt;
&lt;li&gt;实时统计:用memcache，双向更新，凌晨跑基准&lt;/li&gt;
&lt;li&gt;非实时统计:尽量用单独统计表，定期重算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LIMIT高效分页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统分页:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select * from table limit 10000,10;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LIMIT原理:
&lt;ul&gt;
&lt;li&gt;Limit 10000,10&lt;/li&gt;
&lt;li&gt;偏移量越大则越慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐分页:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select * from table WHERE id&amp;gt;=23423 limit 11;#10+1 (每页10条)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select * from table WHERE id&amp;gt;=23434 limit 11;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LIMIT的高效分页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分页方式二:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select * from table WHERE id &amp;gt;= ( select id from table limit 10000,1 ) limit 10;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分页方式三:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT * FROM table INNER JOIN (SELECT id FROM table LIMIT 10000,10) USING (id) ;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分页方式四:
&lt;ul&gt;
&lt;li&gt;程序取ID:&lt;code&gt;select id from table limit 10000,10&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Select * from table WHERE id in (123,456...) &lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;58&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;323423&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用UNION ALL 而非 UNION
&lt;ul&gt;
&lt;li&gt;若无需对结果进行去重，则用UNION ALL
&lt;ul&gt;
&lt;li&gt;UNION有去重开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20091128&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110427&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110426&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110425&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110424&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110423&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;分解联接保证高并发
&lt;ul&gt;
&lt;li&gt;高并发DB不建议进行两个表以上的JOIN&lt;/li&gt;
&lt;li&gt;适当分解联接保证高并发
&lt;ul&gt;
&lt;li&gt;可缓存大量早期数据&lt;/li&gt;
&lt;li&gt;使用了多个MyISAM表&lt;/li&gt;
&lt;li&gt;对大表的小ID IN()&lt;/li&gt;
&lt;li&gt;联接引用同一个表多次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;‘二手玩具’&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;‘二手玩具’&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1321&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;314&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;141&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;GROUP BY 去除排序
&lt;ul&gt;
&lt;li&gt;GROUP BY 实现
&lt;ul&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;自动排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无需排序:Order by NULL&lt;/li&gt;
&lt;li&gt;特定排序:Group by DESC/ASC&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同数据类型的列值比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原则:数字对数字，字符对字符&lt;/li&gt;
&lt;li&gt;数值列不字符类型比较
&lt;ul&gt;
&lt;li&gt;同时转换为双精度&lt;/li&gt;
&lt;li&gt;进行比对&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符列不数值类型比较
&lt;ul&gt;
&lt;li&gt;字符列整列转数值&lt;/li&gt;
&lt;li&gt;不会使用索引查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同数据类型的列值比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例:字符列不数值类型比较&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;err&#34;&gt;字段&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;备注, 默认为空&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gift_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gift&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deal_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;640&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;115127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gift_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_gift&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deal_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;640&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;115127&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;005&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Load data 导数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量数据快导入:
&lt;ul&gt;
&lt;li&gt;成批装载比单行装载更快，丌需要每次刷新缓存&lt;/li&gt;
&lt;li&gt;无索引时装载比索引装载更快&lt;/li&gt;
&lt;li&gt;Insert values ,values，values 减少索引刷新&lt;/li&gt;
&lt;li&gt;Load data比insert快约20倍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不用 INSERT &amp;hellip; SELECT
&lt;ul&gt;
&lt;li&gt;延迟&lt;/li&gt;
&lt;li&gt;同步出错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打散大批量更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大批量更新凌晨操作，避开高峰&lt;/li&gt;
&lt;li&gt;凌晨不限制，白天上限默认为100条/秒(特殊再议)&lt;/li&gt;
&lt;li&gt;举例：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SQL类军规小结
&lt;ul&gt;
&lt;li&gt;SQL语句尽可能简单&lt;/li&gt;
&lt;li&gt;保持事务(连接)短小&lt;/li&gt;
&lt;li&gt;尽可能避免使用SP/TRIG/FUNC&lt;/li&gt;
&lt;li&gt;尽量不用 SELECT *&lt;/li&gt;
&lt;li&gt;改写OR语句&lt;/li&gt;
&lt;li&gt;避免负向查询和% 前缀模糊查询&lt;/li&gt;
&lt;li&gt;减少COUNT(*)&lt;/li&gt;
&lt;li&gt;LIMIT的高效分页&lt;/li&gt;
&lt;li&gt;用UNION ALL 而非 UNION&lt;/li&gt;
&lt;li&gt;分解联接保证高并发&lt;/li&gt;
&lt;li&gt;GROUP BY 去除排序&lt;/li&gt;
&lt;li&gt;同数据类型的列值比较&lt;/li&gt;
&lt;li&gt;Load data导数据&lt;/li&gt;
&lt;li&gt;打散大批量更新&lt;/li&gt;
&lt;li&gt;Know Every SQL!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;约定类军规&#34;&gt;约定类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;隔离线上线下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建数据库的生态环境
&lt;ul&gt;
&lt;li&gt;开发无线上库操作权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原则:线上连线上，线下连线下
&lt;ul&gt;
&lt;li&gt;实时数据用real库&lt;/li&gt;
&lt;li&gt;模拟环境用sim库&lt;/li&gt;
&lt;li&gt;测试用qa库&lt;/li&gt;
&lt;li&gt;开发用dev库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁止未经DBA确认的子查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL子查询
&lt;ul&gt;
&lt;li&gt;大部分情况优化较差&lt;/li&gt;
&lt;li&gt;特别WHERE中使用IN id的子查询&lt;/li&gt;
&lt;li&gt;一般可用JOIN改写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;永远不在程序端显式加锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;永远不在程序端对数据库显式加锁
&lt;ul&gt;
&lt;li&gt;外部锁对数据库不可控&lt;/li&gt;
&lt;li&gt;高并发时是灾难&lt;/li&gt;
&lt;li&gt;极难调试和排查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并发扣款等一致性问题
&lt;ul&gt;
&lt;li&gt;采用事务&lt;/li&gt;
&lt;li&gt;相对值修改&lt;/li&gt;
&lt;li&gt;Commit前二次较验冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一字符集为UTF8&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集:&lt;/li&gt;
&lt;li&gt;MySQL 4.1 以前叧有latin1&lt;/li&gt;
&lt;li&gt;为多语言支持增加多字符集&lt;/li&gt;
&lt;li&gt;也带来了N多问题&lt;/li&gt;
&lt;li&gt;保持简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一命名规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;库表等名称统一用小写
&lt;ul&gt;
&lt;li&gt;Linux VS Windows&lt;/li&gt;
&lt;li&gt;MySQL库表大小写敏感&lt;/li&gt;
&lt;li&gt;字段名的大小写不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引命名默认为“idx_字段名”&lt;/li&gt;
&lt;li&gt;库名用缩写，尽量在2~7个字母
&lt;ul&gt;
&lt;li&gt;DataSharing ==&amp;gt; ds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意避免用保留字命名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;约定类军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离线上线下&lt;/li&gt;
&lt;li&gt;禁止未经DBA确认的子查询上线&lt;/li&gt;
&lt;li&gt;永远不在程序端显式加锁&lt;/li&gt;
&lt;li&gt;统一字符集为UTF8&lt;/li&gt;
&lt;li&gt;统一命名规范&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>HIVE 调优—— hive.fetch.task.conversion</title>
      <link>https://liupengkun1993.github.io/post/bigdata/hive-%E8%B0%83%E4%BC%98-hive.fetch.task.conversion/</link>
      <pubDate>Sun, 20 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/hive-%E8%B0%83%E4%BC%98-hive.fetch.task.conversion/</guid>
      
        <description>&lt;p&gt;Fetch 抓取是指，Hive 中对某些情况的查询可以不必使用 MapReduce 计算。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;启用 MapReduce Job 是会消耗系统开销的。对于这个问题，从 Hive0.10.0 版本开始，对于简单的不需要聚合的类似 &lt;code&gt;select &amp;lt;col&amp;gt; from &amp;lt;table&amp;gt; limit n&lt;/code&gt;语句，不需要起 MapReduce job，直接通过 Fetch task 获取数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如：&lt;code&gt;select * from user_table;&lt;/code&gt;在这种情况下，Hive 可以简单地读取 user_table 对应的存储目录下的文件，然后输出查询结果到控制台。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;hive-default.xml.template&lt;/code&gt; 文件中&lt;code&gt;hive.fetch.task.conversion&lt;/code&gt;默认是 more，老版本 hive 默认是 minimal，该属性修改为 more 以后，在全局查找、字段查找、limit 查找等都不走 MapReduce。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;hive.fetch.task.conversion&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;more&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      Expects one of [none, minimal, more].
      Some select queries can be converted to single FETCH task minimizing latency.
      Currently the query should be single sourced not having any subquery and should not have
      any aggregations or distincts (which incurs RS), lateral views and joins.
      &lt;span class=&#34;k&#34;&gt;0.&lt;/span&gt; none : disable hive.fetch.task.conversion
      &lt;span class=&#34;k&#34;&gt;1.&lt;/span&gt; minimal : SELECT STAR, FILTER on partition columns, LIMIT only
      &lt;span class=&#34;k&#34;&gt;2.&lt;/span&gt; more  : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1）把hive.fetch.task.conversion设置成none，然后执行查询语句，都会执行mapreduce程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;conversion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;taken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;203&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fetched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2）把hive.fetch.task.conversion设置成more，然后执行查询语句，如下查询方式都不会执行mapreduce程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;conversion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;more&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;taken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;09&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fetched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Java 实现 RSA 加密解密</title>
      <link>https://liupengkun1993.github.io/post/bigdata/java-%E5%AE%9E%E7%8E%B0-rsa-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/java-%E5%AE%9E%E7%8E%B0-rsa-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</guid>
      
        <description>&lt;p&gt;RSA 加密在编程中很常见，iOS 安卓要用，Java 也要用，最近因为大数据的项目要用到，就写了一份，这里备份一下，也希望能帮到要用的朋友们。&lt;/p&gt;
&lt;p&gt;以下是整体代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;98
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.commons.codec.binary.Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.crypto.Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.interfaces.RSAPublicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.spec.PKCS8EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.spec.X509EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Hello RSA!
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSAUtils&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//生成公钥和私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;getKeyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//加密字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;liupengkun&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;随机生成的公钥为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;随机生成的私钥为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwordEn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\t加密后的字符串为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordEn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwordDe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordEn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;还原后的字符串为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordDe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 随机生成密钥对
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws NoSuchAlgorithmException
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getKeyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//KeyPairGenerator类用于生成公钥和密钥对，基于RSA算法生成对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;KeyPairGenerator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPairGen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyPairGenerator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//初始化密钥对生成器，密钥大小为96-1024位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;keyPairGen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//生成一个密钥对，保存在keyPair中
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;KeyPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPair&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPairGen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generateKeyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;PrivateKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPrivate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//得到私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;PublicKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPublic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//得到公钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//得到公钥字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;publicKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEncoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//得到私钥字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privateKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEncoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//将公钥和私钥保存到Map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publicKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//0表示公钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privateKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//1表示私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * RSA公钥加密
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param str
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            加密字符串
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param publicKey
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            公钥
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @return 密文
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws Exception
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *             加密过程中的异常信息
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//base64编码的公钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;RSAPublicKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RSAPublicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generatePublic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//RAS加密
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ENCRYPT_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encodeBase64String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doFinal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * RSA私钥解密
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param str
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            加密字符串
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param privateKey
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            私钥
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @return 铭文
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws Exception
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *             解密过程中的异常信息
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Base64解码加密后的字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Base64编码的私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;PrivateKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generatePrivate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKCS8EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//RSA解密
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DECRYPT_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doFinal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputByte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在程序中，我们首先利用 &lt;code&gt;getKeyPair()&lt;/code&gt; 函数生成公钥和私钥并将其保存到 Map 集合中。然后，基于产生的公钥对明文进行加密。针对已经已经加密的密文，我们再次使用私钥解密，得到明文。
上述程序的输出结果为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;随机生成的公钥为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QkIaMuogm99lcRjV1xT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AuTHlgIT65svpG8MrPnfjApnkQAdT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VwubdU9ULwVthc6GLuXORxakN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Odd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jd8WY2IJMVttkYR1mhAZQkx9AU2frNbq97gS9menvL7pQk2ji42Sl1gcZ7tY5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XXGN7EYS52&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JGdgfuxGoWNMQwIDAQAB&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;随机生成的私钥为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKz5CQhoy6iCb32VxGNXXFP4C5MeWAhPrmy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kbwys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MCmeRAB1P75XC5t1T1QvBW2FzoYu5c5HFqQ385137&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N3xZjYgkxW22RhHWaEBlCTH0BTZ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1ur3uBL2Z6e8vulCTaOLjZKXWBxnu1jn5dcY3sRhLnb4kZ2B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;7EahY0xDAgMBAAECgYAMAD9LMRIoP9yCZxi4F8CVJtmOvIU5FmYwr0wnNZFb11p6GLv5GClzCFEK2SnG2nhS7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yzPJ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HxmIDUW&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wCqJjXtoMwBicELk43pNW0QAHAlSytIm13jPsEhNvauDwBpUGqATISwv9DjEf6O1BxrgR5nKpiIpR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QWYlrg8phXOQJBANPhkA6g2Hlvr93BVnhUeSfrTtbwPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rEIgmEMb6nvnEyOT2sVqr6mw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs1Byrw0p6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rAESxrwO5Mp2O5tv8B20CQQDQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XGncq8dBZ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MW2V6eYT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AtvNX&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//hKGYAz2qPMMR+W4kXb+YiH6SWnTH2f4JkY43BRxt3MlsDxv0nudwAG+RvAkB7+dC77nub2rER1U3OTMczh2jzNVBlBsr+jx9j/kNFLFLMPliaEFuziJ3pdiS1KS4xCKK4jyszx4qJTJNihr6lAkEAz60bFN/FHhzpaEumcudw/g4PKG4eUzuW6XU0GejHSh1iBPVAhmZVYwoAjUg2ZdX8FrW3mGJkyUMjbCeodD9DZwJAdBgcQC+8tzkzwct45EmAQWFMNHLvq3TKdDxr+QluIER1SKjjae8ob+JyI89S8AFJE8IobraVtJ4wTfAt0ZIIMw==
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;liupengkun&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;加密后的字符串为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EUz2Goo0m5mNk0al87dsrcqIuzIzNAEvzTBJOXUOiujubJgqVPmsM880aahLbKrNjl5ArJPtguznJ9PruwSBUnGoPpAMetHp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;23RBkXB2DwAA200qejLyKt1PkeTLJjDrQVhohlsF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K48TaGpTSfDMoPli3E6eTdS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dk1Xib4SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;还原后的字符串为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;liupengkun&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>MaxCompute 自定义 Java UDF</title>
      <link>https://liupengkun1993.github.io/post/bigdata/maxcompute-%E8%87%AA%E5%AE%9A%E4%B9%89-java-udf/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/maxcompute-%E8%87%AA%E5%AE%9A%E4%B9%89-java-udf/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;公司大数据开发使用的是阿里云的 MaxCompute，MaxCompute 自身提供了很多 Hive SQL 函数，能够满足大部分需求，但是总有一些 Hive SQL 函数无法满足的需求，比如 base64 编解码等等，目前 MaxCompute 内部是没有相关函数的。解决办法是用户自定义函数，MaxCompute 提供了相关的文档，具体可以看 &lt;a href=&#34;https://help.aliyun.com/document_detail/27866.html?spm=a2c4g.11186623.6.722.79fd612dqYS0p2&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇文章主要记录使用 Java 来自定义函数。&lt;/p&gt;
&lt;h2 id=&#34;1-idea-里新建项目&#34;&gt;1. IDEA 里新建项目&lt;/h2&gt;
&lt;p&gt;在 IDEA 里新建一个项目，并创建一个 class 文件，命名为 data_mask。&lt;/p&gt;
&lt;h2 id=&#34;2-添加-odps-依赖&#34;&gt;2. 添加 odps 依赖&lt;/h2&gt;
&lt;p&gt;在 pom 文件添加 odps 依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;aliyun&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;odps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;odps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sdk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;udf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3-编写代码&#34;&gt;3. 编写代码&lt;/h2&gt;
&lt;p&gt;在类文件里编写代码（data_mask 要继承自 阿里云的 UDF）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.data_mask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 阿里云 UDF
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.aliyun.odps.udf.UDF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;data_mask&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UDF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

     &lt;span class=&#34;c1&#34;&gt;// 创建 evaluate 方法，与 HIVE 一样，MaxCompute 的 UDF 通常使用 evaluate 方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;UDF&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;4导出-jar-包&#34;&gt;4.导出 JAR 包&lt;/h2&gt;
&lt;p&gt;此时 Java UDF 函数已自定义完毕，接着需要在 MaxCompute 的资源函数里添加 JAR 包。&lt;/p&gt;
&lt;h2 id=&#34;5-新建资源&#34;&gt;5. 新建资源&lt;/h2&gt;
&lt;p&gt;在 MaxCompute 里新建资源，并把刚刚导出的 JAR 包导入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-注册函数&#34;&gt;6. 注册函数&lt;/h2&gt;
&lt;p&gt;在 MaxCompute 里注册函数，类名里面填写 package 以及类名，资源列表里填写刚刚导入的 JAR 包名称。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7提交发布&#34;&gt;7.提交发布&lt;/h2&gt;
&lt;p&gt;将刚刚创建的资源和函数都提交，并发布。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发布成功之后就可以直接调用了，直接根据定义的函数名称调用即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/27867.html?spm=a2c4g.11186623.6.723.1ccd612dbrlNl7&#34;&gt;Java UDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/101960.html?spm=a2c4g.11186623.6.732.293f34d8YKI6IT&#34;&gt;JSON字符串获取示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>数据仓库建模——维度建模</title>
      <link>https://liupengkun1993.github.io/post/bigdata/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;数据仓库的建模方法有很多种，常见的有维度建模法、范式建模法、实体建模法等，下面主要介绍一下维度建模法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;维度建模的基本概念&#34;&gt;维度建模的基本概念&lt;/h2&gt;
&lt;p&gt;维度建模(dimensional modeling)是专门用于分析型数据库、数据仓库、数据集市建模的方法。它本身属于一种关系建模方法，但和关系建模方法相比增加了两个概念：&lt;/p&gt;
&lt;h3 id=&#34;维度表dimension&#34;&gt;维度表(dimension)&lt;/h3&gt;
&lt;p&gt;表示对分析主题所属类型的描述。比如&amp;quot;昨天下午郑州外国语学校8年级3班王小明同学花费了99元购买了一套课程&amp;quot;。那么我们以购买为主题进行分析，可从这段信息中提取三个维度：时间维度(昨天下午)，地点维度(郑州外国语学校), 商品维度(课程)。通常来说维度表信息比较固定，且数据量小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维度表类型
&lt;ul&gt;
&lt;li&gt;日期维
&lt;ul&gt;
&lt;li&gt;数据仓库必须有的维度，包含日期，日期所属的周，月，季度，年等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;角色维
&lt;ul&gt;
&lt;li&gt;相同的维度表在维度模型中扮演不中的逻辑角色，一般通过创建视图来表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支架维
&lt;ul&gt;
&lt;li&gt;如果维度之间是一对多的关系或区别于原维度的多个描述性维度属性，可以建雪花型支架维度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多值维度桥接维
&lt;ul&gt;
&lt;li&gt;如果二个维度表是多对多的关系，可以使用多值维度设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;微型维
&lt;ul&gt;
&lt;li&gt;一个大型维有些属性变化比较频繁，把这些属性单独生成一个微型维度表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缩小维
&lt;ul&gt;
&lt;li&gt;维度表的一个子集或部分属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;层次维
&lt;ul&gt;
&lt;li&gt;有些维度表是有层次结构的，可以通过视图生成树形结构的维度表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事实表fact-table&#34;&gt;事实表(fact table)&lt;/h3&gt;
&lt;p&gt;表示对分析主题的度量。比如上面那个例子中，99元就是事实信息。事实表包含了与各维度表相关联的外码，并通过 JOIN 方式与维度表关联。事实表的度量通常是数值类型，且记录数会不断增加，表规模迅速增长。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事实表类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务事实表
&lt;ul&gt;
&lt;li&gt;它是面向事务的，其粒度是每一行对应一个事务，它是最细粒度的事实表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;周期快照事实表
&lt;ul&gt;
&lt;li&gt;它是按照良好的时间周期间隔(每天，每月)来捕捉业务活动的执行情况，一旦装入事实表就不会再去更新，它是事务事实表的补充，而非替代品。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;累积快照事实表
&lt;ul&gt;
&lt;li&gt;它用于描述业务过程中某个不确定时间跨度里的活动，它随着业务活动的发生会不断的更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三种事实表类型之间的区别：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;事务事实表&lt;/th&gt;
&lt;th&gt;周期快照事实表&lt;/th&gt;
&lt;th&gt;累积快照事实表&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;代表的时间段&lt;/td&gt;
&lt;td&gt;时间点&lt;/td&gt;
&lt;td&gt;规律可预见间隔&lt;/td&gt;
&lt;td&gt;不确定时间跨度，一般是短期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;粒度&lt;/td&gt;
&lt;td&gt;每个事件事务一行&lt;/td&gt;
&lt;td&gt;每段时间一行&lt;/td&gt;
&lt;td&gt;每个生命周期一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事实表加载&lt;/td&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;td&gt;插入与更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事实表更新&lt;/td&gt;
&lt;td&gt;不重新加载&lt;/td&gt;
&lt;td&gt;不重新加载&lt;/td&gt;
&lt;td&gt;重新加载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日期维度&lt;/td&gt;
&lt;td&gt;事务日期&lt;/td&gt;
&lt;td&gt;时间段终止日期&lt;/td&gt;
&lt;td&gt;标准关键环节的多个日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事实&lt;/td&gt;
&lt;td&gt;事务活动&lt;/td&gt;
&lt;td&gt;预定时间间隔的性能&lt;/td&gt;
&lt;td&gt;给定生命周期的性能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;维度建模优点&#34;&gt;维度建模优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;便于理解&lt;/li&gt;
&lt;li&gt;提高查询性能&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;维度建模的三种模式&#34;&gt;维度建模的三种模式&lt;/h2&gt;
&lt;h3 id=&#34;星形模式&#34;&gt;星形模式&lt;/h3&gt;
&lt;p&gt;星形模式(Star Schema)是最常用的维度建模方式，下图展示了使用星形模式进行维度建模的关系结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/model/model01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出，星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维表只和事实表关联，维表之间没有关联；&lt;/li&gt;
&lt;li&gt;每个维表的主码为单列，且该主码放置在事实表中，作为两边连接的外码；&lt;/li&gt;
&lt;li&gt;以事实表为核心，维表围绕核心呈星形分布；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;雪花模式&#34;&gt;雪花模式&lt;/h3&gt;
&lt;p&gt;雪花模式(Snowflake Schema)是对星形模式的扩展，每个维表可继续向外连接多个子维表。下图为使用雪花模式进行维度建模的关系结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/model/model02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;星形模式中的维表相对雪花模式来说要大，而且不满足规范化设计。雪花模型相当于将星形模式的大维表拆分成小维表，满足了规范化设计。然而这种模式在实际应用中很少见，因为这样做会导致开发难度增大，而数据冗余问题在数据仓库里并不严重。&lt;/p&gt;
&lt;h3 id=&#34;星座模式&#34;&gt;星座模式&lt;/h3&gt;
&lt;p&gt;星座模式(Fact Constellations Schema)也是星型模式的扩展。基于这种思想就有了星座模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/model/model03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅谈 Hive 性能优化</title>
      <link>https://liupengkun1993.github.io/post/bigdata/%E6%B5%85%E8%B0%88-hive-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/%E6%B5%85%E8%B0%88-hive-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;总结了 Hive 的常用优化手段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;列裁剪及分区裁剪&#34;&gt;列裁剪及分区裁剪&lt;/h3&gt;
&lt;p&gt;这是最基本的操作。所谓列裁剪就是在查询时只读取需要的列，分区裁剪就是只读取需要的分区。&lt;/p&gt;
&lt;p&gt;比如当列很多或者数据量很大时，如果使用 &lt;code&gt;select * from order_table;&lt;/code&gt; 或者不指定分区，全列扫描和全表扫描效率都很低。&lt;/p&gt;
&lt;p&gt;这个时候我们可以指定列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或者当这个表是分区表的时候，指定分区：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Hive 中与列裁剪优化相关的配置项是&lt;code&gt;hive.optimize.cp&lt;/code&gt;，与分区裁剪优化相关的则是&lt;code&gt;hive.optimize.pruner&lt;/code&gt;，默认都是true。&lt;/p&gt;
&lt;h3 id=&#34;谓词下推&#34;&gt;谓词下推&lt;/h3&gt;
&lt;p&gt;在关系型数据库如 MySQL 中，也有谓词下推（Predicate Pushdown，PPD）的概念。就是将 SQL 语句中的 where 谓词逻辑都尽可能提前执行，减少下游处理的数据量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对 order_table 做过滤的 where 语句写在子查询内部，而不是外部。Hive 中有谓词下推优化的配置项&lt;code&gt;hive.optimize.ppd&lt;/code&gt;，默认值true，与它对应的逻辑优化器是 PredicatePushDown。该优化器就是将 OperatorTree 中的 FilterOperator 向上提。&lt;/p&gt;
&lt;h3 id=&#34;sort-by-代替-order-by&#34;&gt;sort by 代替 order by&lt;/h3&gt;
&lt;p&gt;HiveSQL 中的 order by 与其他 SQL 方言中的功能一样，就是将结果按某字段全局排序，这会导致所有 map 端数据都进入一个 reducer 中，在数据量大时可能会长时间计算不完。&lt;/p&gt;
&lt;p&gt;如果使用 sort by，那么还是会视情况启动多个 reducer 进行排序，并且保证每个 reducer 内局部有序。为了控制 map 端数据分配到 reducer 的 key，往往还要配合 distribute by 一同使用。如果不加 distribute by 的话，map 端数据就会随机分配到 reducer。&lt;/p&gt;
&lt;p&gt;举个例子，假如要以 uid 为 key，以订单时间倒序、订单金额倒序输出记录数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;distribute&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;order_time&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;group-by-代替-distinct&#34;&gt;group by 代替 distinct&lt;/h3&gt;
&lt;p&gt;数据量较大的情况下，慎用count(distinct)，count(distinct)容易产生倾斜问题&lt;/p&gt;
&lt;p&gt;当要统计某一列的去重数时，如果数据量很大，count(distinct) 就会非常慢，原因与 order by 类似，count(distinct) 逻辑只会有很少的 reducer 来处理。这时可以用 group by 来改写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是这样写会启动两个 MR job（单纯 distinct 只会启动一个），所以要确保数据量大到启动 job 的 overhead 远小于计算耗时，才考虑这种方法。当数据集很小或者 key 的倾斜比较明显时，group by 还可能会比 distinct 慢。&lt;/p&gt;
&lt;h3 id=&#34;group-by-配置调整&#34;&gt;group by 配置调整&lt;/h3&gt;
&lt;h4 id=&#34;map-端预聚合&#34;&gt;map 端预聚合&lt;/h4&gt;
&lt;p&gt;group by 时，如果先起一个 combiner 在 map 端做部分预聚合，可以有效减少 shuffle 数据量。预聚合的配置项是 &lt;code&gt;hive.map.aggr&lt;/code&gt;，默认值 true，对应的优化器为 GroupByOptimizer，简单方便。
通过 &lt;code&gt;hive.groupby.mapaggr.checkinterval&lt;/code&gt; 参数也可以设置 map 端预聚合的行数阈值，超过该值就会分拆 job，默认值 100000。&lt;/p&gt;
&lt;h4 id=&#34;倾斜均衡配置项&#34;&gt;倾斜均衡配置项&lt;/h4&gt;
&lt;p&gt;group by 时如果某些 key 对应的数据量过大，就会发生数据倾斜。Hive 自带了一个均衡数据倾斜的配置项&lt;code&gt;hive.groupby.skewindata&lt;/code&gt;，默认值false。
其实现方法是在 group by 时启动两个 MR job。第一个 job 会将 map 端数据随机输入 reducer，每个 reducer 做部分聚合，相同的 key 就会分布在不同的 reducer 中。第二个 job 再将前面预处理过的数据按 key 聚合并输出结果，这样就起到了均衡的效果。&lt;/p&gt;
&lt;h3 id=&#34;join-基础优化&#34;&gt;join 基础优化&lt;/h3&gt;
&lt;h4 id=&#34;build-table小表前置&#34;&gt;build table（小表）前置&lt;/h4&gt;
&lt;p&gt;在最常见的 hash join 方法中，一般总有一张相对小的表和一张相对大的表，小表叫 build table，大表叫 probe table。&lt;/p&gt;
&lt;p&gt;Hive 在解析带 join 的 SQL 语句时，会默认将最后一个表作为 probe table，将前面的表作为 build table 并试图将它们读进内存。如果表顺序写反，probe table 在前面，引发 OOM 的风险就高了。&lt;/p&gt;
&lt;p&gt;在维度建模数据仓库中，事实表就是 probe table，维度表就是 build table。&lt;/p&gt;
&lt;h4 id=&#34;多表-join-时-key-相同&#34;&gt;多表 join 时 key 相同&lt;/h4&gt;
&lt;p&gt;这种情况会将多个 join 合并为一个 MR job 来处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parent_table&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;  
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果上面两个 join 的条件不相同，比如改成 &lt;code&gt;a.uid = c.uid&lt;/code&gt;，就会拆成两个 MR job 计算。
负责这个的是相关性优化器 CorrelationOptimizer，它的功能除此之外还非常多，逻辑复杂，可以参考 &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/Correlation+Optimizer&#34;&gt;Hive官方的文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;利用-map-join-特性&#34;&gt;利用 map join 特性&lt;/h4&gt;
&lt;p&gt;map join 特别适合大小表 join 的情况。Hive 会将 build table 和 probe table 在 map 端直接完成 join 过程，消灭了 reduce，效率很高。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*+ mapjoin(a) */&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;优化-sql-处理-join-数据倾斜&#34;&gt;优化 SQL 处理 join 数据倾斜&lt;/h3&gt;
&lt;h4 id=&#34;空值或无意义值&#34;&gt;空值或无意义值&lt;/h4&gt;
&lt;p&gt;空值或无意义值很常见，比如日志类型的数据，要统计每天的活跃手机号，但是总有一些日志数据没有收集到手机号，或为空、为 NULL 等，这个时候就需要提前将这些无意义的数据过滤掉，避免消耗。&lt;/p&gt;
&lt;h4 id=&#34;build-table-过大&#34;&gt;build table 过大&lt;/h4&gt;
&lt;p&gt;有时，build table 会大到无法直接使用 map join 的地步，比如全量用户维度表，而使用普通 join 又有数据分布不均的问题。这时就要充分利用 probe table 的限制条件，削减 build table 的数据量，再使用 map join 解决。代价就是需要进行两次 join。举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*+ mapjoin(aa) */&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*+ mapjoin(a) */&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aa&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200902&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;mapreduce-优化&#34;&gt;MapReduce 优化&lt;/h3&gt;
&lt;h4 id=&#34;调整-mapper-数&#34;&gt;调整 mapper 数&lt;/h4&gt;
&lt;p&gt;mapper 数量与输入文件的 split 数息息相关，在 Hadoop 源码&lt;code&gt;org.apache.hadoop.mapreduce.lib.input.FileInputFormat&lt;/code&gt; 类中可以看到 split 划分的具体逻辑。&lt;/p&gt;
&lt;p&gt;可以直接通过参数 &lt;code&gt;mapred.map.tasks（默认值2）&lt;/code&gt;来设定 mapper 数的期望值，但它不一定会生效，下面会提到。
设输入文件的总大小为 total_input_size。HDFS 中，一个块的大小由参数 dfs.block.size 指定，默认值 64MB 或 128MB。在默认情况下，mapper数就是：
&lt;code&gt;default_mapper_num = total_input_size / dfs.block.size&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;mapred.min.split.size（默认值1B）&lt;/code&gt;和&lt;code&gt;mapred.max.split.size（默认值64MB）&lt;/code&gt;分别用来指定 split 的最小和最大大小。split 大小和 split 数计算规则是：
&lt;code&gt;split_size = MAX(mapred.min.split.size, MIN(mapred.max.split.size, dfs.block.size))&lt;/code&gt;；
&lt;code&gt;split_num = total_input_size / split_size&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;得出 mapper 数：
&lt;code&gt;mapper_num = MIN(split_num, MAX(default_num, mapred.map.tasks))&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可见，如果想减少 mapper 数，就适当调高 mapred.min.split.size，split 数就减少了。如果想增大 mapper 数，除了降低 mapred.min.split.size 之外，也可以调高 mapred.map.tasks。&lt;/p&gt;
&lt;p&gt;一般来讲，如果输入文件是少量大文件，就减少 mapper 数；如果输入文件是大量非小文件，就增大 mapper 数；至于大量小文件的情况，得参考下面“合并小文件”一节的方法处理。&lt;/p&gt;
&lt;h4 id=&#34;调整-reducer-数&#34;&gt;调整 reducer 数&lt;/h4&gt;
&lt;p&gt;reducer 数量的确定方法比 mapper 简单得多。使用参数&lt;code&gt;mapred.reduce.tasks&lt;/code&gt;可以直接设定 reducer 数量，不像 mapper 一样是期望值。但如果不设这个参数的话，Hive 就会自行推测，逻辑如下：&lt;/p&gt;
&lt;p&gt;参数&lt;code&gt;hive.exec.reducers.bytes.per.reducer&lt;/code&gt;用来设定每个 reducer 能够处理的最大数据量，默认值 1G（1.2版本之前）或 256M（1.2版本之后）。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;hive.exec.reducers.max&lt;/code&gt; 用来设定每个 job 的最大 reducer 数量，默认值 999（1.2版本之前）或 1009（1.2版本之后）。&lt;/p&gt;
&lt;p&gt;得出 reducer 数：
&lt;code&gt;reducer_num = MIN(total_input_size / reducers.bytes.per.reducer, reducers.max)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;reducer 数量与输出文件的数量相关。如果 reducer 数太多，会产生大量小文件，对 HDFS 造成压力。如果 reducer 数太少，每个 reducer 要处理很多数据，容易拖慢运行时间或者造成 OOM。&lt;/p&gt;
&lt;h4 id=&#34;合并小文件&#34;&gt;合并小文件&lt;/h4&gt;
&lt;h5 id=&#34;输入阶段合并&#34;&gt;输入阶段合并&lt;/h5&gt;
&lt;p&gt;需要更改 Hive 的输入文件格式，即参数&lt;code&gt;hive.input.format&lt;/code&gt;，默认值是&lt;code&gt;org.apache.hadoop.hive.ql.io.HiveInputFormat&lt;/code&gt;，我们改成&lt;code&gt;org.apache.hadoop.hive.ql.io.CombineHiveInputFormat&lt;/code&gt;。这样比起上面调整 mapper 数时，又会多出两个参数，分别是&lt;code&gt;mapred.min.split.size.per.node&lt;/code&gt;和&lt;code&gt;mapred.min.split.size.per.rack&lt;/code&gt;，含义是单节点和单机架上的最小 split 大小。如果发现有 split 大小小于这两个值（默认都是 100MB），则会进行合并。具体逻辑可以参看 Hive 源码中的对应类。&lt;/p&gt;
&lt;h5 id=&#34;输出阶段合并&#34;&gt;输出阶段合并&lt;/h5&gt;
&lt;p&gt;直接将 &lt;code&gt;hive.merge.mapfiles&lt;/code&gt; 和 &lt;code&gt;hive.merge.mapredfiles&lt;/code&gt; 都设为 true 即可，前者表示将 map-only 任务的输出合并，后者表示将 map-reduce 任务的输出合并。另外，&lt;code&gt;hive.merge.size.per.task&lt;/code&gt; 可以指定每个task输出后合并文件大小的期望值，&lt;code&gt;hive.merge.size.smallfiles.avgsize&lt;/code&gt; 可以指定所有输出文件大小的均值阈值，默认值都是 1GB。如果平均大小不足的话，就会另外启动一个任务来进行合并。&lt;/p&gt;
&lt;h4 id=&#34;启用压缩&#34;&gt;启用压缩&lt;/h4&gt;
&lt;p&gt;压缩 job 的中间结果数据和输出数据，可以用少量 CPU 时间节省很多空间。压缩方式一般选择 Snappy，效率最高。&lt;/p&gt;
&lt;p&gt;要启用中间压缩，需要设定&lt;code&gt;hive.exec.compress.intermediate&lt;/code&gt; 为 true，同时指定压缩方式&lt;code&gt;hive.intermediate.compression.codec&lt;/code&gt; 为&lt;code&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/code&gt;。另外，参数&lt;code&gt;hive.intermediate.compression.type&lt;/code&gt; 可以选择对块（BLOCK）还是记录（RECORD）压缩，BLOCK的压缩率比较高。
输出压缩的配置基本相同，打开&lt;code&gt;hive.exec.compress.output&lt;/code&gt;即可。&lt;/p&gt;
&lt;h4 id=&#34;jvm-重用&#34;&gt;JVM 重用&lt;/h4&gt;
&lt;p&gt;在 MR job 中，默认是每执行一个 task 就启动一个 JVM。如果 task 非常小而碎，那么 JVM 启动和关闭的耗时就会很长。可以通过调节参数&lt;code&gt;mapred.job.reuse.jvm.num.tasks&lt;/code&gt;来重用。例如将这个参数设成 5，那么就代表同一个 MR job 中顺序执行的 5 个 task 可以重复使用一个 JVM，减少启动和关闭的开销。但它对不同 MR job 中的 task 无效。&lt;/p&gt;
&lt;h3 id=&#34;并行执行与本地模式&#34;&gt;并行执行与本地模式&lt;/h3&gt;
&lt;h4 id=&#34;并行执行&#34;&gt;并行执行&lt;/h4&gt;
&lt;p&gt;Hive 中互相没有依赖关系的 job 间是可以并行执行的，最典型的就是多个子查询 union all。在集群资源相对充足的情况下，可以开启并行执行，即将参数hive.exec.parallel设为true。另外hive.exec.parallel.thread.number可以设定并行执行的线程数，默认为8，一般都够用。&lt;/p&gt;
&lt;h4 id=&#34;本地模式&#34;&gt;本地模式&lt;/h4&gt;
&lt;p&gt;Hive 也可以不将任务提交到集群进行运算，而是直接在一台节点上处理。因为消除了提交到集群的 overhead，所以比较适合数据量很小，且逻辑不复杂的任务。
设置 &lt;code&gt;hive.exec.mode.local.auto&lt;/code&gt; 为 true 可以开启本地模式。但任务的输入数据总量必须小于 &lt;code&gt;hive.exec.mode.local.auto.inputbytes.max（默认值128MB）&lt;/code&gt; ，且 mapper 数必须小于 &lt;code&gt;hive.exec.mode.local.auto.tasks.max（默认值4）&lt;/code&gt; ，reducer 数必须为 0 或 1，才会真正用本地模式执行。&lt;/p&gt;
&lt;h3 id=&#34;严格模式&#34;&gt;严格模式&lt;/h3&gt;
&lt;p&gt;所谓严格模式，就是强制不允许用户执行 3 种有风险的 HiveSQL 语句，一旦执行会直接失败。这 3 种语句是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询分区表时不限定分区列的语句；&lt;/li&gt;
&lt;li&gt;两表 join 产生了笛卡尔积的语句；&lt;/li&gt;
&lt;li&gt;用 order by 来排序但没有指定 limit 的语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要开启严格模式，需要将参数&lt;code&gt;hive.mapred.mode&lt;/code&gt;设为 strict。&lt;/p&gt;
&lt;h4 id=&#34;采用合适的存储格式&#34;&gt;采用合适的存储格式&lt;/h4&gt;
&lt;p&gt;在 HiveSQL 的 create table 语句中，可以使用 stored as &amp;hellip; 指定表的存储格式。Hive 表支持的存储格式有 TextFile、SequenceFile、RCFile、Avro、ORC、Parquet 等。&lt;/p&gt;
&lt;p&gt;存储格式一般需要根据业务进行选择，在我们的实操中，绝大多数表都采用 TextFile 与 Parquet 两种存储格式之一。&lt;/p&gt;
&lt;p&gt;TextFile 是最简单的存储格式，它是纯文本记录，也是 Hive 的默认格式。虽然它的磁盘开销比较大，查询效率也低，但它更多地是作为跳板来使用。RCFile、ORC、Parquet 等格式的表都不能由文件直接导入数据，必须由 TextFile 来做中转。&lt;/p&gt;
&lt;p&gt;Parquet 和 ORC 都是 Apache 旗下的开源列式存储格式。列式存储比起传统的行式存储更适合批量 OLAP 查询，并且也支持更好的压缩和编码。我们选择 Parquet 的原因主要是它支持 Impala 查询引擎，并且我们对 update、delete 和事务性操作需求很低。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>DataWorks 错误汇总</title>
      <link>https://liupengkun1993.github.io/post/bigdata/dataworks-%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 11 Aug 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/dataworks-%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;报错日志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;FAILED: ODPS-0420095: Access Denied - Authorization Failed [4093], You have NO privilege to do the restricted operation on  {acs:odps:*:projects/***}. Access Mode is AllDenied.  Context ID:afd84055-ef3c-4d8c-86ee-ff3695c15a34.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;报错原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线上脚本报以上错误，大多是欠费的原因，续费就好了，注意已报错的脚本需要重跑一下。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;报错日志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;2020-05-28 01:49:01.597 [job-156364196] ERROR RetryUtil - Exception when calling callable, 即将尝试执行第1次重试,共计重试9次.本次重试计划等待[1,000]ms,实际等待[1,000]ms, 异常Msg:[Code:[MYSQLErrCode-02], Description:[数据库服务的IP地址或者Port错误，请检查填写的IP地址和Port或者联系DBA确认IP地址和Port是否正确。如果是同步中心用户请联系DBA确认idb上录入的IP和PORT信息和数据库的当前实际信息是一致的].  - 具体错误信息为：Communications link failure
The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. - com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
    at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)
    at com.mysql.jdbc.MysqlIO.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(MysqlIO.java:342)
    at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2188)
    at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
    at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
    at com.mysql.jdbc.ConnectionImpl.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(ConnectionImpl.java:776)
    at com.mysql.jdbc.JDBC4Connection.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(JDBC4Connection.java:47)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
    at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
    at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
    at java.sql.DriverManager.getConnection(DriverManager.java:674)
    at java.sql.DriverManager.getConnection(DriverManager.java:217)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.connect(DBUtil.java:567)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.getMySQLConnection(DBUtil.java:460)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.connect(DBUtil.java:439)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.access$100(DBUtil.java:26)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil$3.call(DBUtil.java:378)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil$3.call(DBUtil.java:375)
    at com.alibaba.datax.common.util.RetryUtil$Retry.call(RetryUtil.java:163)
    at com.alibaba.datax.common.util.RetryUtil$Retry.doRetry(RetryUtil.java:111)
    at com.alibaba.datax.common.util.RetryUtil.executeWithRetry(RetryUtil.java:31)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.getConnection(DBUtil.java:375)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.getConnection(DBUtil.java:359)
    at com.alibaba.datax.plugin.rdbms.util.JdbcConnectionFactory.getConnecttion(JdbcConnectionFactory.java:29)
    at com.alibaba.datax.plugin.rdbms.writer.util.OriginalConfPretreatmentUtil.dealColumnConf(OriginalConfPretreatmentUtil.java:167)
    at com.alibaba.datax.plugin.rdbms.writer.util.OriginalConfPretreatmentUtil.dealColumnConf(OriginalConfPretreatmentUtil.java:250)
    at com.alibaba.datax.plugin.rdbms.writer.util.OriginalConfPretreatmentUtil.doPretreatment(OriginalConfPretreatmentUtil.java:43)
    at com.alibaba.datax.plugin.rdbms.writer.CommonRdbmsWriter$Job.init(CommonRdbmsWriter.java:68)
    at com.alibaba.datax.plugin.writer.mysqlwriter.MysqlWriter$Job.init(MysqlWriter.java:31)
    at com.alibaba.datax.core.job.JobContainer.initJobWriter(JobContainer.java:1064)
    at com.alibaba.datax.core.job.JobContainer.init(JobContainer.java:451)
    at com.alibaba.datax.core.job.JobContainer.start(JobContainer.java:210)
    at com.alibaba.datax.core.Engine.start(Engine.java:96)
    at com.alibaba.datax.core.Engine.entry(Engine.java:246)
    at com.alibaba.datax.core.Engine.main(Engine.java:279)
Caused by: java.net.ConnectException: Connection refused
    at java.net.PlainSocketImpl.socketConnect(Native Method)
    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
    at java.net.Socket.connect(Socket.java:643)
    at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:211)
    at com.mysql.jdbc.MysqlIO.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(MysqlIO.java:301)
    ... 37 more
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;报错原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/DataWorks/DataWorks-errors-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由上图可知，数据源有问题，链接 polardb 失败，导致无法导数据到 polardb，解决方法是，找运维连通数据源，然后重跑报错脚本。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;跨工作空间取数据时报权限问题（比如在 A 空间内，访问 B 空间的表）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案：主账号授权，授权链接：&lt;a href=&#34;https://help.aliyun.com/document_detail/27935.html?spm=a2c4g.11186623.6.927.da6a6847ZlA602&#34;&gt;https://help.aliyun.com/document_detail/27935.html?spm=a2c4g.11186623.6.927.da6a6847ZlA602&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有个解决方案，可以根据具体的表名、资源名，以 Package 的方式，将数据部分授权给其它工作空间。参考文档：&lt;a href=&#34;https://help.aliyun.com/document_detail/34603.html?spm=a2c4g.11186623.6.934.29d12eb6JDuE5y&#34;&gt;https://help.aliyun.com/document_detail/34603.html?spm=a2c4g.11186623.6.934.29d12eb6JDuE5y&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Maxcompute 访问 OSS 的权限问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在读取外部表的时候，报了这样的错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;FAILED: Generating job conf failed, gen jobconf failed: Failed to obtain external data information, error msg: build/release64/common/io/oss/oss_client.cpp(97): OSSRequestException: req_id: 5F110AC115158031331734EA, http status code: 403, error code: UnknownError, message: Access denied, please make sure the oss host and oss bucket is matched, and the bucket should be authorized to the odps project with correct role_arn
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个报错信息不是很清晰，试了很多方法还是没搞定，无奈问了阿里云技术人员，说报错403是因为找不到地址（又是权限问题，运维的同学又修改东西了）。&lt;/p&gt;
&lt;p&gt;接着我在新建外部表的时候，报了这样的错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;AccessDenied&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;The bucket you access does not belong to you.&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个就比较清晰了，解决方案见下文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/72777.html?spm=a2c4g.11186623.6.786.136e6d03xKJI2D&#34;&gt;https://help.aliyun.com/document_detail/72777.html?spm=a2c4g.11186623.6.786.136e6d03xKJI2D&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MaxCompute 设置某些表的只读权限给某些用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数仓里几个表里面存的是线上数据，需要控制其读写权限，目的是开发人员只能读，不能写，保证数据安全性。&lt;/p&gt;
&lt;p&gt;根据这个文档，可以给用户配置角色，&lt;a href=&#34;https://help.aliyun.com/document_detail/27934.html?spm=a2c4g.11186623.6.927.49d29d61tRALZe&#34;&gt;角色管理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根据这个文档，可以给某个角色设置为只读权限，&lt;a href=&#34;https://help.aliyun.com/document_detail/162576.html?spm=a2c4g.11186623.6.930.3cc31afdqENv14&#34;&gt;Policy和Download权限控制&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;总体脚本大概如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;-- 创建角色
create role access_deny_test_table_developers;
-- 给用户指派某种角色
grant access_deny_test_table_developers to liupengkun@septnet-x7.onaliyun.com;
-- 授权 MaxCompute 项目中 test11 表的只读权限给 access_deny_test_table_developers 角色。
grant Select on table test11 to role access_deny_test_table_developers privilegeproperties(&amp;#34;policy&amp;#34; = &amp;#34;true&amp;#34;, &amp;#34;allow&amp;#34;=&amp;#34;true&amp;#34;);

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注：需要项目所属者（Project Owner）或者拥有Super_Administrator角色的用户才可以执行。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MAPJOIN 在 Map 阶段会将指定表的数据全部加载在内存中。因此指定的表仅能为小表，且表被加载到内存后占用的总内存不得超过 640MB。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;报错信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;FAILED: ODPS-0010000:System internal error - fuxi job failed, caused by: CheckInputSize for Hash Join Cursor failed, reader id StreamLineRead4 : small table exceeds, memory limit(MB) 640, size in memory from meta 3842607683
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;解决方法 1：将 MAPJOIN 去掉。。&lt;/li&gt;
&lt;li&gt;解决方法 2：加一句 &lt;code&gt;set odps.sql.mapjoin.memory.max=2048;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果超过2048M，就应该需要改实现方式了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Canal 问题汇总</title>
      <link>https://liupengkun1993.github.io/post/bigdata/canal-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 05 Aug 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/canal-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      
        <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/canal&#34;&gt;canal&lt;/a&gt; 是阿里开源的 MySQL binlog 增量订阅&amp;amp;消费组件，基于 java 实现，整体已经在很多大型的互联网项目生产环境中使用，包括阿里、美团等都有广泛的应用，是一个非常成熟的数据库同步方案，基础的使用只需要进行简单的配置即可。&lt;/p&gt;
&lt;p&gt;canal 是通过模拟成为 mysql 的 slave 的方式，监听 mysql 的 binlog 日志来获取数据，binlog 设置为 row 模式以后，不仅能获取到执行的每一个增删改的脚本，同时还能获取到修改前和修改后的数据，基于这个特性，canal 就能高性能的获取到 mysql 数据数据的变更。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;canal 的部署主要分为 server 端和 client 端。
&lt;ul&gt;
&lt;li&gt;server 端部署好以后，可以直接监听 mysql binlog，因为 server 端是把自己模拟成了 mysql slave，所以，只能接受数据，没有进行任何逻辑的处理，具体的逻辑处理，需要 client 端进行处理。&lt;/li&gt;
&lt;li&gt;client 端一般是需要大家进行简单的开发。&lt;a href=&#34;https://github.com/alibaba/canal/wiki/ClientAPI&#34;&gt;官网文档&lt;/a&gt;有一个简单的示例，很容易理解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用中遇到的问题&#34;&gt;使用中遇到的问题&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;column-size-is-not-match-问题&#34;&gt;column size is not match 问题&lt;/h4&gt;
&lt;p&gt;见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/Canal/Canal-errors-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原因是 ddl 变更，导致列不匹配，报了 &lt;code&gt;column size is not match for table: xx , 12 vs 13&lt;/code&gt; 的错误。解决方案是，删除 &lt;code&gt;conf/实例名&lt;/code&gt; 目录下的 &lt;code&gt;h2.mv.db&lt;/code&gt; 文件，如果没有 &lt;code&gt;h2.mv.db&lt;/code&gt; 文件，删除 &lt;code&gt;meta.dat&lt;/code&gt; 文件。&lt;code&gt;meta.dat&lt;/code&gt; 文件内容如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/Canal/Canal-errors-02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考文档：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/canal/wiki/TableMetaTSDB&#34;&gt;TableMetaTSDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/canal/issues/534&#34;&gt;https://github.com/alibaba/canal/issues/534&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;caused-by-javaioioexception-errorpacket-errornumber1142-fieldcount-1-messageshow-command-denied-to-user--问题&#34;&gt;Caused by: java.io.IOException: ErrorPacket [errorNumber=1142, fieldCount=-1, message=SHOW command denied to user  问题&lt;/h4&gt;
&lt;p&gt;见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/Canal/Canal-errors-03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原因是因为没有这个表的权限, 订阅时过滤掉，或者加权限即可。&lt;/p&gt;
&lt;hr&gt;
</description>
      
    </item>
    
    <item>
      <title>《Objective-C高级编程iOS与OS X多线程和内存管理》读书笔记</title>
      <link>https://liupengkun1993.github.io/post/reading-notes/objective-c%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bios%E4%B8%8Eos-x%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 08 Jun 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/reading-notes/objective-c%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bios%E4%B8%8Eos-x%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;这两天重读了《Objective-C高级编程 iOS与OS X多线程和内存管理》，此书主要详细讲解了“自动引用计数”“Blocks”“GCD”这三大模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;自动引用计数&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1.1 自动引用计数概念&lt;/li&gt;
&lt;li&gt;1.2 内存管理的思考方式&lt;/li&gt;
&lt;li&gt;1.3 所有权修饰符&lt;/li&gt;
&lt;li&gt;1.4 ARC 的规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Blocks&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2.1 Block 概念&lt;/li&gt;
&lt;li&gt;2.2 Block 本质&lt;/li&gt;
&lt;li&gt;2.3 Block 的三种类型&lt;/li&gt;
&lt;li&gt;2.4 Block 何时会复制到堆&lt;/li&gt;
&lt;li&gt;2.5 Block 循环引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Grand Central Dispatch&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;3.1 Grand Central Dispatch 概念&lt;/li&gt;
&lt;li&gt;3.2 多线程编程可能会出现的问题&lt;/li&gt;
&lt;li&gt;3.3 GCD API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-自动引用计数&#34;&gt;1. 自动引用计数&lt;/h2&gt;
&lt;h3 id=&#34;11-自动引用计数概念&#34;&gt;1.1 自动引用计数概念&lt;/h3&gt;
&lt;p&gt;在 LLVM 编译器中设置 ARC 为有效状态，就无需再次键入 retain 或者 release 代码，编译器将结合运行时基于引用计数自动进行内存管理。&lt;/p&gt;
&lt;h3 id=&#34;12-内存管理的思考方式&#34;&gt;1.2 内存管理的思考方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自己生成的对象，自己所持有。&lt;/li&gt;
&lt;li&gt;非自己生成的对象，自己也能持有。&lt;/li&gt;
&lt;li&gt;自己持有的对象不再需要时释放。&lt;/li&gt;
&lt;li&gt;非自己持有的对象无法释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-所有权修饰符&#34;&gt;1.3 所有权修饰符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;__strong
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__strong&lt;/code&gt; 修饰符是 id 类型和对象类型默认的所有权修饰符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__strong&lt;/code&gt; 修饰符表示对对象的“强引用”。持有强引用的变量在超出其作用域时被废弃，随着强引用的失效，引用的对象会随之释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__weak
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__weak&lt;/code&gt; 修饰符可以避免循环引用，是弱引用，&lt;code&gt;__weak&lt;/code&gt; 不持有对象，在超出其变量作用域时，对象即被释放。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__weak&lt;/code&gt; 修饰符还有另一优点，在持有某对象的弱引用时，若该对象被废弃，则此弱引用将自动失效且处于 nil 被赋值的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__unsafe_unretained
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__unsafe_unretained&lt;/code&gt; 修饰符类似于 &lt;code&gt;__weak&lt;/code&gt;，不会对对象进行retain，但该对象销毁时，会依然指向之前的内存空间（野指针）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__autoreleasing
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__autoreleasing&lt;/code&gt; 修饰符，在当前 autoreleasepool 作用域内有效，出了当前的 autoreleasepool 会被自动释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意点：循环引用容易发生内存泄漏，内存泄漏是指应当废弃的对象在超出其生存周期后继续存在。&lt;/p&gt;
&lt;h3 id=&#34;14-arc-的规则&#34;&gt;1.4 ARC 的规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不能使用 retain/release/retainCount/autorelease
&lt;ul&gt;
&lt;li&gt;内存管理是编译器的工作，因此没必要使用内存管理的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不能使用 NSAllocateObject/NSDeallocateObject
&lt;ul&gt;
&lt;li&gt;同 retain 等方法一样，如果使用会引起编译错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;须遵守内存管理的方法命名规则&lt;/li&gt;
&lt;li&gt;不要显示调用 dealloc
&lt;ul&gt;
&lt;li&gt;ARC 会自动对此进行处理，因此不必书写 [super dealloc]。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 @autoreleasepool 块替代 NSAutoreleasePool&lt;/li&gt;
&lt;li&gt;不能使用区域（NSZone）&lt;/li&gt;
&lt;li&gt;对象型变量不能作为 C 语言结构体（struct/union）的成员&lt;/li&gt;
&lt;li&gt;显示转换 &amp;ldquo;id&amp;rdquo; 和 &amp;ldquo;void *&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-blocks&#34;&gt;2. Blocks&lt;/h2&gt;
&lt;h3 id=&#34;21-block-概念&#34;&gt;2.1 Block 概念&lt;/h3&gt;
&lt;p&gt;带有自动变量值的匿名函数。&lt;/p&gt;
&lt;h3 id=&#34;22-block-本质&#34;&gt;2.2 Block 本质&lt;/h3&gt;
&lt;p&gt;Block 本质是一个 OC 对象，它内部有一个 isa 指针。是封装了函数调用和函数调用环境的 OC 对象。&lt;/p&gt;
&lt;p&gt;iOS 类的本质即 class_t 结构体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;IMP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vtable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;uintptr_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_NEVER_USE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该实例名称持有声明的成员变量、方法的名称、方法的实现（即函数指针）、属性以及父类的指针。&lt;/p&gt;
&lt;h3 id=&#34;23-block-的三种类型&#34;&gt;2.3 Block 的三种类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类&lt;/th&gt;
&lt;th&gt;设置对象的存储域&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_NSConcreteStackBlock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;栈&lt;/td&gt;
&lt;td&gt;捕获局部变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_NSConcreteGlobalBlock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;程序的数据区域（.data 区）&lt;/td&gt;
&lt;td&gt;不捕获自动变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_NSConcreteMallocBlock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;堆&lt;/td&gt;
&lt;td&gt;捕获成员变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;24-block-何时会复制到堆&#34;&gt;2.4 Block 何时会复制到堆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调用 Block 的 copy 实例方法时&lt;/li&gt;
&lt;li&gt;Block 作为函数返回值返回时&lt;/li&gt;
&lt;li&gt;将 Block 赋值给附有 __strong 修饰符 id 类型的类或 Block 类型成员变量时&lt;/li&gt;
&lt;li&gt;在方法名中含有 usingBlock 的 Cocoa 框架方法或 GCD 的 API 中传递 Block 时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-block-循环引用&#34;&gt;2.5 Block 循环引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原因：Block中附有__strong修饰符的对象类型自动变量在从栈复制到堆上时，该对象会被Block所持有。&lt;/li&gt;
&lt;li&gt;解决方案：通过 &lt;code&gt;__weak&lt;/code&gt; 或 &lt;code&gt;__unsafe_unretained&lt;/code&gt; 修饰符来替代 &lt;code&gt;__strong&lt;/code&gt; 类型的被截获的自动变量
通过 &lt;code&gt;__block&lt;/code&gt; 说明符和设置nil来打破循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-grand-central-dispatch&#34;&gt;3. Grand Central Dispatch&lt;/h2&gt;
&lt;h3 id=&#34;31-grand-central-dispatch-概念&#34;&gt;3.1 Grand Central Dispatch 概念&lt;/h3&gt;
&lt;p&gt;Grand Central Dispatch （GCD） 是异步执行任务的技术之一，一般将应用程序中记述的线程管理用的代码在系统级中实现，开发者只需要定义想执行的任务并追加到适当的 Dispatch Queue 中，GCD 就能生成必要的线程并计划执行任务。&lt;/p&gt;
&lt;h3 id=&#34;32-多线程编程可能会出现的问题&#34;&gt;3.2 多线程编程可能会出现的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多个线程更新相同的资源会导致数据的不一致（数据竞争）- 解决：使用 Serial Dispatch Queue （串行队列）&lt;/li&gt;
&lt;li&gt;停止等待事件的线程会导致多个线程相互持续等待（死锁）&lt;/li&gt;
&lt;li&gt;使用太多线程会消耗大量内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dispatch Queue 按照追加的顺序（先进先出 FIFO）执行处理，另在执行处理时存在两种 Dispatch Queue ：一种是等待现在执行中处理的 Serial Dispatch Queue，另一种是不等待现在执行中处理的 Concurrent Dispatch Queue。&lt;/p&gt;
&lt;h3 id=&#34;33-gcd-api&#34;&gt;3.3 GCD API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可使用 &lt;code&gt;dispatch_set_target_queue&lt;/code&gt; API 设置 &lt;code&gt;Dispatch Queue&lt;/code&gt; 的优先级，同时也可以使多个本应并行执行的多个 &lt;code&gt;Serial Dispatch Queue&lt;/code&gt;，在目标 &lt;code&gt;Serial Dispatch Queue&lt;/code&gt; 上串行执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_after&lt;/code&gt; 函数并不准时，因为 &lt;code&gt;Main Dispatch Queue&lt;/code&gt; 在主线程的 Runloop 中执行，所以在比如每隔 1/60 秒自行的 Runloop 中，Block 最快3秒后自行，最慢在3秒 + 1/60 秒后执行，并且在 &lt;code&gt;Main Dispatch Queue&lt;/code&gt; 有大量处理追加或主线程的处理本身有延迟时，这个时间会更长。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dispatch Group&lt;/code&gt; 在追加到 &lt;code&gt;Dispatch Queue&lt;/code&gt; 中的多个处理全部结束后想执行结束处理可使用 &lt;code&gt;Dispatch Group&lt;/code&gt; 实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_sync&lt;/code&gt; 如同简易版的 &lt;code&gt;dispatch_group_wait&lt;/code&gt; 函数，会在指定队列中同步执行任务，在任务执行结束之前不会返回。如果在主线程同步执行 Block 就会出现死锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_apply&lt;/code&gt; 函数可进行快速遍历。由于 &lt;code&gt;dispatch_apply&lt;/code&gt; 函数与 &lt;code&gt;dispatch_sync&lt;/code&gt; 函数相同，会等待处理执行结束，因此推荐在 &lt;code&gt;dispatch_async&lt;/code&gt; 函数中非同步地执行 &lt;code&gt;dispatch_apply&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_suspend&lt;/code&gt; 函数可暂时挂起指定的 &lt;code&gt;Dispatch Queue&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_resume&lt;/code&gt; 函数可恢复指定的 &lt;code&gt;Dispatch Queue&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore&lt;/code&gt; 函数可对操作进行更细粒度的排他控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore_wait&lt;/code&gt;(semaphore, &lt;code&gt;DISPATCH_TIME_FOREVER&lt;/code&gt;)，&lt;code&gt;dispatch_semaphore_wait&lt;/code&gt; 函数等待 &lt;code&gt;Dispatch Semaphore&lt;/code&gt; 的计数值达到大于或等于1。该处理结束是使用 &lt;code&gt;dispatch_semaphore_signal&lt;/code&gt; 函数将 &lt;code&gt;Dispatch Semaphore&lt;/code&gt; 的计数值加1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_once&lt;/code&gt; 函数是保证再应用程序执行中只执行一次指定处理的 API。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_IO&lt;/code&gt; 函数可多线程并发处理大文件，以提高文件读取速度。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>《代码整洁之道》读书笔记</title>
      <link>https://liupengkun1993.github.io/post/reading-notes/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 08 Jun 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/reading-notes/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_Clean_Code/CleanCode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;有意义的命名&#34;&gt;有意义的命名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命名语意化：有意义的命名能够替代注释&lt;/li&gt;
&lt;li&gt;类名和对象名应该是名词或名词短语&lt;/li&gt;
&lt;li&gt;方法名应该是动词或动词短语&lt;/li&gt;
&lt;li&gt;不要害怕名称过长&lt;/li&gt;
&lt;li&gt;命名要避免误导&lt;/li&gt;
&lt;li&gt;多使用能够读的出来的名称：避免自造词, 多使用合乎规范的英文单词&lt;/li&gt;
&lt;li&gt;避免使用双关语&lt;/li&gt;
&lt;li&gt;多使用大家达成统一认识的领域名称(术语)&lt;/li&gt;
&lt;li&gt;避免添加无意义的语境&lt;/li&gt;
&lt;li&gt;使用易搜索的名称
&lt;ul&gt;
&lt;li&gt;易搜索指的是在海量代码中快速定位到该命名&lt;/li&gt;
&lt;li&gt;以单个字母命名的名称仅适用于短方法中的本地变量(如 js 中 d(document)，w(window))&lt;/li&gt;
&lt;li&gt;命名的长短应该与作用域大小成对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函数的第一规则是短小，20行封顶&lt;/li&gt;
&lt;li&gt;每个函数只做一件事&lt;/li&gt;
&lt;li&gt;函数中的语句在一个抽象层级上&lt;/li&gt;
&lt;li&gt;函数的参数
&lt;ul&gt;
&lt;li&gt;函数参数个数：理想情况函数参数个数依次为 0、1、2，超过两个应该避免&lt;/li&gt;
&lt;li&gt;当函数需要三个或者超过三个以上参数时候，推荐把一些对象封装为类&lt;/li&gt;
&lt;li&gt;当我们需要传入个数可变的参数时候，可以使用参数列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽离 try/catch 代码块（一个函数只做一件事，错误处理就是一件事 ）&lt;/li&gt;
&lt;li&gt;DRY 原则：不要重复自己&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;尽量不写注释，能用代码表达就用代码表达&lt;/li&gt;
&lt;li&gt;值得写的注释
&lt;ul&gt;
&lt;li&gt;法律信息&lt;/li&gt;
&lt;li&gt;提供信息的注释&lt;/li&gt;
&lt;li&gt;对意图的解释&lt;/li&gt;
&lt;li&gt;警告&lt;/li&gt;
&lt;li&gt;TODO 注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;坏的注释
&lt;ul&gt;
&lt;li&gt;多余的注释：无法提供比代码本身提供更多的信息，或者说读注释并不比读代码效果好&lt;/li&gt;
&lt;li&gt;误导性注释：你的注释不够精确，甚至本身就有错误&lt;/li&gt;
&lt;li&gt;日志式注释：记录代码变更或者代码 log 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;格式的目的是保持可维护性和可扩展性&lt;/li&gt;
&lt;li&gt;遵守团队规则，一个团队的代码风格要统一&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误处理&#34;&gt;错误处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用异常而非返回码&lt;/li&gt;
&lt;li&gt;抽离try catch包含的代码块，其中代码块抽象为一个函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIRST原则
&lt;ul&gt;
&lt;li&gt;快速 Fast&lt;/li&gt;
&lt;li&gt;独立 Independent 测试应该相互独立&lt;/li&gt;
&lt;li&gt;可重复 Repeatable 测试应当在任何环境中重复通过&lt;/li&gt;
&lt;li&gt;自足验证 Self-Validating 测试应该有布尔值输出&lt;/li&gt;
&lt;li&gt;及时 Timely 最好的方式是 TDD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类&#34;&gt;类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类的封装&lt;/li&gt;
&lt;li&gt;遵守单一权责原则&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;迭进&#34;&gt;迭进&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要重复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发编程&#34;&gt;并发编程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分离并发相关代码与其它代码&lt;/li&gt;
&lt;li&gt;严格限制对可能被共享的数据的访问&lt;/li&gt;
&lt;li&gt;避免使用一个共享对象的多个同步方法&lt;/li&gt;
&lt;li&gt;保持同步区域微小，尽可能少设计临界区&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>QuickBI 问题汇总</title>
      <link>https://liupengkun1993.github.io/post/bigdata/quickbi-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 03 Jun 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/quickbi-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;Quick BI 连接 MaxCompute 数据报错：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quick BI 连接 MaxCompute 数据源，参考了阿里云文档：&lt;a href=&#34;https://helpcdn.aliyun.com/document_detail/166109.html?spm=a2c4g.11174283.6.603.1dca7151UCWdWL&#34;&gt;云数据源MaxCompute&lt;/a&gt;，检查了参数，但还是连接不通。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;显示名称：****
数据库地址：http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api
项目名称：maxcompute 项目名
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;研究半天是 ak 账号的原因，子账户的 ak 需要自己创建，子账户又没有权限创建，所以只能主账户给子账户开权限，子账户创建 ak，这样就连通了。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Table(***) is full scan with all partitions, please specify partition predicates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仪表板报错：[46] execute failed: ODPS-0130071:[0,0] Semantic analysis exception - physical plan generation failed: java.lang.RuntimeException: Table(***) is full scan with all partitions, please specify partition predicates.&lt;/p&gt;
&lt;p&gt;这个问题是由于分区表引起的，有两个解决方案，第一是给该数据集开启全表扫描，参考文档：&lt;a href=&#34;https://help.aliyun.com/document_detail/169395.html?spm=a2c4g.11186623.6.630.2b6a74efA9S6X5#title-mdr-mh0-buh&#34;&gt;优化数据集性能&lt;/a&gt;，第二是给数据集设置过滤条件，只查询某一个分区的。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>LLDB调试常用命令</title>
      <link>https://liupengkun1993.github.io/post/ios/lldb/lldb%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 08 May 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/ios/lldb/lldb%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;LLDB 调试在 iOS 开发中经常会用到，这里记录一下常用的调试命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;断点命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set -n 函数名&lt;/td&gt;
&lt;td&gt;给某函数下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set -n &amp;ldquo;[类名 SEL]&amp;rdquo; -n &amp;ldquo;[类名 SEL]&amp;rdquo; &amp;hellip;&lt;/td&gt;
&lt;td&gt;给多个方法下断点,形成断点组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint list&lt;/td&gt;
&lt;td&gt;查看当前断点列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint disable(enable)组号(编号)&lt;/td&gt;
&lt;td&gt;禁 用(启用)某一组(某一个)断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint delete 编号&lt;/td&gt;
&lt;td&gt;禁用某一个断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint delete 组号&lt;/td&gt;
&lt;td&gt;删除某一组断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint delete&lt;/td&gt;
&lt;td&gt;删除所有断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set &amp;ndash;selectore 方法名&lt;/td&gt;
&lt;td&gt;全局方法断点,工程所有该方法都会下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;brepoint set &amp;ndash;file 文件名.m &amp;ndash;selector 方法名&lt;/td&gt;
&lt;td&gt;给.m实现文件某个方法下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set -r 字符串&lt;/td&gt;
&lt;td&gt;遍历整个工程，含该字串的方法、函数都会下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint command add 标号&lt;/td&gt;
&lt;td&gt;某标号断点过后执行相应命令，以Done结束，类似于Xcode界面Edit breakpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint command list 标号&lt;/td&gt;
&lt;td&gt;列出断点过后执行的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint command delete&lt;/td&gt;
&lt;td&gt;删除断点过后执行的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b 内存地址&lt;/td&gt;
&lt;td&gt;对内存地址下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;其他常用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;p 语句&lt;/td&gt;
&lt;td&gt;动态执行语句(expression的缩写)，内存操作（下同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expression 语句&lt;/td&gt;
&lt;td&gt;同上,可缩写成exp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;po 语句&lt;/td&gt;
&lt;td&gt;print object 常用于查看对象信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;程序继续执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;process interrput&lt;/td&gt;
&lt;td&gt;暂停程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;列出所有加载的模块 缩写im li&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list -o -f 模块名&lt;/td&gt;
&lt;td&gt;只列出输入模块名信息，常用于主模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bt&lt;/td&gt;
&lt;td&gt;查看当前调用栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;查看上一个调用函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;查看下一个调用函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame variable&lt;/td&gt;
&lt;td&gt;查看函数参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame select 标号&lt;/td&gt;
&lt;td&gt;查看指定调用函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dis -a $pc&lt;/td&gt;
&lt;td&gt;反汇编指定地址,此处为pc寄存器对应地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread info&lt;/td&gt;
&lt;td&gt;输出当前线程信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b trace -c xxx&lt;/td&gt;
&lt;td&gt;满足某个条件后中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;target stop-hook add -o &amp;ldquo;frame variable&amp;rdquo;&lt;/td&gt;
&lt;td&gt;断点进入后默认做的操作,这里是打印参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help 指令&lt;/td&gt;
&lt;td&gt;查看指令信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;跳转命令、读写命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;将子函数整体一步执行，源码级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;跳进子函数一步一步执行，源码级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ni&lt;/td&gt;
&lt;td&gt;跳到下一条指令,汇编级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;si&lt;/td&gt;
&lt;td&gt;跳到当前指令内部，汇编级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finish&lt;/td&gt;
&lt;td&gt;返回上层调用栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread return&lt;/td&gt;
&lt;td&gt;不再执行往下代码，直接从当前调用栈返回一个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register read&lt;/td&gt;
&lt;td&gt;读取所有寄存器值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register read $x0&lt;/td&gt;
&lt;td&gt;读取x0寄存器值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register write $x1 10&lt;/td&gt;
&lt;td&gt;修改x1寄存器的值为10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p/x&lt;/td&gt;
&lt;td&gt;以十六进制形式读取值，读取的对象可以很多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;watchpoint set variable p-&amp;gt;_name&lt;/td&gt;
&lt;td&gt;给属性添加内存断点，属性改变时会触发断点，可以看到属性的新旧值，类似KVO效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;watchpoint set expression 变量内存地址&lt;/td&gt;
&lt;td&gt;效果同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;命令缩写
&lt;ul&gt;
&lt;li&gt;breakpoint :br、b&lt;/li&gt;
&lt;li&gt;list:li&lt;/li&gt;
&lt;li&gt;delete:del&lt;/li&gt;
&lt;li&gt;disable:dis&lt;/li&gt;
&lt;li&gt;enable:ena&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Flutter 与 iOS 功能比较</title>
      <link>https://liupengkun1993.github.io/post/flutter/flutter-%E4%B8%8E-ios-%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83/</link>
      <pubDate>Wed, 06 May 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/flutter/flutter-%E4%B8%8E-ios-%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;此文档是学习过程中的总结，文章详情：&lt;a href=&#34;https://flutterchina.club/flutter-for-ios/#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8&#34;&gt;https://flutterchina.club/flutter-for-ios/#数据库和本地存储&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;views&#34;&gt;Views&lt;/h2&gt;
&lt;h3 id=&#34;uiview-相当于-flutter-中的什么&#34;&gt;UIView 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;Widget 类似于 UIView，两者区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生存时间不同，widgets 一直存在且保持不变，直到当它们需要被改变，当 widgets 和它们的状态被改变时，Flutter 会构建一颗新的 widgets 树； views 在改变时并不会被重新创建。&lt;/li&gt;
&lt;li&gt;Flutter 的 widgets 非常轻量。widgets 本身并不是什么控件，也不会被直接绘制出什么，而只是 UI 的描述。&lt;/li&gt;
&lt;li&gt;iOS 上更新 views，只需要直接改变它们就可以了。在 Flutter 中，widgets 是不可变的，而且不能被直接更新。你需要去操纵 widget 的 state。&lt;/li&gt;
&lt;li&gt;iOS 中可以通过约束或者 frame 来布局，Flutter 中，可以通过编写一个 widget 树来声明布局（可以给任何的 widget 添加 padding），这里是 &lt;a href=&#34;https://flutter.dev/docs/development/ui/widgets/layout&#34;&gt;Flutter 提供的布局&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;在 iOS 中，可以在父 view 中调用 addSubview() 或在子 view 中调用 removeFromSuperview() 来动态地添加或移除子 views。在 Flutter 中，由于 widget 不可变，所以没有和 addSubview() 直接等价的东西。作为替代，可以向 parent 传入一个返回 widget 的函数，并用一个布尔值来控制子 widget 的创建。&lt;/li&gt;
&lt;li&gt;在 iOS 中，可以通过调用 animate(withDuration:animations:) 方法来给一个 view 创建动画。在 Flutter 中，使用动画库来包裹 widgets，而不是创建一个动画 widget。在 Flutter 中，使用 AnimationController。这是一个可以暂停、寻找、停止、反转动画的 Animation&lt;!-- raw HTML omitted --&gt; 类型。它需要一个 Ticker 当 vsync 发生时来发送信号，并且在每帧运行时创建一个介于 0 和 1 之间的线性插值（interpolation）。你可以创建一个或多个的 Animation 并附加给一个 controller。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘图&#34;&gt;绘图&lt;/h3&gt;
&lt;p&gt;在 iOS 上，你通过 CoreGraphics 来在屏幕上绘制线条和形状。Flutter 有一套基于 Canvas 类的不同的 API，还有 CustomPaint 和 CustomPainter 这两个类来帮助你绘图。后者实现你在 canvas 上的绘图算法。&lt;/p&gt;
&lt;h3 id=&#34;怎么创建自定义的-widgets&#34;&gt;怎么创建自定义的 widgets&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你编写 UIView 的子类，或使用已经存在的 view 来重载并实现方法，以达到特定的功能。在 Flutter 中，你会组合（composing）多个小的 widgets 来构建一个自定义的 widget（而不是扩展它）。&lt;/p&gt;
&lt;h2 id=&#34;导航&#34;&gt;导航&lt;/h2&gt;
&lt;h3 id=&#34;页面之间跳转&#34;&gt;页面之间跳转&lt;/h3&gt;
&lt;p&gt;在 iOS 中，可以使用管理了 view controller 栈的 UINavigationController 来在不同的 view controller 之间跳转。&lt;/p&gt;
&lt;p&gt;Flutter 也有类似的实现，使用了 Navigator 和 Routes。一个路由是 App 中“屏幕”或“页面”的抽象，而一个 Navigator 是管理多个路由的 widget 。可以粗略地把一个路由对应到一个 UIViewController。Navigator 的工作原理和 iOS 中 UINavigationController 非常相似，当你想跳转到新页面或者从新页面返回时，它可以 push() 和 pop() 路由。&lt;/p&gt;
&lt;h3 id=&#34;跳转到其他-app&#34;&gt;跳转到其他 App&lt;/h3&gt;
&lt;p&gt;在 iOS 中，要跳转到其他 App，需要一个特定的 URL Scheme。对系统级别的 App 来说，这个 scheme 取决于 App。为了在 Flutter 中实现这个功能，你可以创建一个原生平台的整合层，或者使用现有的 plugin，例如 &lt;a href=&#34;https://pub.dartlang.org/packages/url_launcher&#34;&gt;url_launcher&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;线程和异步&#34;&gt;线程和异步&lt;/h2&gt;
&lt;h3 id=&#34;怎么编写异步的代码&#34;&gt;怎么编写异步的代码&lt;/h3&gt;
&lt;p&gt;Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。&lt;/p&gt;
&lt;p&gt;Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。&lt;/p&gt;
&lt;h3 id=&#34;把工作放到后台线程&#34;&gt;把工作放到后台线程&lt;/h3&gt;
&lt;p&gt;由于 Flutter 是单线程并且跑着一个 event loop 的（就像 Node.js 那样），你不必为线程管理或是开启后台线程而操心。如果你正在做 I/O 操作，如访问磁盘或网络请求，安全地使用 async / await 就完事了。如果，在另外的情况下，你需要做让 CPU 执行繁忙的计算密集型任务，你需要使用 Isolate 来避免阻塞 event loop。&lt;/p&gt;
&lt;p&gt;Isolates 是分离的运行线程，并且不和主线程的内存堆共享内存。这意味着你不能访问主线程中的变量，或者使用 setState() 来更新 UI。正如它们的名字一样，Isolates 不能共享内存。&lt;/p&gt;
&lt;h3 id=&#34;发起网络请求&#34;&gt;发起网络请求&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://pub.dartlang.org/packages/http&#34;&gt;http&lt;/a&gt; 做网络请求非常简单，类似于 AFNetworking 或 Alamofire。&lt;/p&gt;
&lt;h3 id=&#34;加载进度条&#34;&gt;加载进度条&lt;/h3&gt;
&lt;p&gt;在 iOS 中，在后台运行耗时任务时你会使用 UIProgressView。在 Flutter 中，使用一个 ProgressIndicator widget。通过一个布尔 flag 来控制是否展示进度。在任务开始时，告诉 Flutter 更新状态，并在结束后隐去。&lt;/p&gt;
&lt;h2 id=&#34;工程结构本地化依赖和资源&#34;&gt;工程结构、本地化、依赖和资源&lt;/h2&gt;
&lt;h3 id=&#34;怎么在-flutter-中引入-image-assets多分辨率怎么办&#34;&gt;怎么在 Flutter 中引入 image assets？多分辨率怎么办？&lt;/h3&gt;
&lt;p&gt;iOS 把 images 和 assets 作为不同的东西，而 Flutter 中只有 assets。Flutter 中的 assets 可以是任意类型的文件，而不仅仅是图片。例如，你可以把 json 文件放置到 my-assets 文件夹中。&lt;/p&gt;
&lt;p&gt;对于图片，Flutter 像 iOS 一样，遵循了一个简单的基于像素密度的格式。Image assets 可能是 1.0x 2.0x 3.0x 或是其他的任何倍数。&lt;/p&gt;
&lt;h3 id=&#34;在哪里放置字符串怎么做本地化&#34;&gt;在哪里放置字符串？怎么做本地化？&lt;/h3&gt;
&lt;p&gt;不像 iOS 拥有一个 Localizable.strings 文件，Flutter 目前并没有一个用于处理字符串的系统。目前，最佳实践是把你的文本拷贝到静态区，并在这里访问。&lt;/p&gt;
&lt;p&gt;默认情况下，Flutter 只支持美式英语字符串。如果你要支持其他语言，请引入 flutter_localizations 包。你可能也要引入 intl 包来支持其他的 i10n 机制，比如日期/时间格式化。&lt;/p&gt;
&lt;h3 id=&#34;cocoapods-相当于什么如何添加依赖&#34;&gt;Cocoapods 相当于什么？如何添加依赖？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你把依赖添加到 Podfile 中。Flutter 使用 Dart 构建系统和 Pub 包管理器来处理依赖。这些工具将本机 Android 和 iOS 包装应用程序的构建委派给相应的构建系统。&lt;/p&gt;
&lt;p&gt;如果你的 Flutter 工程中的 iOS 文件夹中拥有 Podfile，请仅在你为每个平台集成时使用它。总体来说，使用 pubspec.yaml 来在 Flutter 中声明外部依赖。一个可以找到优秀 Flutter 包的地方是 &lt;a href=&#34;https://pub.dev/flutter/packages&#34;&gt;Pub&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;viewcontrollers&#34;&gt;ViewControllers&lt;/h2&gt;
&lt;h3 id=&#34;viewcontroller-相当于-flutter-中的什么&#34;&gt;ViewController 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，一个 ViewController 代表了用户界面的一部分，最常用于一个屏幕，或是其中一部分。它们被组合在一起用于构建复杂的用户界面，并帮助你拆分 App 的 UI。在 Flutter 中，这一任务回落到了 widgets 中。就像在界面导航部分提到的一样，一个屏幕也是被 widgets 来表示的，因为“万物皆 widget！”。使用 Navigator 在 Route 之间跳转，或者渲染相同数据的不同状态。&lt;/p&gt;
&lt;h3 id=&#34;怎么监听-ios-中的生命周期事件&#34;&gt;怎么监听 iOS 中的生命周期事件？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你可以重写 ViewController 中的方法来捕获它的视图的生命周期，或者在 AppDelegate 中注册生命周期的回调函数。在 Flutter 中没有这两个概念，但你可以通过 hook WidgetsBinding 观察者来监听生命周期事件，并监听 didChangeAppLifecycleState() 的变化事件。&lt;/p&gt;
&lt;p&gt;可观察的生命周期事件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inactive - 应用处于不活跃的状态，并且不会接受用户的输入。这个事件仅工作在 iOS 平台，在 Android 上没有等价的事件。&lt;/li&gt;
&lt;li&gt;paused - 应用暂时对用户不可见，虽然不接受用户输入，但是是在后台运行的。&lt;/li&gt;
&lt;li&gt;resumed - 应用可见，也响应用户的输入。&lt;/li&gt;
&lt;li&gt;suspending - 应用暂时被挂起，在 iOS 上没有这一事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多细节：&lt;a href=&#34;https://docs.flutter.io/flutter/dart-ui/AppLifecycleState-class.html&#34;&gt;AppLifecycleState&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;布局&#34;&gt;布局&lt;/h2&gt;
&lt;h3 id=&#34;uitableview-和-uicollectionview-相当于-flutter-中的什么&#34;&gt;UITableView 和 UICollectionView 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你可能用 UITableView 或 UICollectionView 来展示一个列表。在 Flutter 中，你可以用 ListView 来达到相似的实现。在 iOS 中，你通过代理方法来确定行数，每一个 index path 的单元格，以及单元格的尺寸。由于 Flutter 中 widget 的不可变特性，你需要向 ListView 传递一个 widget 列表，Flutter 会确保滚动是快速且流畅的。&lt;/p&gt;
&lt;h3 id=&#34;怎么知道列表的哪个元素被点击了&#34;&gt;怎么知道列表的哪个元素被点击了？&lt;/h3&gt;
&lt;p&gt;iOS 中，你通过 tableView:didSelectRowAtIndexPath: 代理方法来实现。在 Flutter 中，使用传递进来的 widget 的 touch handle。&lt;/p&gt;
&lt;h3 id=&#34;怎么动态地更新-listview&#34;&gt;怎么动态地更新 ListView？&lt;/h3&gt;
&lt;p&gt;一个更新 ListView 的简单方法是，在 setState() 中创建一个新的 list，并把旧 list 的数据拷贝给新的 list。虽然这样很简单，但当数据集很大时，并不推荐这样做。&lt;/p&gt;
&lt;p&gt;一个推荐的、高效的且有效的做法是，使用 ListView.Builder 来构建列表。这个方法在你想要构建动态列表，或是列表拥有大量数据时会非常好用。&lt;/p&gt;
&lt;h3 id=&#34;scrollview-相当于-flutter-里的什么&#34;&gt;ScrollView 相当于 Flutter 里的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你给 view 包裹上 ScrollView 来允许用户在需要时滚动你的内容。在 Flutter 中，最简单的方法是使用 ListView widget。它表现得既和 iOS 中的 ScrollView 一致，也能和 TableView 一致，因为你可以给它的 widget 做垂直排布。&lt;/p&gt;
&lt;h2 id=&#34;手势检测及触摸事件处理&#34;&gt;手势检测及触摸事件处理&lt;/h2&gt;
&lt;h3 id=&#34;怎么给-flutter-的-widget-添加一个点击监听者&#34;&gt;怎么给 Flutter 的 widget 添加一个点击监听者？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你给一个 view 添加 GestureRecognizer 来处理点击事件。在 Flutter 中，有两种方法来添加点击监听者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 widget 本身支持事件监测，直接传递给它一个函数，并在这个函数里实现响应方法。&lt;/li&gt;
&lt;li&gt;如果 widget 本身不支持事件监测，则在外面包裹一个 GestureDetector，并给它的 onTap 属性传递一个函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么处理-widget-上的其他手势&#34;&gt;怎么处理 widget 上的其他手势？&lt;/h3&gt;
&lt;p&gt;使用 GestureDetector 你可以监听更广阔范围内的手势，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tapping
&lt;ul&gt;
&lt;li&gt;onTapDown — 在特定位置轻触手势接触了屏幕。&lt;/li&gt;
&lt;li&gt;onTapUp — 在特定位置产生了一个轻触手势，并停止接触屏幕。&lt;/li&gt;
&lt;li&gt;onTap — 产生了一个轻触手势。&lt;/li&gt;
&lt;li&gt;onTapCancel — 触发了 onTapDown 但没能触发 tap。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Double tapping
&lt;ul&gt;
&lt;li&gt;onDoubleTap — 用户在同一个位置快速点击了两下屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Long pressing
&lt;ul&gt;
&lt;li&gt;onLongPress — 用户在同一个位置长时间接触屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vertical dragging
&lt;ul&gt;
&lt;li&gt;onVerticalDragStart — 接触了屏幕，并且可能会垂直移动。&lt;/li&gt;
&lt;li&gt;onVerticalDragUpdate — 接触了屏幕，并继续在垂直方向移动。&lt;/li&gt;
&lt;li&gt;onVerticalDragEnd — 之前接触了屏幕并垂直移动，并在停止接触屏幕前以某个垂直的速度移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizontal dragging
&lt;ul&gt;
&lt;li&gt;onHorizontalDragStart — 接触了屏幕，并且可能会水平移动。&lt;/li&gt;
&lt;li&gt;onHorizontalDragUpdate — 接触了屏幕，并继续在水平方向移动。&lt;/li&gt;
&lt;li&gt;onHorizontalDragEnd — 之前接触屏幕并水平移动的触摸点与屏幕分离。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主题和文字&#34;&gt;主题和文字&lt;/h2&gt;
&lt;h3 id=&#34;怎么给-app-设置主题&#34;&gt;怎么给 App 设置主题？&lt;/h3&gt;
&lt;p&gt;Flutter 实现了一套漂亮的 MD 组件，并且开箱可用。它接管了一大堆你需要的样式和主题。&lt;/p&gt;
&lt;p&gt;为了充分发挥你的 App 中 MD 组件的优势，声明一个顶级 widget，MaterialApp，用作你的 App 入口。MaterialApp 是一个便利组件，包含了许多 App 通常需要的 MD 风格组件。它通过一个 WidgetsApp 添加了 MD 功能来实现。&lt;/p&gt;
&lt;h3 id=&#34;怎么给-text-widget-设置自定义字体&#34;&gt;怎么给 Text widget 设置自定义字体？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你在项目中引入任意的 ttf 文件，并在 info.plist 中设置引用。在 Flutter 中，在文件夹中放置字体文件，并在 pubspec.yaml 中引用它，然后在你的 Text widget 中指定字体。&lt;/p&gt;
&lt;h2 id=&#34;表单输入&#34;&gt;表单输入&lt;/h2&gt;
&lt;h3 id=&#34;flutter-中表单怎么工作我怎么拿到用户的输入&#34;&gt;Flutter 中表单怎么工作？我怎么拿到用户的输入？&lt;/h3&gt;
&lt;p&gt;在表单处理的实践中，就像在 Flutter 中任何其他的地方一样，要通过特定的 widgets。如果你有一个 TextField 或是 TextFormField，你可以通过 &lt;a href=&#34;https://docs.flutter.io/flutter/widgets/TextEditingController-class.html&#34;&gt;TextEditingController&lt;/a&gt; 来获得用户输入。&lt;/p&gt;
&lt;h3 id=&#34;text-field-中的-placeholder-相当于什么&#34;&gt;Text field 中的 placeholder 相当于什么？&lt;/h3&gt;
&lt;p&gt;在 Flutter 中，你可以轻易地通过向 Text widget 的装饰构造器参数重传递 InputDecoration 来展示“小提示”，或是占位符文字。&lt;/p&gt;
&lt;h3 id=&#34;怎么展示验证错误信息&#34;&gt;怎么展示验证错误信息？&lt;/h3&gt;
&lt;p&gt;就像展示“小提示”一样，向 Text widget 的装饰器构造器参数中传递一个 InputDecoration。然而，你并不想在一开始就显示错误信息。相反，当用户输入了验证信息，更新状态，并传入一个新的 InputDecoration 对象。&lt;/p&gt;
&lt;h2 id=&#34;和硬件第三方服务以及平台交互&#34;&gt;和硬件、第三方服务以及平台交互&lt;/h2&gt;
&lt;h3 id=&#34;怎么和平台以及平台的原生代码交互&#34;&gt;怎么和平台，以及平台的原生代码交互？&lt;/h3&gt;
&lt;p&gt;Flutter 提供了 &lt;a href=&#34;https://flutter.io/platform-channels/&#34;&gt;platform channels&lt;/a&gt; ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。&lt;/p&gt;
&lt;p&gt;除了直接使用平台管道之外，你还可以使用一系列预先制作好的 &lt;a href=&#34;https://flutter.io/using-packages/&#34;&gt;plugins&lt;/a&gt;。例如，你可以直接使用插件来访问相机胶卷或是设备的摄像头，而不必编写你自己的集成层代码。你可以在 &lt;a href=&#34;https://pub.dartlang.org&#34;&gt;Pub&lt;/a&gt; 上找到插件，这是一个 Dart 和 Flutter 的开源包仓库。其中一些包可能会支持集成 iOS 或 Android，或两者均可。&lt;/p&gt;
&lt;p&gt;如果你在 Pub 上找不到符合你需求的插件，你可以&lt;a href=&#34;https://flutter.io/developing-packages/&#34;&gt;自己编写&lt;/a&gt;，并且发布在 &lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/developing-packages&#34;&gt;Pub&lt;/a&gt; 上。&lt;/p&gt;
&lt;h3 id=&#34;怎么访问-gps-传感器&#34;&gt;怎么访问 GPS 传感器？&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&#34;https://pub.dartlang.org/packages/location&#34;&gt;location&lt;/a&gt; 社区插件。&lt;/p&gt;
&lt;h3 id=&#34;怎么访问摄像头&#34;&gt;怎么访问摄像头？&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&#34;https://pub.dartlang.org/packages/image_picker&#34;&gt;image_picker&lt;/a&gt; 插件。&lt;/p&gt;
&lt;h3 id=&#34;怎么登录-facebook&#34;&gt;怎么登录 Facebook？&lt;/h3&gt;
&lt;p&gt;登录 Facebook 可以使用 &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_facebook_login&#34;&gt;flutter_facebook_login&lt;/a&gt; 社区插件。&lt;/p&gt;
&lt;h3 id=&#34;怎么创建自己的原生集成层&#34;&gt;怎么创建自己的原生集成层？&lt;/h3&gt;
&lt;p&gt;如果有一些 Flutter 和社区插件遗漏的平台相关的特性，可以根据 &lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/developing-packages&#34;&gt;developing packages and plugins&lt;/a&gt; 页面构建自己的插件。&lt;/p&gt;
&lt;h2 id=&#34;数据库和本地存储&#34;&gt;数据库和本地存储&lt;/h2&gt;
&lt;h3 id=&#34;怎么在-flutter-中访问-userdefaults&#34;&gt;怎么在 Flutter 中访问 UserDefaults？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你可以使用属性列表来存储键值对的集合，即我们熟悉的 UserDefaults。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，可以使用 &lt;a href=&#34;https://pub.dartlang.org/packages/shared_preferences&#34;&gt;Shared Preferences plugin&lt;/a&gt; 来达到相似的功能。它包裹了 UserDefaluts 以及 Android 上等价的 SharedPreferences 的功能。&lt;/p&gt;
&lt;h3 id=&#34;coredata-相当于-flutter-中的什么&#34;&gt;CoreData 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你通过 CoreData 来存储结构化的数据。这是一个 SQL 数据库的上层封装，让查询和关联模型变得更加简单。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，使用 &lt;a href=&#34;https://pub.dartlang.org/packages/sqflite&#34;&gt;SQFlite&lt;/a&gt; 插件来实现这个功能。&lt;/p&gt;
&lt;h2 id=&#34;通知&#34;&gt;通知&lt;/h2&gt;
&lt;h3 id=&#34;怎么推送通知&#34;&gt;怎么推送通知？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你需要向苹果开发者平台中注册来允许推送通知。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，使用 &lt;a href=&#34;https://pub.dartlang.org/packages/firebase_messaging&#34;&gt;firebase_messaging&lt;/a&gt; 插件来实现这一功能。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Docker 用法</title>
      <link>https://liupengkun1993.github.io/post/docker/docker-%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 28 Apr 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/docker/docker-%E7%94%A8%E6%B3%95/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。
容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是 Docker 的一些常见用法：&lt;/p&gt;
&lt;h3 id=&#34;拉取镜像&#34;&gt;拉取镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker pull NAME&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:TAG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker pull centos:latest&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;查看镜像列表列出本地的所有-images&#34;&gt;查看镜像列表，列出本地的所有 images&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker images &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;NAME&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker images&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Docker/docker01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;REPOSITORY：表示镜像的仓库源&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;TAG：镜像的标签&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;IMAGE ID：镜像ID&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;CREATED：镜像创建时间&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;SIZE：镜像大小&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;查看容器列表可看到我们创建过的所有-container&#34;&gt;查看容器列表，可看到我们创建过的所有 container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker ps &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker ps -a&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;启动-container&#34;&gt;启动 Container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker run 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker run -it 镜像id /bin/bash&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;停止-container&#34;&gt;停止 Container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker stop 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;重启-container&#34;&gt;重启 Container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker restart 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;通过-id-删除镜像&#34;&gt;通过 ID 删除镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rmi 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;docker-批量删除镜像&#34;&gt;Docker 批量删除镜像&lt;/h3&gt;
&lt;p&gt;Docker 使用一段时间后，可能会存在许多无用的镜像。一个个删除比较麻烦，可以用下面的命令进行批量删除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; 会查看所有的镜像；&lt;code&gt;grep &amp;quot;none&amp;quot;&lt;/code&gt; 命令会筛选所有名字包括 &lt;code&gt;none&lt;/code&gt; 以及标签为 &lt;code&gt;none&lt;/code&gt; 的镜像；&lt;code&gt;awk &#39;{print $3}&#39;&lt;/code&gt; 会处理筛选后的文本，打印所有镜像 &lt;code&gt;id&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Docker/docker02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除容器及镜像详细&#34;&gt;删除容器及镜像详细&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;杀死所有正在运行的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除所有已经停止的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rm &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除所有未打 dangling 标签的镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images -q -f &lt;span class=&#34;nv&#34;&gt;dangling&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除所有镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;问题汇总&#34;&gt;问题汇总&lt;/h4&gt;
&lt;p&gt;1.报错 &lt;code&gt;Error response from daemon: conflict: unable to delete 4a67b006c338 (cannot be forced) - image is being used by running container 451b7b600276&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法：使用 &lt;code&gt;docker rmi -f 镜像id&lt;/code&gt; 进行删除&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;学习资料：https://www.runoob.com/docker/docker-tutorial.html&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
