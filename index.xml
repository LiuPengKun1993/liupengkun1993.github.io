<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>liupengkun</title>
    <link>https://liupengkun1993.github.io/</link>
    <description>Recent content on liupengkun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>liupengkun</copyright>
    <lastBuildDate>Thu, 31 Dec 2020 11:43:48 +0800</lastBuildDate>
    
        <atom:link href="https://liupengkun1993.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://liupengkun1993.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/about/</guid>
      
        <description>&lt;h1 id=&#34;关于我&#34;&gt;关于我&lt;/h1&gt;
&lt;h3 id=&#34;刘朋坤&#34;&gt;刘朋坤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;毕业于河南科技学院-信息管理与信息系统专业&lt;/li&gt;
&lt;li&gt;90后 旅行 爬山 摄影&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;联系方式&#34;&gt;联系方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;微信: YMWM1528961618&lt;/li&gt;
&lt;li&gt;邮箱:pengkun1011@gmail.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;当前地址&#34;&gt;当前地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;北京-海淀&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>2020 年终总结</title>
      <link>https://liupengkun1993.github.io/post/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 31 Dec 2020 11:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;2020 是很特殊的一年，年初暴发的疫情，一直持续到年尾还没有结束，看态势必定会蔓延到 2021 了。&lt;/p&gt;
&lt;p&gt;这场疫情对每个人的生活及工作影响都很大，因此疫情是 2020 年度个人总结绕不过的一个话题。因为这场疫情，几乎每座城每个村都封闭或者半封闭了一段时间，这是我三月份去上班时在地铁上拍的一张照片，本该人挤人的地铁上只有寥寥数人，当时的感想是很怀念人挤人的时刻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/subway.jpg&#34; alt=&#34;地铁 8 号线 2020.03.15&#34;&gt;&lt;/p&gt;
&lt;p&gt;疫情影响了工作和生活，但工作和生活还是要继续。接下来我会分几个方面总结一下即将过去的 2020。&lt;/p&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;今年一直待在七天网络这家教育公司，由于种种原因我们部门没有移动端的业务（本来是要做移动端项目的，但由于疫情原因，北京这边的部门被取消了招人计划，移动端业务终究还是没有迁过来），所以我主要时间做的不再是 iOS 开发，而是大数据开发。&lt;/p&gt;
&lt;p&gt;关于大数据开发的工作内容，后面会在【技术-大数据】这个话题下着重介绍。&lt;/p&gt;
&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;
&lt;p&gt;接下来总结一下 2020 接触过的技术。&lt;/p&gt;
&lt;h3 id=&#34;ios-开发&#34;&gt;iOS 开发&lt;/h3&gt;
&lt;p&gt;工作上已经一年不怎么写 iOS 项目了，甚是怀念，毕竟之前几年一直在做 iOS 开发，现在只能偶尔和几个 iOS 朋友同事聚聚，另外自己几乎每星期都会写写 iOS，忙的时候只是写个简单的方法，或者用 Swift 练习算法，聊以抒怀🤣。&lt;/p&gt;
&lt;p&gt;今年读了几本 iOS 相关的书，有几本写了读书笔记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/objective-c%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bios%E4%B8%8Eos-x%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《Objective-C高级编程iOS与OS X多线程和内存管理》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96/&#34;&gt;高性能iOS应用开发 - 核心优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-ios%E6%80%A7%E8%83%BD/&#34;&gt;高性能iOS应用开发 - iOS性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/model-view-viewmodel+%E5%8D%8F%E8%B0%83%E5%99%A8-mvvm-c/&#34;&gt;Model-View-ViewModel+协调器 (MVVM-C)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/model-view-controller-mvc/&#34;&gt;Model-View-Controller (MVC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/mvc-%E4%B8%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B1%82%E6%9E%B6%E6%9E%84/&#34;&gt;MVC 下的网络层架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《代码整洁之道》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些读书笔记基本上都是性能与架构方面的，因为自己想往精深方向发展，所以啃了这几本厚书。&lt;/p&gt;
&lt;p&gt;另外还学习了戴铭老师的 &lt;a href=&#34;https://time.geekbang.org/column/intro/161?code=PbktFs%2Fw7EHB9TJpCcw1bc9KoCR%2FYLnpUmqrB0uOruk%3D&#34;&gt;iOS开发高手课&lt;/a&gt;，很推荐，这里是我做的课堂笔记：&lt;a href=&#34;https://liupengkun1993.github.io/post/reading-notes/ios%E5%BC%80%E5%8F%91%E9%AB%98%E6%89%8B%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/&#34;&gt;《iOS开发高手课》学习笔记&lt;/a&gt;。戴铭老师的课程非常底层非常深入，我从这个课程里学习到了很多知识。&lt;/p&gt;
&lt;p&gt;另外我还使用 Swift 在 LeetCode 刷了 60 道算法题：&lt;a href=&#34;https://github.com/LiuPengKun1993/Algorithm&#34;&gt;Algorithm&lt;/a&gt;。最近刷算法的一些感悟：必须每道题都消化透了，达到能够手写算法的水平，不用刷的非常多，只要各种类型的都懂一些，搞明白算法逻辑就可以，类似数学题，一通百通。&lt;/p&gt;
&lt;p&gt;设计模式也是使用 Swift 练习了二十来个：&lt;a href=&#34;https://github.com/LiuPengKun1993/Design-Patterns&#34;&gt;设计模式（Design-Patterns）&lt;/a&gt;，这几乎是 iOS 业界常用的一些设计模式了。&lt;/p&gt;
&lt;p&gt;还有年初的时候计划用 Swift 写 30 个小项目，但后来因为一些原因（其实是因为懒）暂停了，只完成了 12 个，这里是项目地址：&lt;a href=&#34;https://github.com/LiuPengKun1993/Swift30&#34;&gt;Swift30&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;flutter&#34;&gt;Flutter&lt;/h3&gt;
&lt;p&gt;另外我还试着学习了 Flutter，Flutter 配置环境还是很简单的，这是我学习过程中总结的博客：&lt;a href=&#34;https://liupengkun1993.github.io/post/flutter/mac-%E9%85%8D%E7%BD%AE-flutter-%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C-ios-android-%E4%B8%A4%E7%AB%AF/&#34;&gt;Mac 配置 Flutter 环境，运行 iOS Android 两端&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;还试着写了两个简单的 Demo：&lt;a href=&#34;https://github.com/LiuPengKun1993/hello_flutter&#34;&gt;hello_flutter&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/LiuPengKun1993/flutter_shop&#34;&gt;flutter_shop&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/flutter_list.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;总体上 Flutter 给我的感觉还是很好的。比如它的优点：一份代码多处运行、性能接近原生、体验好等；但也有让我感觉不是很好的地方，比如：套娃式的代码嵌套、环境不稳定，有时需要执行 &lt;code&gt;source ~./zprofile&lt;/code&gt; 命令（这个只是我作为初级 Flutter 的使用感受，也许不对）。总之还是很看好 Flutter 的未来的，列出几个不错的 Flutter 学习资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flutter.io/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutterchina.club/&#34;&gt;Flutter 中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.flutterchina.club&#34;&gt;Flutter 实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cndartlang.com/&#34;&gt;Dart 语言中文论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里再多说一些关于跨平台开发，我们公司有几个项目使用的也是跨平台开发，但使用的方案是 &lt;code&gt;Cordova+Ionic+Angular&lt;/code&gt;，我个人不是很看好这种模式，业界用这种跨平台方案的公司也不多，但因为年初技术总监说要把 APP 接到我们部门来做，所以也简单学习了这种跨平台模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/cordova/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91-cordova+ionic+angular-%E5%88%9B%E5%BB%BA-ios-%E5%8F%8A%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE/&#34;&gt;混合开发 Cordova+Ionic+Angular 创建 iOS 及安卓项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/cordova/cordova-%E4%BD%BF%E7%94%A8-app-center-%E8%BF%9B%E8%A1%8C%E7%83%AD%E6%9B%B4%E6%96%B0/&#34;&gt;Cordova 使用 App Center 进行热更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体感觉不是很好，性能、体验、可查资料等各方面都落后于 Flutter 、RN 这些。&lt;/p&gt;
&lt;h3 id=&#34;js--vue--nodejs&#34;&gt;JS / Vue / Node.js&lt;/h3&gt;
&lt;p&gt;众所周知，大前端这个概念在业界早已普及了，每个移动端开发人员多多少少都会接触一些前端开发的知识，另外还有些前端人员也在学习移动端。比如我认识的一些 iOSer，他们很多都接触过一些前端领域的知识，有的是工作中用到的，有的是自己抽空学习的。还有我目前公司的前端开发，之前也一直想着学习 iOS。大前端必然是未来的一个重要走向，当然我们要学习的不只是前端，还包括后端等领域。&lt;/p&gt;
&lt;p&gt;在工作中，刚入职七天网络时我负责埋点 SDK 的开发工作，包括前端、移动端、后端，当然这些在 2019 年度就已经基本开发完毕了。只是偶尔需要维护，期间我总结了一些 JS/Node.js 相关的技术，简单记录了一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/js/js-%E8%A1%A8%E5%8D%95%E6%A0%BC%E5%BC%8F%E7%9B%B4%E4%BC%A0-oss/&#34;&gt;JS 表单格式直传 OSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/%E5%90%8E%E7%AB%AF/node.js-oss-%E5%90%8E%E7%AB%AF%E7%AD%BE%E5%90%8D/&#34;&gt;Node.js OSS 后端签名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外我在年初还基于 Node.js 实现了一些常见接口：&lt;a href=&#34;https://github.com/LiuPengKun1993/PracticeService&#34;&gt;PracticeService&lt;/a&gt;，算是对 Node.js 学习的巩固。&lt;/p&gt;
&lt;p&gt;除此之外我还学习了 Vue，使用 Vue 做了一个网站，代码放到了 GitHub：&lt;a href=&#34;https://github.com/LiuPengKun1993/vue_shop&#34;&gt;Vue实战项目：后台电商管理系统&lt;/a&gt;。主要使用的技术栈有：&lt;code&gt;Vue&lt;/code&gt;、&lt;code&gt;Vue-router&lt;/code&gt;、&lt;code&gt;Element-UI&lt;/code&gt;、&lt;code&gt;Axios&lt;/code&gt;、&lt;code&gt;Echarts&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/vue_shop01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;大数据&#34;&gt;大数据&lt;/h3&gt;
&lt;p&gt;接下来就说说大数据了，毕竟将近一年时间都在和数据开发打交道。iOS 开发和大数据开发这两个领域差别很大，我为什么会做大数据开发呢？去年的年终总结上有提到原因：&lt;a href=&#34;https://liupengkun1993.github.io/post/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/&#34;&gt;2019 年终总结&lt;/a&gt;。说到底还是因为“救火”，结果把自己送到了一片全新的领域了。&lt;/p&gt;
&lt;p&gt;当然做大数据开发也有好处，毕竟接触了新的技术领域，开拓了技术栈，涨了见识，对数据端认识的更清晰了。&lt;/p&gt;
&lt;p&gt;接着说说我在大数据开发中主要负责的工作。&lt;/p&gt;
&lt;p&gt;因为数据部门前期人员较少，所以我一个人负责埋点项目的所有层的数据开发，包括 ODS、DWD、DWS、ADS 这四层，目前埋点项目稳定运行，涵盖了公司十几个项目，每天新增的数据量有上千万条，高峰时期一天的数据量将近 8000 万。&lt;/p&gt;
&lt;p&gt;后来随着业务的扩展，帮忙招了几个数据开发，另外随着埋点项目的日益稳定，我逐渐很少再关注埋点相关的数据开发，开始转向业务数据、数仓分层设计、数据建模、探索新技术等，并根据当时使用的技术栈做了简单的记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%86%9B%E8%A7%84/&#34;&gt;MySQL 数据库开发军规&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/datax-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/&#34;&gt;DataX 的配置及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/hive-%E8%B0%83%E4%BC%98-hive.fetch.task.conversion/&#34;&gt;HIVE 调优—— hive.fetch.task.conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/%E6%B5%85%E8%B0%88-hive-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/&#34;&gt;浅谈 Hive 性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/&#34;&gt;数据仓库建模——维度建模&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/maxcompute-%E8%87%AA%E5%AE%9A%E4%B9%89-java-udf/&#34;&gt;MaxCompute 自定义 Java UDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/dataworks-%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/&#34;&gt;DataWorks 错误汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/canal-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/&#34;&gt;Canal 问题汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/quickbi-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/&#34;&gt;QuickBI 问题汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liupengkun1993.github.io/post/bigdata/fluentd-%E8%AF%BB%E5%86%99-oss/&#34;&gt;Fluentd 读写 OSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实做数据开发，很多时候都是在写 Hive，数据建模数仓分层这些就类似于 iOS 里面的设计模式，一旦定好规则，很多时候还是写代码，写脚本，所以数据开发者很多时候自嘲是 SQLBoy。&lt;/p&gt;
&lt;p&gt;关于这将近一年的数据开发，以前的我肯定想不到自己会有这样的际遇，很感谢公司给与这样的机会。但我还是想回归 iOS，大数据的同事说数据职位工资高，我深入思考过，大数据的技术栈我懂的并不多，目前我的大数据技术只能满足于公司日常工作，而且做大数据几乎是抛弃了自己积累了几年的大前端经验（大数据领域很少能用到大前端技术栈）。因此考虑再三，我还是决定回归 iOS。&lt;/p&gt;
&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;
&lt;h3 id=&#34;居家办公&#34;&gt;居家办公&lt;/h3&gt;
&lt;p&gt;年后担心北京封城，我和媳妇儿初五便往北京赶，紧接着开始屯面粉、米、油、以及各种能长期存放的蔬菜等，这期间也被动的学会了做各种“大餐”🤣。我们公司一直到五一假期之后的 05.06 号才结束远程办公，因此在家办公的这几个月一直在租的小屋里待着，只有晚上人少的时候才和媳妇儿一起去楼下跳跳绳，出来透透气。&lt;/p&gt;
&lt;h3 id=&#34;国庆节带爸妈北京游&#34;&gt;国庆节带爸妈北京游&lt;/h3&gt;
&lt;p&gt;国内的疫情控制的很好，入夏之后，出游人数逐日增多。想着来北京工作几年了，却还没带爸妈来北京玩过，就给他们买了高铁票，好说歹说把二老劝过来了。带爸妈以及小外甥去看了天安门、故宫、长城、动物园等地方，还带他们去吃了他们平时舍不得吃的各种“美食”。但也有一点遗憾，就是当时预约了毛主席纪念堂，但不知什么原因，网站上明明显示预约成功，现场扫二维码的时候却说我们没有预约上，很大一批游客都是这样，最后只能望而止步了，这里不得不吐槽毛主席纪念堂的预约网站。总体上还是很好的，毕竟爸妈第一次来北京，希望下一次能带他们去更远的地方去游玩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/2020/tiananmen.jpg&#34; alt=&#34;天安门升国旗 2020.10.06&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;阅读&#34;&gt;阅读&lt;/h3&gt;
&lt;p&gt;今年一共读了 19 本书，其中包括 6 本技术书籍，13 本非技术书籍。技术书籍一般都写了读书笔记，放在了博客里面；非技术书籍有些也写了读书心得，存在了个人的印象笔记里。下面列出 2020 书单（带✨越多越推荐）：&lt;/p&gt;
&lt;h4 id=&#34;技术书籍&#34;&gt;技术书籍&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;《高性能iOS应用开发》✨✨✨&lt;/li&gt;
&lt;li&gt;《App架构》✨&lt;/li&gt;
&lt;li&gt;《Docker-从入门到实践》✨&lt;/li&gt;
&lt;li&gt;《JavaScript 语言入门教程》✨&lt;/li&gt;
&lt;li&gt;《代码整洁之道》✨&lt;/li&gt;
&lt;li&gt;《Objective-C高级编程：iOS与OS X多线程和内存管理》✨✨&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;非技术书籍&#34;&gt;非技术书籍&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;《肖申克的救赎》✨&lt;/li&gt;
&lt;li&gt;《时间的玫瑰》✨✨✨&lt;/li&gt;
&lt;li&gt;《悟空传》✨&lt;/li&gt;
&lt;li&gt;《飞狐外传》✨&lt;/li&gt;
&lt;li&gt;《人间有味是清欢》✨&lt;/li&gt;
&lt;li&gt;《中央帝国的财政密码》 ✨✨✨&lt;/li&gt;
&lt;li&gt;《挪威的森林》&lt;/li&gt;
&lt;li&gt;《亲爱的安德烈》&lt;/li&gt;
&lt;li&gt;《显微镜下的大明》&lt;/li&gt;
&lt;li&gt;《中央帝国的军事密码》   ✨✨&lt;/li&gt;
&lt;li&gt;《富爸爸财富自由之路》   ✨✨&lt;/li&gt;
&lt;li&gt;《投资中最简单的事》 ✨✨&lt;/li&gt;
&lt;li&gt;《中国近代史》 ✨✨&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：有些不带✨或✨比较少的，并不完全代表作品不好，比如《挪威的森林》，我大学时候读过感觉不错，也曾向几位朋友推荐过，但如今再读就没有那么深的感触了。估计是不太合我现在的胃口了哈哈哈😆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;徒步爬山&#34;&gt;徒步爬山&lt;/h3&gt;
&lt;p&gt;我个人是比较喜欢徒步爬山的，去年定的是徒步爬山 6 次，但由于疫情原因，只出去了 2 次，其中还有一次无疾而终。因此真正上的徒步，今年只有 1 次。那就是 08 月 29 号，与媳妇儿一起走了京郊古道，全程 15.41 km。初级徒步，虽然很累，但感觉是很好的。&lt;/p&gt;
&lt;h3 id=&#34;健身&#34;&gt;健身&lt;/h3&gt;
&lt;p&gt;今年没怎么健身，身体素质完全是在吃老本。2021 要对这一指标进行加强。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;最后回顾一下 2020，展望一下 2021。&lt;/p&gt;
&lt;h3 id=&#34;回顾-2020&#34;&gt;回顾 2020&lt;/h3&gt;
&lt;p&gt;O1：技术&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KR&lt;/th&gt;
&lt;th&gt;完成进度&lt;/th&gt;
&lt;th&gt;总结&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6本技术书籍&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;算法&lt;/td&gt;
&lt;td&gt;80%&lt;/td&gt;
&lt;td&gt;截止最后一天，刷了 60 道 LeetCode 算法题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iOS 进阶&lt;/td&gt;
&lt;td&gt;80%&lt;/td&gt;
&lt;td&gt;三本 iOS 相关的书籍、学习戴铭老师的课程等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设计模式&lt;/td&gt;
&lt;td&gt;80%&lt;/td&gt;
&lt;td&gt;使用 Swift 练习了一些设计模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flutter&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;简单试用，目前水平应该能写简单项目，开发经验不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JS / Vue / Node.js&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;简单试用，目前水平应该能写简单项目，开发经验不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swift 30 个项目&lt;/td&gt;
&lt;td&gt;40%&lt;/td&gt;
&lt;td&gt;只写了 12 个，后来放弃了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;O2：生活&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KR&lt;/th&gt;
&lt;th&gt;完成进度&lt;/th&gt;
&lt;th&gt;总结&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;20本非技术书籍&lt;/td&gt;
&lt;td&gt;65%&lt;/td&gt;
&lt;td&gt;只读了13本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;带父母游北京&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;虽有小遗憾，但总体上还算不错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;徒步爬山&lt;/td&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;只走了 1.5 次，当时定的是 6 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;健身&lt;/td&gt;
&lt;td&gt;5%&lt;/td&gt;
&lt;td&gt;只记得奥森跑了两次，偶尔室内锻炼，总之今年很少锻炼&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;展望-2021&#34;&gt;展望 2021&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;KR1: 阅读 21 本书，其中 6 本技术书籍，15 本非技术书籍&lt;/li&gt;
&lt;li&gt;KR2: 输出 15 篇技术博客&lt;/li&gt;
&lt;li&gt;KR3: 跳槽回归 iOS&lt;/li&gt;
&lt;li&gt;KR4: LeetCode 刷算法 50+&lt;/li&gt;
&lt;li&gt;KR5: iOS 深入学习，研究至少两个三方库或苹果底层库&lt;/li&gt;
&lt;li&gt;KR6: GitHub Contributions 300+&lt;/li&gt;
&lt;li&gt;KR7: 跑步 200 km&lt;/li&gt;
&lt;li&gt;KR8: 爬山徒步 5 次&lt;/li&gt;
&lt;li&gt;KR9: 拍 1000 照片&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：目前能想到的计划只有这些，可能会有补充，也可能会做适当调整。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>DataX 的配置及使用</title>
      <link>https://liupengkun1993.github.io/post/bigdata/datax-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/datax-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;DataX 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括 MySQL、SQL Server、Oracle、PostgreSQL、HDFS、Hive、HBase、OTS、ODPS 等各种异构数据源之间高效的数据同步功能。&lt;/p&gt;
&lt;p&gt;其官网地址：&lt;a href=&#34;https://github.com/alibaba/DataX&#34;&gt;https://github.com/alibaba/DataX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;快速上手步骤&#34;&gt;快速上手步骤&lt;/h2&gt;
&lt;h3 id=&#34;1下载-datax&#34;&gt;1.下载 DataX&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/DataX#download-datax%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80&#34;&gt;DataX 下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2配置任务-json&#34;&gt;2.配置任务 Json&lt;/h3&gt;
&lt;p&gt;下载的 DataX 的目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/datax/datax2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置 &lt;code&gt;datax/job&lt;/code&gt; 文件夹下的 Json：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;job&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;reader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysqlreader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;remark&amp;#34;&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;jdbcUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8&amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;school_menu&amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;writer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysqlwriter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;remark&amp;#34;&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
                                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;school_test&amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;setting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;speed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;任务 Json 由三部分组成，分别是读，写和通用配置。&lt;/p&gt;
&lt;h4 id=&#34;reader-部分常用参数&#34;&gt;Reader 部分常用参数：&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;与要读取的数据库一致&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jdbcUrl&lt;/td&gt;
&lt;td&gt;数据库链接&lt;/td&gt;
&lt;td&gt;数组，会自动选择一个合法的链接，可以填写连接附件控制信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;username&lt;/td&gt;
&lt;td&gt;数据库用户名&lt;/td&gt;
&lt;td&gt;字符串，数据库的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;数据库密码&lt;/td&gt;
&lt;td&gt;字符串，数据库的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;要同步的表名&lt;/td&gt;
&lt;td&gt;数组，需保证表结构一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;td&gt;要同步的列名&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where&lt;/td&gt;
&lt;td&gt;选取的条件&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;querySql&lt;/td&gt;
&lt;td&gt;自定义查询语句&lt;/td&gt;
&lt;td&gt;会自动忽略上述的同步条件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;writer-部分常用参数&#34;&gt;Writer 部分常用参数：&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;与要读取的数据库一致&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jdbcUrl&lt;/td&gt;
&lt;td&gt;数据库链接&lt;/td&gt;
&lt;td&gt;字符串，可以填写连接附件控制信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;username&lt;/td&gt;
&lt;td&gt;数据库用户名&lt;/td&gt;
&lt;td&gt;字符串，数据库的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;数据库密码&lt;/td&gt;
&lt;td&gt;字符串，数据库的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;要同步的表名&lt;/td&gt;
&lt;td&gt;数组，需保证表结构一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;td&gt;列名可以不对应，但是类型和总的个数要一致&lt;/td&gt;
&lt;td&gt;数组，需保证表结构一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preSql&lt;/td&gt;
&lt;td&gt;写入前执行的语句&lt;/td&gt;
&lt;td&gt;数组，比如清空表等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postSql&lt;/td&gt;
&lt;td&gt;写入后执行的语句&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;writeMode&lt;/td&gt;
&lt;td&gt;写入方式，默认为insert&lt;/td&gt;
&lt;td&gt;insert/replace/update&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;job.setting.speed (流量控制)
&lt;ul&gt;
&lt;li&gt;Job 支持用户对速度的自定义控制，channel 的值可以控制同步时的并发数，byte 的值可以控制同步时的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;job.setting.errorLimit (脏数据控制)
&lt;ul&gt;
&lt;li&gt;Job 支持用户对于脏数据的自定义监控和告警，包括对脏数据最大记录数阈值（record 值）或者脏数据占比阈值（percentage 值），当 Job 传输过程出现的脏数据大于用户指定的数量/百分比，DataX Job 报错退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令行 cd 到 &lt;code&gt;datax/bin&lt;/code&gt; 目录下，执行 &lt;code&gt;python datax.py ../job/mysqltomysql.json&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/datax/datax0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后看到 school_test 表的数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/datax/datax1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;到此已经成功了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>MySQL 数据库开发军规</title>
      <link>https://liupengkun1993.github.io/post/bigdata/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%86%9B%E8%A7%84/</link>
      <pubDate>Sun, 27 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%86%9B%E8%A7%84/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;本篇记录的是 MySQL 数据库开发注意要点，是 [MySQL数据库开发的三十六条军规——石展@赶集]的学习笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;核心军规&#34;&gt;核心军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尽量不在数据库做运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂运算移到程序端CPU&lt;/li&gt;
&lt;li&gt;尽可能简单应用MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制单表数据量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一年内的单表数据量预估
&lt;ul&gt;
&lt;li&gt;纯INT不超1000W&lt;/li&gt;
&lt;li&gt;含CHAR不超500W&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建议单库不超过300-400个表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持表身段苗条&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表字段数少而精
&lt;ul&gt;
&lt;li&gt;IO高效&lt;/li&gt;
&lt;li&gt;全表遍历&lt;/li&gt;
&lt;li&gt;表修复快&lt;/li&gt;
&lt;li&gt;提高并发&lt;/li&gt;
&lt;li&gt;alter table 快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单表1G体积 500W行评估
&lt;ul&gt;
&lt;li&gt;顺序读1G文件需N秒&lt;/li&gt;
&lt;li&gt;单行不超过200Byte&lt;/li&gt;
&lt;li&gt;单表不超50个纯INT字段&lt;/li&gt;
&lt;li&gt;单表不超20个CHAR(10)字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单表字段数上限控制在20~50个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平衡范式与冗余&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格遵循三大范式&lt;/li&gt;
&lt;li&gt;效率优先、提升性能&lt;/li&gt;
&lt;li&gt;没有绝对的对与错&lt;/li&gt;
&lt;li&gt;适当时牺牲范式、加入冗余&lt;/li&gt;
&lt;li&gt;但会增加代码复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拒绝3B&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大SQL (BIG SQL)&lt;/li&gt;
&lt;li&gt;大事务 (BIG Transaction)&lt;/li&gt;
&lt;li&gt;大批量 (BIG Batch)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量不在数据库做运算&lt;/li&gt;
&lt;li&gt;控制单表数据量&lt;/li&gt;
&lt;li&gt;保持表身段苗条&lt;/li&gt;
&lt;li&gt;平衡范式与冗余&lt;/li&gt;
&lt;li&gt;拒绝3B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;字段类军规&#34;&gt;字段类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用好数值字段类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三类数值类型:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TINYINT(1Byte)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SMALLINT(2B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MEDIUMINT(3B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INT(4B)、BIGINT(8B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FLOAT(4B)、DOUBLE(8B)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECIMAL(M,D)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将字符转化为数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字型VS字符串型索引
&lt;ul&gt;
&lt;li&gt;更高效&lt;/li&gt;
&lt;li&gt;查询更快&lt;/li&gt;
&lt;li&gt;占用空间更小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例:用无符号INT存储IP，而非CHAR(15)
&lt;ul&gt;
&lt;li&gt;INT UNSIGNED&lt;/li&gt;
&lt;li&gt;INET_ATON()&lt;/li&gt;
&lt;li&gt;INET_NTOA()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先使用ENUM或SET&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优先使用ENUM或SET
&lt;ul&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;可能值已知且有限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储
&lt;ul&gt;
&lt;li&gt;ENUM占用1字节，转为数值运算&lt;/li&gt;
&lt;li&gt;SET视节点定，最多占用8字节&lt;/li&gt;
&lt;li&gt;比较时需要加‘单引号(即使是数值)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sex&lt;/code&gt; enum(&amp;lsquo;F&amp;rsquo;,&amp;lsquo;M&amp;rsquo;) COMMENT &amp;lsquo;性别&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1&lt;/code&gt; enum(&amp;lsquo;0&amp;rsquo;,&amp;lsquo;1&amp;rsquo;,&amp;lsquo;2&amp;rsquo;,&amp;lsquo;3&amp;rsquo;) COMMENT &amp;lsquo;职介审核&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免使用NULL字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用NULL字段
&lt;ul&gt;
&lt;li&gt;很难进行查询优化&lt;/li&gt;
&lt;li&gt;NULL列加索引，需要额外空间&lt;/li&gt;
&lt;li&gt;含NULL复合索引无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; int(10) NOT NULL DEFAULT 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;少用并拆分TEXT/BLOB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TEXT类型处理性能远低亍VARCHAR
&lt;ul&gt;
&lt;li&gt;强制生成硬盘临时表&lt;/li&gt;
&lt;li&gt;浪费更多空间&lt;/li&gt;
&lt;li&gt;VARCHAR(65535)==&amp;gt;64K (注意UTF-8)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不用TEXT/BLOB数据类型&lt;/li&gt;
&lt;li&gt;若必须使用则拆分到单独的表&lt;/li&gt;
&lt;li&gt;举例:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不在数据库里存图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字段类军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用好数值字段类型&lt;/li&gt;
&lt;li&gt;将字符转化为数字&lt;/li&gt;
&lt;li&gt;优先使用枚丼ENUM/SET&lt;/li&gt;
&lt;li&gt;避免使用NULL字段&lt;/li&gt;
&lt;li&gt;少用并拆分TEXT/BLOB&lt;/li&gt;
&lt;li&gt;不在数据库里存图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;索引类军规&#34;&gt;索引类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;谨慎合理添加索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谨慎合理添加索引
&lt;ul&gt;
&lt;li&gt;改善查询&lt;/li&gt;
&lt;li&gt;减慢更新&lt;/li&gt;
&lt;li&gt;索引不是越多越好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;能不加的索引尽量不加
&lt;ul&gt;
&lt;li&gt;综合评估数据密度和数据分布&lt;/li&gt;
&lt;li&gt;最好不超过字段数20%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符字段必须建前缀索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分度
&lt;ul&gt;
&lt;li&gt;单字母区分度:&lt;code&gt;26&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4字母区分度:&lt;code&gt;26*26*26*26=456,976&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;5字母区分度:&lt;code&gt;26*26*26*26*26=11,881,376&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6字母区分度:&lt;code&gt;26*26*26*26*26*26=308,915,776&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符字段必须建前缀索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinyin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;小区拼音&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx_pinyin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinyin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不在索引列做运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不在索引列进行数学运算或凼数运算
&lt;ul&gt;
&lt;li&gt;无法使用索引&lt;/li&gt;
&lt;li&gt;导致全表扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自增列或全局ID做INNODB主键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对主键建立聚簇索引&lt;/li&gt;
&lt;li&gt;二级索引存储主键值&lt;/li&gt;
&lt;li&gt;主键不应更新修改&lt;/li&gt;
&lt;li&gt;按自增顺序插入值&lt;/li&gt;
&lt;li&gt;忌用字符串做主键&lt;/li&gt;
&lt;li&gt;聚簇索引分裂&lt;/li&gt;
&lt;li&gt;推荐用独立于业务的AUTO_INCREMENT列或全局ID生成 器做代理主键&lt;/li&gt;
&lt;li&gt;若不指定主键，InnoDB会用唯一且非空值索引代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不用外键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线上OLTP系统(线下系统另论)
&lt;ul&gt;
&lt;li&gt;外键可节省开发量&lt;/li&gt;
&lt;li&gt;有额外开销&lt;/li&gt;
&lt;li&gt;逐行操作&lt;/li&gt;
&lt;li&gt;可‘到达’其它表，意味着锁&lt;/li&gt;
&lt;li&gt;高并发时容易死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引类军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谨慎合理添加索引&lt;/li&gt;
&lt;li&gt;字符字段必须建前缀索引&lt;/li&gt;
&lt;li&gt;不在索引列做运算&lt;/li&gt;
&lt;li&gt;自增列或全局ID做INNODB主键&lt;/li&gt;
&lt;li&gt;尽量不用外键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sql-类军规&#34;&gt;SQL 类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL语句尽可能简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大SQL VS 多个简单SQL
&lt;ul&gt;
&lt;li&gt;传统设计思想&lt;/li&gt;
&lt;li&gt;BUT MySQL NOT&lt;/li&gt;
&lt;li&gt;一条SQL叧能在一个CPU运算&lt;/li&gt;
&lt;li&gt;5000+ QPS的高并发中，1秒大SQL意味着?&lt;/li&gt;
&lt;li&gt;可能一条大SQL就把整个数据库堵死&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拒绝大SQL，拆解成多条简单SQL
&lt;ul&gt;
&lt;li&gt;简单SQL缓存命中率更高&lt;/li&gt;
&lt;li&gt;减少锁表时间，特别是MyISAM&lt;/li&gt;
&lt;li&gt;用上多CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持事务(连接)短小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持事务/DB连接短小精悍
&lt;ul&gt;
&lt;li&gt;事务/连接使用原则:即开即用，用完即关&lt;/li&gt;
&lt;li&gt;不事务无关操作放到事务外面, 减少锁资源的占用&lt;/li&gt;
&lt;li&gt;不破坏一致性前提下，使用多个短事务代替长事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;发贴时的图片上传等待&lt;/li&gt;
&lt;li&gt;大量的sleep连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽可能避免使用SP/TRIG/FUNC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线上OLTP系统(线下库另论)
&lt;ul&gt;
&lt;li&gt;尽可能少用存储过程&lt;/li&gt;
&lt;li&gt;尽可能少用触发器&lt;/li&gt;
&lt;li&gt;减用使用MySQL凼数对结果进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不用 SELECT *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用SELECT * 时
&lt;ul&gt;
&lt;li&gt;更多消耗CPU、内存、IO、网络带宽&lt;/li&gt;
&lt;li&gt;先向数据库请求所有列，然后丢掉丌需要列?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不用SELECT * ，叧取需要数据列
&lt;ul&gt;
&lt;li&gt;更安全的设计:减少表变化带来的影响&lt;/li&gt;
&lt;li&gt;为使用covering index提供可能性&lt;/li&gt;
&lt;li&gt;Select/JOIN减少硬盘临时表生成，特别是有TEXT/BLOB时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;SELECT * FROM tag WHERE id = 999184&lt;/li&gt;
&lt;li&gt;⬇️&lt;/li&gt;
&lt;li&gt;SELECT keyword FROM tag WHERE id = 999184&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改写OR为IN()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一字段，将or改写为in()
&lt;ul&gt;
&lt;li&gt;OR效率:O(n)&lt;/li&gt;
&lt;li&gt;IN 效率:O(Log n)&lt;/li&gt;
&lt;li&gt;当n很大时，OR会慢很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意控制IN的个数，建议n小于200&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12347856&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; or phone=‘42242233&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;G&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;12347856&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;42242233&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;改写OR为UNION
&lt;ul&gt;
&lt;li&gt;不同字段，将or改为union
&lt;ul&gt;
&lt;li&gt;减少对丌同字段进行 &amp;ldquo;or&amp;rdquo; 查询&lt;/li&gt;
&lt;li&gt;Merge index往往很弱智&lt;/li&gt;
&lt;li&gt;如果有足够信心:&lt;code&gt;set global optimizer_switch=&#39;index_merge=off&#39;&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;010-88886666&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellPhone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;13800138000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	
&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;010-88886666&amp;#39;&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cellPhone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;13800138000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;避免负向查询和% 前缀模糊查询
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免负向查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOT、!=、&amp;lt;&amp;gt;、!&amp;lt;、!&amp;gt;、NOT EXISTS、NOT IN、 NOT LIKE等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免 % 前缀模糊查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+ Tree&lt;/li&gt;
&lt;li&gt;使用不了索引&lt;/li&gt;
&lt;li&gt;导致全表扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘北京&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; ;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;298 rows in set (0.01 sec)
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;MySQL&amp;gt; select * from post WHERE title like &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;北京&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; ; 
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;572 rows in set (3.27 sec)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;减少COUNT(*)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM VS INNODB
&lt;ul&gt;
&lt;li&gt;不带 WHERE COUNT()&lt;/li&gt;
&lt;li&gt;带 WHERE COUNT()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COUNT(*)的资源开销大，尽量不用或少用&lt;/li&gt;
&lt;li&gt;计数统计
&lt;ul&gt;
&lt;li&gt;实时统计:用memcache，双向更新，凌晨跑基准&lt;/li&gt;
&lt;li&gt;非实时统计:尽量用单独统计表，定期重算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LIMIT高效分页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统分页:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select * from table limit 10000,10;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LIMIT原理:
&lt;ul&gt;
&lt;li&gt;Limit 10000,10&lt;/li&gt;
&lt;li&gt;偏移量越大则越慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐分页:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select * from table WHERE id&amp;gt;=23423 limit 11;#10+1 (每页10条)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select * from table WHERE id&amp;gt;=23434 limit 11;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LIMIT的高效分页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分页方式二:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Select * from table WHERE id &amp;gt;= ( select id from table limit 10000,1 ) limit 10;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分页方式三:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT * FROM table INNER JOIN (SELECT id FROM table LIMIT 10000,10) USING (id) ;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分页方式四:
&lt;ul&gt;
&lt;li&gt;程序取ID:&lt;code&gt;select id from table limit 10000,10&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Select * from table WHERE id in (123,456...) &lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;58&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;323423&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql_no_cache&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用UNION ALL 而非 UNION
&lt;ul&gt;
&lt;li&gt;若无需对结果进行去重，则用UNION ALL
&lt;ul&gt;
&lt;li&gt;UNION有去重开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20091128&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110427&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110426&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110425&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110424&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detail20110423&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;分解联接保证高并发
&lt;ul&gt;
&lt;li&gt;高并发DB不建议进行两个表以上的JOIN&lt;/li&gt;
&lt;li&gt;适当分解联接保证高并发
&lt;ul&gt;
&lt;li&gt;可缓存大量早期数据&lt;/li&gt;
&lt;li&gt;使用了多个MyISAM表&lt;/li&gt;
&lt;li&gt;对大表的小ID IN()&lt;/li&gt;
&lt;li&gt;联接引用同一个表多次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;‘二手玩具’&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;‘二手玩具’&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1321&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;314&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;141&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;GROUP BY 去除排序
&lt;ul&gt;
&lt;li&gt;GROUP BY 实现
&lt;ul&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;自动排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无需排序:Order by NULL&lt;/li&gt;
&lt;li&gt;特定排序:Group by DESC/ASC&lt;/li&gt;
&lt;li&gt;举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同数据类型的列值比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原则:数字对数字，字符对字符&lt;/li&gt;
&lt;li&gt;数值列不字符类型比较
&lt;ul&gt;
&lt;li&gt;同时转换为双精度&lt;/li&gt;
&lt;li&gt;进行比对&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符列不数值类型比较
&lt;ul&gt;
&lt;li&gt;字符列整列转数值&lt;/li&gt;
&lt;li&gt;不会使用索引查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同数据类型的列值比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例:字符列不数值类型比较&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;err&#34;&gt;字段&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;备注, 默认为空&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gift_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gift&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deal_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;640&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;115127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gift_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_gift&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deal_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;640&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remark&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;115127&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;005&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Load data 导数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量数据快导入:
&lt;ul&gt;
&lt;li&gt;成批装载比单行装载更快，丌需要每次刷新缓存&lt;/li&gt;
&lt;li&gt;无索引时装载比索引装载更快&lt;/li&gt;
&lt;li&gt;Insert values ,values，values 减少索引刷新&lt;/li&gt;
&lt;li&gt;Load data比insert快约20倍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不用 INSERT &amp;hellip; SELECT
&lt;ul&gt;
&lt;li&gt;延迟&lt;/li&gt;
&lt;li&gt;同步出错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打散大批量更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大批量更新凌晨操作，避开高峰&lt;/li&gt;
&lt;li&gt;凌晨不限制，白天上限默认为100条/秒(特殊再议)&lt;/li&gt;
&lt;li&gt;举例：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SQL类军规小结
&lt;ul&gt;
&lt;li&gt;SQL语句尽可能简单&lt;/li&gt;
&lt;li&gt;保持事务(连接)短小&lt;/li&gt;
&lt;li&gt;尽可能避免使用SP/TRIG/FUNC&lt;/li&gt;
&lt;li&gt;尽量不用 SELECT *&lt;/li&gt;
&lt;li&gt;改写OR语句&lt;/li&gt;
&lt;li&gt;避免负向查询和% 前缀模糊查询&lt;/li&gt;
&lt;li&gt;减少COUNT(*)&lt;/li&gt;
&lt;li&gt;LIMIT的高效分页&lt;/li&gt;
&lt;li&gt;用UNION ALL 而非 UNION&lt;/li&gt;
&lt;li&gt;分解联接保证高并发&lt;/li&gt;
&lt;li&gt;GROUP BY 去除排序&lt;/li&gt;
&lt;li&gt;同数据类型的列值比较&lt;/li&gt;
&lt;li&gt;Load data导数据&lt;/li&gt;
&lt;li&gt;打散大批量更新&lt;/li&gt;
&lt;li&gt;Know Every SQL!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;约定类军规&#34;&gt;约定类军规&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;隔离线上线下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建数据库的生态环境
&lt;ul&gt;
&lt;li&gt;开发无线上库操作权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原则:线上连线上，线下连线下
&lt;ul&gt;
&lt;li&gt;实时数据用real库&lt;/li&gt;
&lt;li&gt;模拟环境用sim库&lt;/li&gt;
&lt;li&gt;测试用qa库&lt;/li&gt;
&lt;li&gt;开发用dev库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁止未经DBA确认的子查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL子查询
&lt;ul&gt;
&lt;li&gt;大部分情况优化较差&lt;/li&gt;
&lt;li&gt;特别WHERE中使用IN id的子查询&lt;/li&gt;
&lt;li&gt;一般可用JOIN改写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;永远不在程序端显式加锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;永远不在程序端对数据库显式加锁
&lt;ul&gt;
&lt;li&gt;外部锁对数据库不可控&lt;/li&gt;
&lt;li&gt;高并发时是灾难&lt;/li&gt;
&lt;li&gt;极难调试和排查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并发扣款等一致性问题
&lt;ul&gt;
&lt;li&gt;采用事务&lt;/li&gt;
&lt;li&gt;相对值修改&lt;/li&gt;
&lt;li&gt;Commit前二次较验冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一字符集为UTF8&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集:&lt;/li&gt;
&lt;li&gt;MySQL 4.1 以前叧有latin1&lt;/li&gt;
&lt;li&gt;为多语言支持增加多字符集&lt;/li&gt;
&lt;li&gt;也带来了N多问题&lt;/li&gt;
&lt;li&gt;保持简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一命名规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;库表等名称统一用小写
&lt;ul&gt;
&lt;li&gt;Linux VS Windows&lt;/li&gt;
&lt;li&gt;MySQL库表大小写敏感&lt;/li&gt;
&lt;li&gt;字段名的大小写不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引命名默认为“idx_字段名”&lt;/li&gt;
&lt;li&gt;库名用缩写，尽量在2~7个字母
&lt;ul&gt;
&lt;li&gt;DataSharing ==&amp;gt; ds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意避免用保留字命名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;约定类军规小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离线上线下&lt;/li&gt;
&lt;li&gt;禁止未经DBA确认的子查询上线&lt;/li&gt;
&lt;li&gt;永远不在程序端显式加锁&lt;/li&gt;
&lt;li&gt;统一字符集为UTF8&lt;/li&gt;
&lt;li&gt;统一命名规范&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>HIVE 调优—— hive.fetch.task.conversion</title>
      <link>https://liupengkun1993.github.io/post/bigdata/hive-%E8%B0%83%E4%BC%98-hive.fetch.task.conversion/</link>
      <pubDate>Sun, 20 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/hive-%E8%B0%83%E4%BC%98-hive.fetch.task.conversion/</guid>
      
        <description>&lt;p&gt;Fetch 抓取是指，Hive 中对某些情况的查询可以不必使用 MapReduce 计算。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;启用 MapReduce Job 是会消耗系统开销的。对于这个问题，从 Hive0.10.0 版本开始，对于简单的不需要聚合的类似 &lt;code&gt;select &amp;lt;col&amp;gt; from &amp;lt;table&amp;gt; limit n&lt;/code&gt;语句，不需要起 MapReduce job，直接通过 Fetch task 获取数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如：&lt;code&gt;select * from user_table;&lt;/code&gt;在这种情况下，Hive 可以简单地读取 user_table 对应的存储目录下的文件，然后输出查询结果到控制台。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;hive-default.xml.template&lt;/code&gt; 文件中&lt;code&gt;hive.fetch.task.conversion&lt;/code&gt;默认是 more，老版本 hive 默认是 minimal，该属性修改为 more 以后，在全局查找、字段查找、limit 查找等都不走 MapReduce。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;hive.fetch.task.conversion&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;more&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      Expects one of [none, minimal, more].
      Some select queries can be converted to single FETCH task minimizing latency.
      Currently the query should be single sourced not having any subquery and should not have
      any aggregations or distincts (which incurs RS), lateral views and joins.
      &lt;span class=&#34;k&#34;&gt;0.&lt;/span&gt; none : disable hive.fetch.task.conversion
      &lt;span class=&#34;k&#34;&gt;1.&lt;/span&gt; minimal : SELECT STAR, FILTER on partition columns, LIMIT only
      &lt;span class=&#34;k&#34;&gt;2.&lt;/span&gt; more  : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1）把hive.fetch.task.conversion设置成none，然后执行查询语句，都会执行mapreduce程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;conversion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;taken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;203&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fetched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2）把hive.fetch.task.conversion设置成more，然后执行查询语句，如下查询方式都不会执行mapreduce程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;conversion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;more&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;taken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;09&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fetched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Java 实现 RSA 加密解密</title>
      <link>https://liupengkun1993.github.io/post/bigdata/java-%E5%AE%9E%E7%8E%B0-rsa-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/java-%E5%AE%9E%E7%8E%B0-rsa-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</guid>
      
        <description>&lt;p&gt;RSA 加密在编程中很常见，iOS 安卓要用，Java 也要用，最近因为大数据的项目要用到，就写了一份，这里备份一下，也希望能帮到要用的朋友们。&lt;/p&gt;
&lt;p&gt;以下是整体代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;98
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.commons.codec.binary.Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.crypto.Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.interfaces.RSAPublicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.spec.PKCS8EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.spec.X509EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Hello RSA!
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RSAUtils&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//生成公钥和私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;getKeyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//加密字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;liupengkun&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;随机生成的公钥为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;随机生成的私钥为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwordEn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\t加密后的字符串为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordEn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwordDe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordEn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;还原后的字符串为：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordDe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * 随机生成密钥对
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws NoSuchAlgorithmException
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getKeyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//KeyPairGenerator类用于生成公钥和密钥对，基于RSA算法生成对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;KeyPairGenerator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPairGen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyPairGenerator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//初始化密钥对生成器，密钥大小为96-1024位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;keyPairGen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//生成一个密钥对，保存在keyPair中
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;KeyPair&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPair&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPairGen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generateKeyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;PrivateKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPrivate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//得到私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;PublicKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keyPair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPublic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//得到公钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//得到公钥字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;publicKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEncoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//得到私钥字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privateKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEncoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//将公钥和私钥保存到Map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publicKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//0表示公钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;keyMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privateKeyString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//1表示私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * RSA公钥加密
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param str
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            加密字符串
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param publicKey
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            公钥
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @return 密文
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws Exception
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *             加密过程中的异常信息
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//base64编码的公钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;RSAPublicKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RSAPublicKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generatePublic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//RAS加密
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ENCRYPT_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encodeBase64String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doFinal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * RSA私钥解密
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param str
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            加密字符串
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @param privateKey
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *            私钥
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @return 铭文
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws Exception
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     *             解密过程中的异常信息
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Base64解码加密后的字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Base64编码的私钥
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decodeBase64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;PrivateKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generatePrivate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PKCS8EncodedKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//RSA解密
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DECRYPT_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doFinal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputByte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outStr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在程序中，我们首先利用 &lt;code&gt;getKeyPair()&lt;/code&gt; 函数生成公钥和私钥并将其保存到 Map 集合中。然后，基于产生的公钥对明文进行加密。针对已经已经加密的密文，我们再次使用私钥解密，得到明文。
上述程序的输出结果为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;随机生成的公钥为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QkIaMuogm99lcRjV1xT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AuTHlgIT65svpG8MrPnfjApnkQAdT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VwubdU9ULwVthc6GLuXORxakN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Odd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jd8WY2IJMVttkYR1mhAZQkx9AU2frNbq97gS9menvL7pQk2ji42Sl1gcZ7tY5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XXGN7EYS52&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JGdgfuxGoWNMQwIDAQAB&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;随机生成的私钥为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKz5CQhoy6iCb32VxGNXXFP4C5MeWAhPrmy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kbwys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MCmeRAB1P75XC5t1T1QvBW2FzoYu5c5HFqQ385137&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N3xZjYgkxW22RhHWaEBlCTH0BTZ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1ur3uBL2Z6e8vulCTaOLjZKXWBxnu1jn5dcY3sRhLnb4kZ2B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;7EahY0xDAgMBAAECgYAMAD9LMRIoP9yCZxi4F8CVJtmOvIU5FmYwr0wnNZFb11p6GLv5GClzCFEK2SnG2nhS7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yzPJ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HxmIDUW&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wCqJjXtoMwBicELk43pNW0QAHAlSytIm13jPsEhNvauDwBpUGqATISwv9DjEf6O1BxrgR5nKpiIpR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QWYlrg8phXOQJBANPhkA6g2Hlvr93BVnhUeSfrTtbwPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rEIgmEMb6nvnEyOT2sVqr6mw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs1Byrw0p6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rAESxrwO5Mp2O5tv8B20CQQDQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XGncq8dBZ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MW2V6eYT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AtvNX&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//hKGYAz2qPMMR+W4kXb+YiH6SWnTH2f4JkY43BRxt3MlsDxv0nudwAG+RvAkB7+dC77nub2rER1U3OTMczh2jzNVBlBsr+jx9j/kNFLFLMPliaEFuziJ3pdiS1KS4xCKK4jyszx4qJTJNihr6lAkEAz60bFN/FHhzpaEumcudw/g4PKG4eUzuW6XU0GejHSh1iBPVAhmZVYwoAjUg2ZdX8FrW3mGJkyUMjbCeodD9DZwJAdBgcQC+8tzkzwct45EmAQWFMNHLvq3TKdDxr+QluIER1SKjjae8ob+JyI89S8AFJE8IobraVtJ4wTfAt0ZIIMw==
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;liupengkun&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;加密后的字符串为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EUz2Goo0m5mNk0al87dsrcqIuzIzNAEvzTBJOXUOiujubJgqVPmsM880aahLbKrNjl5ArJPtguznJ9PruwSBUnGoPpAMetHp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;23RBkXB2DwAA200qejLyKt1PkeTLJjDrQVhohlsF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K48TaGpTSfDMoPli3E6eTdS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dk1Xib4SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;还原后的字符串为&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;liupengkun&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>MaxCompute 自定义 Java UDF</title>
      <link>https://liupengkun1993.github.io/post/bigdata/maxcompute-%E8%87%AA%E5%AE%9A%E4%B9%89-java-udf/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/maxcompute-%E8%87%AA%E5%AE%9A%E4%B9%89-java-udf/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;公司大数据开发使用的是阿里云的 MaxCompute，MaxCompute 自身提供了很多 Hive SQL 函数，能够满足大部分需求，但是总有一些 Hive SQL 函数无法满足的需求，比如 base64 编解码等等，目前 MaxCompute 内部是没有相关函数的。解决办法是用户自定义函数，MaxCompute 提供了相关的文档，具体可以看 &lt;a href=&#34;https://help.aliyun.com/document_detail/27866.html?spm=a2c4g.11186623.6.722.79fd612dqYS0p2&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇文章主要记录使用 Java 来自定义函数。&lt;/p&gt;
&lt;h2 id=&#34;1-idea-里新建项目&#34;&gt;1. IDEA 里新建项目&lt;/h2&gt;
&lt;p&gt;在 IDEA 里新建一个项目，并创建一个 class 文件，命名为 data_mask。&lt;/p&gt;
&lt;h2 id=&#34;2-添加-odps-依赖&#34;&gt;2. 添加 odps 依赖&lt;/h2&gt;
&lt;p&gt;在 pom 文件添加 odps 依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;aliyun&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;odps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;odps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sdk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;udf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3-编写代码&#34;&gt;3. 编写代码&lt;/h2&gt;
&lt;p&gt;在类文件里编写代码（data_mask 要继承自 阿里云的 UDF）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.data_mask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 阿里云 UDF
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.aliyun.odps.udf.UDF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;data_mask&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UDF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

     &lt;span class=&#34;c1&#34;&gt;// 创建 evaluate 方法，与 HIVE 一样，MaxCompute 的 UDF 通常使用 evaluate 方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;UDF&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;4导出-jar-包&#34;&gt;4.导出 JAR 包&lt;/h2&gt;
&lt;p&gt;此时 Java UDF 函数已自定义完毕，接着需要在 MaxCompute 的资源函数里添加 JAR 包。&lt;/p&gt;
&lt;h2 id=&#34;5-新建资源&#34;&gt;5. 新建资源&lt;/h2&gt;
&lt;p&gt;在 MaxCompute 里新建资源，并把刚刚导出的 JAR 包导入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-注册函数&#34;&gt;6. 注册函数&lt;/h2&gt;
&lt;p&gt;在 MaxCompute 里注册函数，类名里面填写 package 以及类名，资源列表里填写刚刚导入的 JAR 包名称。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7提交发布&#34;&gt;7.提交发布&lt;/h2&gt;
&lt;p&gt;将刚刚创建的资源和函数都提交，并发布。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发布成功之后就可以直接调用了，直接根据定义的函数名称调用即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/maxcompute/maxcompute04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/27867.html?spm=a2c4g.11186623.6.723.1ccd612dbrlNl7&#34;&gt;Java UDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/101960.html?spm=a2c4g.11186623.6.732.293f34d8YKI6IT&#34;&gt;JSON字符串获取示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>数据仓库建模——维度建模</title>
      <link>https://liupengkun1993.github.io/post/bigdata/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;数据仓库的建模方法有很多种，常见的有维度建模法、范式建模法、实体建模法等，下面主要介绍一下维度建模法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;维度建模的基本概念&#34;&gt;维度建模的基本概念&lt;/h2&gt;
&lt;p&gt;维度建模(dimensional modeling)是专门用于分析型数据库、数据仓库、数据集市建模的方法。它本身属于一种关系建模方法，但和关系建模方法相比增加了两个概念：&lt;/p&gt;
&lt;h3 id=&#34;维度表dimension&#34;&gt;维度表(dimension)&lt;/h3&gt;
&lt;p&gt;表示对分析主题所属类型的描述。比如&amp;quot;昨天下午郑州外国语学校8年级3班王小明同学花费了99元购买了一套课程&amp;quot;。那么我们以购买为主题进行分析，可从这段信息中提取三个维度：时间维度(昨天下午)，地点维度(郑州外国语学校), 商品维度(课程)。通常来说维度表信息比较固定，且数据量小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维度表类型
&lt;ul&gt;
&lt;li&gt;日期维
&lt;ul&gt;
&lt;li&gt;数据仓库必须有的维度，包含日期，日期所属的周，月，季度，年等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;角色维
&lt;ul&gt;
&lt;li&gt;相同的维度表在维度模型中扮演不中的逻辑角色，一般通过创建视图来表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支架维
&lt;ul&gt;
&lt;li&gt;如果维度之间是一对多的关系或区别于原维度的多个描述性维度属性，可以建雪花型支架维度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多值维度桥接维
&lt;ul&gt;
&lt;li&gt;如果二个维度表是多对多的关系，可以使用多值维度设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;微型维
&lt;ul&gt;
&lt;li&gt;一个大型维有些属性变化比较频繁，把这些属性单独生成一个微型维度表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缩小维
&lt;ul&gt;
&lt;li&gt;维度表的一个子集或部分属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;层次维
&lt;ul&gt;
&lt;li&gt;有些维度表是有层次结构的，可以通过视图生成树形结构的维度表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事实表fact-table&#34;&gt;事实表(fact table)&lt;/h3&gt;
&lt;p&gt;表示对分析主题的度量。比如上面那个例子中，99元就是事实信息。事实表包含了与各维度表相关联的外码，并通过 JOIN 方式与维度表关联。事实表的度量通常是数值类型，且记录数会不断增加，表规模迅速增长。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事实表类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务事实表
&lt;ul&gt;
&lt;li&gt;它是面向事务的，其粒度是每一行对应一个事务，它是最细粒度的事实表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;周期快照事实表
&lt;ul&gt;
&lt;li&gt;它是按照良好的时间周期间隔(每天，每月)来捕捉业务活动的执行情况，一旦装入事实表就不会再去更新，它是事务事实表的补充，而非替代品。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;累积快照事实表
&lt;ul&gt;
&lt;li&gt;它用于描述业务过程中某个不确定时间跨度里的活动，它随着业务活动的发生会不断的更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三种事实表类型之间的区别：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;事务事实表&lt;/th&gt;
&lt;th&gt;周期快照事实表&lt;/th&gt;
&lt;th&gt;累积快照事实表&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;代表的时间段&lt;/td&gt;
&lt;td&gt;时间点&lt;/td&gt;
&lt;td&gt;规律可预见间隔&lt;/td&gt;
&lt;td&gt;不确定时间跨度，一般是短期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;粒度&lt;/td&gt;
&lt;td&gt;每个事件事务一行&lt;/td&gt;
&lt;td&gt;每段时间一行&lt;/td&gt;
&lt;td&gt;每个生命周期一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事实表加载&lt;/td&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;td&gt;插入与更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事实表更新&lt;/td&gt;
&lt;td&gt;不重新加载&lt;/td&gt;
&lt;td&gt;不重新加载&lt;/td&gt;
&lt;td&gt;重新加载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日期维度&lt;/td&gt;
&lt;td&gt;事务日期&lt;/td&gt;
&lt;td&gt;时间段终止日期&lt;/td&gt;
&lt;td&gt;标准关键环节的多个日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事实&lt;/td&gt;
&lt;td&gt;事务活动&lt;/td&gt;
&lt;td&gt;预定时间间隔的性能&lt;/td&gt;
&lt;td&gt;给定生命周期的性能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;维度建模优点&#34;&gt;维度建模优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;便于理解&lt;/li&gt;
&lt;li&gt;提高查询性能&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;维度建模的三种模式&#34;&gt;维度建模的三种模式&lt;/h2&gt;
&lt;h3 id=&#34;星形模式&#34;&gt;星形模式&lt;/h3&gt;
&lt;p&gt;星形模式(Star Schema)是最常用的维度建模方式，下图展示了使用星形模式进行维度建模的关系结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/model/model01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出，星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维表只和事实表关联，维表之间没有关联；&lt;/li&gt;
&lt;li&gt;每个维表的主码为单列，且该主码放置在事实表中，作为两边连接的外码；&lt;/li&gt;
&lt;li&gt;以事实表为核心，维表围绕核心呈星形分布；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;雪花模式&#34;&gt;雪花模式&lt;/h3&gt;
&lt;p&gt;雪花模式(Snowflake Schema)是对星形模式的扩展，每个维表可继续向外连接多个子维表。下图为使用雪花模式进行维度建模的关系结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/model/model02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;星形模式中的维表相对雪花模式来说要大，而且不满足规范化设计。雪花模型相当于将星形模式的大维表拆分成小维表，满足了规范化设计。然而这种模式在实际应用中很少见，因为这样做会导致开发难度增大，而数据冗余问题在数据仓库里并不严重。&lt;/p&gt;
&lt;h3 id=&#34;星座模式&#34;&gt;星座模式&lt;/h3&gt;
&lt;p&gt;星座模式(Fact Constellations Schema)也是星型模式的扩展。基于这种思想就有了星座模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/model/model03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅谈 Hive 性能优化</title>
      <link>https://liupengkun1993.github.io/post/bigdata/%E6%B5%85%E8%B0%88-hive-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 19 Sep 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/%E6%B5%85%E8%B0%88-hive-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;总结了 Hive 的常用优化手段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;列裁剪及分区裁剪&#34;&gt;列裁剪及分区裁剪&lt;/h3&gt;
&lt;p&gt;这是最基本的操作。所谓列裁剪就是在查询时只读取需要的列，分区裁剪就是只读取需要的分区。&lt;/p&gt;
&lt;p&gt;比如当列很多或者数据量很大时，如果使用 &lt;code&gt;select * from order_table;&lt;/code&gt; 或者不指定分区，全列扫描和全表扫描效率都很低。&lt;/p&gt;
&lt;p&gt;这个时候我们可以指定列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或者当这个表是分区表的时候，指定分区：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Hive 中与列裁剪优化相关的配置项是&lt;code&gt;hive.optimize.cp&lt;/code&gt;，与分区裁剪优化相关的则是&lt;code&gt;hive.optimize.pruner&lt;/code&gt;，默认都是true。&lt;/p&gt;
&lt;h3 id=&#34;谓词下推&#34;&gt;谓词下推&lt;/h3&gt;
&lt;p&gt;在关系型数据库如 MySQL 中，也有谓词下推（Predicate Pushdown，PPD）的概念。就是将 SQL 语句中的 where 谓词逻辑都尽可能提前执行，减少下游处理的数据量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对 order_table 做过滤的 where 语句写在子查询内部，而不是外部。Hive 中有谓词下推优化的配置项&lt;code&gt;hive.optimize.ppd&lt;/code&gt;，默认值true，与它对应的逻辑优化器是 PredicatePushDown。该优化器就是将 OperatorTree 中的 FilterOperator 向上提。&lt;/p&gt;
&lt;h3 id=&#34;sort-by-代替-order-by&#34;&gt;sort by 代替 order by&lt;/h3&gt;
&lt;p&gt;HiveSQL 中的 order by 与其他 SQL 方言中的功能一样，就是将结果按某字段全局排序，这会导致所有 map 端数据都进入一个 reducer 中，在数据量大时可能会长时间计算不完。&lt;/p&gt;
&lt;p&gt;如果使用 sort by，那么还是会视情况启动多个 reducer 进行排序，并且保证每个 reducer 内局部有序。为了控制 map 端数据分配到 reducer 的 key，往往还要配合 distribute by 一同使用。如果不加 distribute by 的话，map 端数据就会随机分配到 reducer。&lt;/p&gt;
&lt;p&gt;举个例子，假如要以 uid 为 key，以订单时间倒序、订单金额倒序输出记录数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;distribute&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;order_time&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;group-by-代替-distinct&#34;&gt;group by 代替 distinct&lt;/h3&gt;
&lt;p&gt;数据量较大的情况下，慎用count(distinct)，count(distinct)容易产生倾斜问题&lt;/p&gt;
&lt;p&gt;当要统计某一列的去重数时，如果数据量很大，count(distinct) 就会非常慢，原因与 order by 类似，count(distinct) 逻辑只会有很少的 reducer 来处理。这时可以用 group by 来改写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;by&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是这样写会启动两个 MR job（单纯 distinct 只会启动一个），所以要确保数据量大到启动 job 的 overhead 远小于计算耗时，才考虑这种方法。当数据集很小或者 key 的倾斜比较明显时，group by 还可能会比 distinct 慢。&lt;/p&gt;
&lt;h3 id=&#34;group-by-配置调整&#34;&gt;group by 配置调整&lt;/h3&gt;
&lt;h4 id=&#34;map-端预聚合&#34;&gt;map 端预聚合&lt;/h4&gt;
&lt;p&gt;group by 时，如果先起一个 combiner 在 map 端做部分预聚合，可以有效减少 shuffle 数据量。预聚合的配置项是 &lt;code&gt;hive.map.aggr&lt;/code&gt;，默认值 true，对应的优化器为 GroupByOptimizer，简单方便。
通过 &lt;code&gt;hive.groupby.mapaggr.checkinterval&lt;/code&gt; 参数也可以设置 map 端预聚合的行数阈值，超过该值就会分拆 job，默认值 100000。&lt;/p&gt;
&lt;h4 id=&#34;倾斜均衡配置项&#34;&gt;倾斜均衡配置项&lt;/h4&gt;
&lt;p&gt;group by 时如果某些 key 对应的数据量过大，就会发生数据倾斜。Hive 自带了一个均衡数据倾斜的配置项&lt;code&gt;hive.groupby.skewindata&lt;/code&gt;，默认值false。
其实现方法是在 group by 时启动两个 MR job。第一个 job 会将 map 端数据随机输入 reducer，每个 reducer 做部分聚合，相同的 key 就会分布在不同的 reducer 中。第二个 job 再将前面预处理过的数据按 key 聚合并输出结果，这样就起到了均衡的效果。&lt;/p&gt;
&lt;h3 id=&#34;join-基础优化&#34;&gt;join 基础优化&lt;/h3&gt;
&lt;h4 id=&#34;build-table小表前置&#34;&gt;build table（小表）前置&lt;/h4&gt;
&lt;p&gt;在最常见的 hash join 方法中，一般总有一张相对小的表和一张相对大的表，小表叫 build table，大表叫 probe table。&lt;/p&gt;
&lt;p&gt;Hive 在解析带 join 的 SQL 语句时，会默认将最后一个表作为 probe table，将前面的表作为 build table 并试图将它们读进内存。如果表顺序写反，probe table 在前面，引发 OOM 的风险就高了。&lt;/p&gt;
&lt;p&gt;在维度建模数据仓库中，事实表就是 probe table，维度表就是 build table。&lt;/p&gt;
&lt;h4 id=&#34;多表-join-时-key-相同&#34;&gt;多表 join 时 key 相同&lt;/h4&gt;
&lt;p&gt;这种情况会将多个 join 合并为一个 MR job 来处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parent_table&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;  
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果上面两个 join 的条件不相同，比如改成 &lt;code&gt;a.uid = c.uid&lt;/code&gt;，就会拆成两个 MR job 计算。
负责这个的是相关性优化器 CorrelationOptimizer，它的功能除此之外还非常多，逻辑复杂，可以参考 &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/Correlation+Optimizer&#34;&gt;Hive官方的文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;利用-map-join-特性&#34;&gt;利用 map join 特性&lt;/h4&gt;
&lt;p&gt;map join 特别适合大小表 join 的情况。Hive 会将 build table 和 probe table 在 map 端直接完成 join 过程，消灭了 reduce，效率很高。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*+ mapjoin(a) */&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;优化-sql-处理-join-数据倾斜&#34;&gt;优化 SQL 处理 join 数据倾斜&lt;/h3&gt;
&lt;h4 id=&#34;空值或无意义值&#34;&gt;空值或无意义值&lt;/h4&gt;
&lt;p&gt;空值或无意义值很常见，比如日志类型的数据，要统计每天的活跃手机号，但是总有一些日志数据没有收集到手机号，或为空、为 NULL 等，这个时候就需要提前将这些无意义的数据过滤掉，避免消耗。&lt;/p&gt;
&lt;h4 id=&#34;build-table-过大&#34;&gt;build table 过大&lt;/h4&gt;
&lt;p&gt;有时，build table 会大到无法直接使用 map join 的地步，比如全量用户维度表，而使用普通 join 又有数据分布不均的问题。这时就要充分利用 probe table 的限制条件，削减 build table 的数据量，再使用 map join 解决。代价就是需要进行两次 join。举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*+ mapjoin(aa) */&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*+ mapjoin(a) */&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200901&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aa&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;order_table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pt_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20200902&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;paystate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;mapreduce-优化&#34;&gt;MapReduce 优化&lt;/h3&gt;
&lt;h4 id=&#34;调整-mapper-数&#34;&gt;调整 mapper 数&lt;/h4&gt;
&lt;p&gt;mapper 数量与输入文件的 split 数息息相关，在 Hadoop 源码&lt;code&gt;org.apache.hadoop.mapreduce.lib.input.FileInputFormat&lt;/code&gt; 类中可以看到 split 划分的具体逻辑。&lt;/p&gt;
&lt;p&gt;可以直接通过参数 &lt;code&gt;mapred.map.tasks（默认值2）&lt;/code&gt;来设定 mapper 数的期望值，但它不一定会生效，下面会提到。
设输入文件的总大小为 total_input_size。HDFS 中，一个块的大小由参数 dfs.block.size 指定，默认值 64MB 或 128MB。在默认情况下，mapper数就是：
&lt;code&gt;default_mapper_num = total_input_size / dfs.block.size&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;mapred.min.split.size（默认值1B）&lt;/code&gt;和&lt;code&gt;mapred.max.split.size（默认值64MB）&lt;/code&gt;分别用来指定 split 的最小和最大大小。split 大小和 split 数计算规则是：
&lt;code&gt;split_size = MAX(mapred.min.split.size, MIN(mapred.max.split.size, dfs.block.size))&lt;/code&gt;；
&lt;code&gt;split_num = total_input_size / split_size&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;得出 mapper 数：
&lt;code&gt;mapper_num = MIN(split_num, MAX(default_num, mapred.map.tasks))&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可见，如果想减少 mapper 数，就适当调高 mapred.min.split.size，split 数就减少了。如果想增大 mapper 数，除了降低 mapred.min.split.size 之外，也可以调高 mapred.map.tasks。&lt;/p&gt;
&lt;p&gt;一般来讲，如果输入文件是少量大文件，就减少 mapper 数；如果输入文件是大量非小文件，就增大 mapper 数；至于大量小文件的情况，得参考下面“合并小文件”一节的方法处理。&lt;/p&gt;
&lt;h4 id=&#34;调整-reducer-数&#34;&gt;调整 reducer 数&lt;/h4&gt;
&lt;p&gt;reducer 数量的确定方法比 mapper 简单得多。使用参数&lt;code&gt;mapred.reduce.tasks&lt;/code&gt;可以直接设定 reducer 数量，不像 mapper 一样是期望值。但如果不设这个参数的话，Hive 就会自行推测，逻辑如下：&lt;/p&gt;
&lt;p&gt;参数&lt;code&gt;hive.exec.reducers.bytes.per.reducer&lt;/code&gt;用来设定每个 reducer 能够处理的最大数据量，默认值 1G（1.2版本之前）或 256M（1.2版本之后）。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;hive.exec.reducers.max&lt;/code&gt; 用来设定每个 job 的最大 reducer 数量，默认值 999（1.2版本之前）或 1009（1.2版本之后）。&lt;/p&gt;
&lt;p&gt;得出 reducer 数：
&lt;code&gt;reducer_num = MIN(total_input_size / reducers.bytes.per.reducer, reducers.max)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;reducer 数量与输出文件的数量相关。如果 reducer 数太多，会产生大量小文件，对 HDFS 造成压力。如果 reducer 数太少，每个 reducer 要处理很多数据，容易拖慢运行时间或者造成 OOM。&lt;/p&gt;
&lt;h4 id=&#34;合并小文件&#34;&gt;合并小文件&lt;/h4&gt;
&lt;h5 id=&#34;输入阶段合并&#34;&gt;输入阶段合并&lt;/h5&gt;
&lt;p&gt;需要更改 Hive 的输入文件格式，即参数&lt;code&gt;hive.input.format&lt;/code&gt;，默认值是&lt;code&gt;org.apache.hadoop.hive.ql.io.HiveInputFormat&lt;/code&gt;，我们改成&lt;code&gt;org.apache.hadoop.hive.ql.io.CombineHiveInputFormat&lt;/code&gt;。这样比起上面调整 mapper 数时，又会多出两个参数，分别是&lt;code&gt;mapred.min.split.size.per.node&lt;/code&gt;和&lt;code&gt;mapred.min.split.size.per.rack&lt;/code&gt;，含义是单节点和单机架上的最小 split 大小。如果发现有 split 大小小于这两个值（默认都是 100MB），则会进行合并。具体逻辑可以参看 Hive 源码中的对应类。&lt;/p&gt;
&lt;h5 id=&#34;输出阶段合并&#34;&gt;输出阶段合并&lt;/h5&gt;
&lt;p&gt;直接将 &lt;code&gt;hive.merge.mapfiles&lt;/code&gt; 和 &lt;code&gt;hive.merge.mapredfiles&lt;/code&gt; 都设为 true 即可，前者表示将 map-only 任务的输出合并，后者表示将 map-reduce 任务的输出合并。另外，&lt;code&gt;hive.merge.size.per.task&lt;/code&gt; 可以指定每个task输出后合并文件大小的期望值，&lt;code&gt;hive.merge.size.smallfiles.avgsize&lt;/code&gt; 可以指定所有输出文件大小的均值阈值，默认值都是 1GB。如果平均大小不足的话，就会另外启动一个任务来进行合并。&lt;/p&gt;
&lt;h4 id=&#34;启用压缩&#34;&gt;启用压缩&lt;/h4&gt;
&lt;p&gt;压缩 job 的中间结果数据和输出数据，可以用少量 CPU 时间节省很多空间。压缩方式一般选择 Snappy，效率最高。&lt;/p&gt;
&lt;p&gt;要启用中间压缩，需要设定&lt;code&gt;hive.exec.compress.intermediate&lt;/code&gt; 为 true，同时指定压缩方式&lt;code&gt;hive.intermediate.compression.codec&lt;/code&gt; 为&lt;code&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/code&gt;。另外，参数&lt;code&gt;hive.intermediate.compression.type&lt;/code&gt; 可以选择对块（BLOCK）还是记录（RECORD）压缩，BLOCK的压缩率比较高。
输出压缩的配置基本相同，打开&lt;code&gt;hive.exec.compress.output&lt;/code&gt;即可。&lt;/p&gt;
&lt;h4 id=&#34;jvm-重用&#34;&gt;JVM 重用&lt;/h4&gt;
&lt;p&gt;在 MR job 中，默认是每执行一个 task 就启动一个 JVM。如果 task 非常小而碎，那么 JVM 启动和关闭的耗时就会很长。可以通过调节参数&lt;code&gt;mapred.job.reuse.jvm.num.tasks&lt;/code&gt;来重用。例如将这个参数设成 5，那么就代表同一个 MR job 中顺序执行的 5 个 task 可以重复使用一个 JVM，减少启动和关闭的开销。但它对不同 MR job 中的 task 无效。&lt;/p&gt;
&lt;h3 id=&#34;并行执行与本地模式&#34;&gt;并行执行与本地模式&lt;/h3&gt;
&lt;h4 id=&#34;并行执行&#34;&gt;并行执行&lt;/h4&gt;
&lt;p&gt;Hive 中互相没有依赖关系的 job 间是可以并行执行的，最典型的就是多个子查询 union all。在集群资源相对充足的情况下，可以开启并行执行，即将参数hive.exec.parallel设为true。另外hive.exec.parallel.thread.number可以设定并行执行的线程数，默认为8，一般都够用。&lt;/p&gt;
&lt;h4 id=&#34;本地模式&#34;&gt;本地模式&lt;/h4&gt;
&lt;p&gt;Hive 也可以不将任务提交到集群进行运算，而是直接在一台节点上处理。因为消除了提交到集群的 overhead，所以比较适合数据量很小，且逻辑不复杂的任务。
设置 &lt;code&gt;hive.exec.mode.local.auto&lt;/code&gt; 为 true 可以开启本地模式。但任务的输入数据总量必须小于 &lt;code&gt;hive.exec.mode.local.auto.inputbytes.max（默认值128MB）&lt;/code&gt; ，且 mapper 数必须小于 &lt;code&gt;hive.exec.mode.local.auto.tasks.max（默认值4）&lt;/code&gt; ，reducer 数必须为 0 或 1，才会真正用本地模式执行。&lt;/p&gt;
&lt;h3 id=&#34;严格模式&#34;&gt;严格模式&lt;/h3&gt;
&lt;p&gt;所谓严格模式，就是强制不允许用户执行 3 种有风险的 HiveSQL 语句，一旦执行会直接失败。这 3 种语句是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询分区表时不限定分区列的语句；&lt;/li&gt;
&lt;li&gt;两表 join 产生了笛卡尔积的语句；&lt;/li&gt;
&lt;li&gt;用 order by 来排序但没有指定 limit 的语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要开启严格模式，需要将参数&lt;code&gt;hive.mapred.mode&lt;/code&gt;设为 strict。&lt;/p&gt;
&lt;h4 id=&#34;采用合适的存储格式&#34;&gt;采用合适的存储格式&lt;/h4&gt;
&lt;p&gt;在 HiveSQL 的 create table 语句中，可以使用 stored as &amp;hellip; 指定表的存储格式。Hive 表支持的存储格式有 TextFile、SequenceFile、RCFile、Avro、ORC、Parquet 等。&lt;/p&gt;
&lt;p&gt;存储格式一般需要根据业务进行选择，在我们的实操中，绝大多数表都采用 TextFile 与 Parquet 两种存储格式之一。&lt;/p&gt;
&lt;p&gt;TextFile 是最简单的存储格式，它是纯文本记录，也是 Hive 的默认格式。虽然它的磁盘开销比较大，查询效率也低，但它更多地是作为跳板来使用。RCFile、ORC、Parquet 等格式的表都不能由文件直接导入数据，必须由 TextFile 来做中转。&lt;/p&gt;
&lt;p&gt;Parquet 和 ORC 都是 Apache 旗下的开源列式存储格式。列式存储比起传统的行式存储更适合批量 OLAP 查询，并且也支持更好的压缩和编码。我们选择 Parquet 的原因主要是它支持 Impala 查询引擎，并且我们对 update、delete 和事务性操作需求很低。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>DataWorks 错误汇总</title>
      <link>https://liupengkun1993.github.io/post/bigdata/dataworks-%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 11 Aug 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/dataworks-%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;报错日志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;FAILED: ODPS-0420095: Access Denied - Authorization Failed [4093], You have NO privilege to do the restricted operation on  {acs:odps:*:projects/***}. Access Mode is AllDenied.  Context ID:afd84055-ef3c-4d8c-86ee-ff3695c15a34.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;报错原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线上脚本报以上错误，大多是欠费的原因，续费就好了，注意已报错的脚本需要重跑一下。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;报错日志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;2020-05-28 01:49:01.597 [job-156364196] ERROR RetryUtil - Exception when calling callable, 即将尝试执行第1次重试,共计重试9次.本次重试计划等待[1,000]ms,实际等待[1,000]ms, 异常Msg:[Code:[MYSQLErrCode-02], Description:[数据库服务的IP地址或者Port错误，请检查填写的IP地址和Port或者联系DBA确认IP地址和Port是否正确。如果是同步中心用户请联系DBA确认idb上录入的IP和PORT信息和数据库的当前实际信息是一致的].  - 具体错误信息为：Communications link failure
The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. - com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
    at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)
    at com.mysql.jdbc.MysqlIO.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(MysqlIO.java:342)
    at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2188)
    at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
    at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
    at com.mysql.jdbc.ConnectionImpl.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(ConnectionImpl.java:776)
    at com.mysql.jdbc.JDBC4Connection.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(JDBC4Connection.java:47)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
    at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
    at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
    at java.sql.DriverManager.getConnection(DriverManager.java:674)
    at java.sql.DriverManager.getConnection(DriverManager.java:217)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.connect(DBUtil.java:567)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.getMySQLConnection(DBUtil.java:460)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.connect(DBUtil.java:439)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.access$100(DBUtil.java:26)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil$3.call(DBUtil.java:378)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil$3.call(DBUtil.java:375)
    at com.alibaba.datax.common.util.RetryUtil$Retry.call(RetryUtil.java:163)
    at com.alibaba.datax.common.util.RetryUtil$Retry.doRetry(RetryUtil.java:111)
    at com.alibaba.datax.common.util.RetryUtil.executeWithRetry(RetryUtil.java:31)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.getConnection(DBUtil.java:375)
    at com.alibaba.datax.plugin.rdbms.util.DBUtil.getConnection(DBUtil.java:359)
    at com.alibaba.datax.plugin.rdbms.util.JdbcConnectionFactory.getConnecttion(JdbcConnectionFactory.java:29)
    at com.alibaba.datax.plugin.rdbms.writer.util.OriginalConfPretreatmentUtil.dealColumnConf(OriginalConfPretreatmentUtil.java:167)
    at com.alibaba.datax.plugin.rdbms.writer.util.OriginalConfPretreatmentUtil.dealColumnConf(OriginalConfPretreatmentUtil.java:250)
    at com.alibaba.datax.plugin.rdbms.writer.util.OriginalConfPretreatmentUtil.doPretreatment(OriginalConfPretreatmentUtil.java:43)
    at com.alibaba.datax.plugin.rdbms.writer.CommonRdbmsWriter$Job.init(CommonRdbmsWriter.java:68)
    at com.alibaba.datax.plugin.writer.mysqlwriter.MysqlWriter$Job.init(MysqlWriter.java:31)
    at com.alibaba.datax.core.job.JobContainer.initJobWriter(JobContainer.java:1064)
    at com.alibaba.datax.core.job.JobContainer.init(JobContainer.java:451)
    at com.alibaba.datax.core.job.JobContainer.start(JobContainer.java:210)
    at com.alibaba.datax.core.Engine.start(Engine.java:96)
    at com.alibaba.datax.core.Engine.entry(Engine.java:246)
    at com.alibaba.datax.core.Engine.main(Engine.java:279)
Caused by: java.net.ConnectException: Connection refused
    at java.net.PlainSocketImpl.socketConnect(Native Method)
    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
    at java.net.Socket.connect(Socket.java:643)
    at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:211)
    at com.mysql.jdbc.MysqlIO.&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;(MysqlIO.java:301)
    ... 37 more
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;报错原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/DataWorks/DataWorks-errors-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由上图可知，数据源有问题，链接 polardb 失败，导致无法导数据到 polardb，解决方法是，找运维连通数据源，然后重跑报错脚本。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;跨工作空间取数据时报权限问题（比如在 A 空间内，访问 B 空间的表）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案：主账号授权，授权链接：&lt;a href=&#34;https://help.aliyun.com/document_detail/27935.html?spm=a2c4g.11186623.6.927.da6a6847ZlA602&#34;&gt;https://help.aliyun.com/document_detail/27935.html?spm=a2c4g.11186623.6.927.da6a6847ZlA602&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有个解决方案，可以根据具体的表名、资源名，以 Package 的方式，将数据部分授权给其它工作空间。参考文档：&lt;a href=&#34;https://help.aliyun.com/document_detail/34603.html?spm=a2c4g.11186623.6.934.29d12eb6JDuE5y&#34;&gt;https://help.aliyun.com/document_detail/34603.html?spm=a2c4g.11186623.6.934.29d12eb6JDuE5y&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Maxcompute 访问 OSS 的权限问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在读取外部表的时候，报了这样的错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;FAILED: Generating job conf failed, gen jobconf failed: Failed to obtain external data information, error msg: build/release64/common/io/oss/oss_client.cpp(97): OSSRequestException: req_id: 5F110AC115158031331734EA, http status code: 403, error code: UnknownError, message: Access denied, please make sure the oss host and oss bucket is matched, and the bucket should be authorized to the odps project with correct role_arn
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个报错信息不是很清晰，试了很多方法还是没搞定，无奈问了阿里云技术人员，说报错403是因为找不到地址（又是权限问题，运维的同学又修改东西了）。&lt;/p&gt;
&lt;p&gt;接着我在新建外部表的时候，报了这样的错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;AccessDenied&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;The bucket you access does not belong to you.&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个就比较清晰了，解决方案见下文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/72777.html?spm=a2c4g.11186623.6.786.136e6d03xKJI2D&#34;&gt;https://help.aliyun.com/document_detail/72777.html?spm=a2c4g.11186623.6.786.136e6d03xKJI2D&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MaxCompute 设置某些表的只读权限给某些用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数仓里几个表里面存的是线上数据，需要控制其读写权限，目的是开发人员只能读，不能写，保证数据安全性。&lt;/p&gt;
&lt;p&gt;根据这个文档，可以给用户配置角色，&lt;a href=&#34;https://help.aliyun.com/document_detail/27934.html?spm=a2c4g.11186623.6.927.49d29d61tRALZe&#34;&gt;角色管理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根据这个文档，可以给某个角色设置为只读权限，&lt;a href=&#34;https://help.aliyun.com/document_detail/162576.html?spm=a2c4g.11186623.6.930.3cc31afdqENv14&#34;&gt;Policy和Download权限控制&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;总体脚本大概如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;-- 创建角色
create role access_deny_test_table_developers;
-- 给用户指派某种角色
grant access_deny_test_table_developers to liupengkun@septnet-x7.onaliyun.com;
-- 授权 MaxCompute 项目中 test11 表的只读权限给 access_deny_test_table_developers 角色。
grant Select on table test11 to role access_deny_test_table_developers privilegeproperties(&amp;#34;policy&amp;#34; = &amp;#34;true&amp;#34;, &amp;#34;allow&amp;#34;=&amp;#34;true&amp;#34;);

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注：需要项目所属者（Project Owner）或者拥有Super_Administrator角色的用户才可以执行。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MAPJOIN 在 Map 阶段会将指定表的数据全部加载在内存中。因此指定的表仅能为小表，且表被加载到内存后占用的总内存不得超过 640MB。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;报错信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;FAILED: ODPS-0010000:System internal error - fuxi job failed, caused by: CheckInputSize for Hash Join Cursor failed, reader id StreamLineRead4 : small table exceeds, memory limit(MB) 640, size in memory from meta 3842607683
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;解决方法 1：将 MAPJOIN 去掉。。&lt;/li&gt;
&lt;li&gt;解决方法 2：加一句 &lt;code&gt;set odps.sql.mapjoin.memory.max=2048;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果超过2048M，就应该需要改实现方式了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Canal 问题汇总</title>
      <link>https://liupengkun1993.github.io/post/bigdata/canal-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 05 Aug 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/canal-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      
        <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/canal&#34;&gt;canal&lt;/a&gt; 是阿里开源的 MySQL binlog 增量订阅&amp;amp;消费组件，基于 java 实现，整体已经在很多大型的互联网项目生产环境中使用，包括阿里、美团等都有广泛的应用，是一个非常成熟的数据库同步方案，基础的使用只需要进行简单的配置即可。&lt;/p&gt;
&lt;p&gt;canal 是通过模拟成为 mysql 的 slave 的方式，监听 mysql 的 binlog 日志来获取数据，binlog 设置为 row 模式以后，不仅能获取到执行的每一个增删改的脚本，同时还能获取到修改前和修改后的数据，基于这个特性，canal 就能高性能的获取到 mysql 数据数据的变更。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;canal 的部署主要分为 server 端和 client 端。
&lt;ul&gt;
&lt;li&gt;server 端部署好以后，可以直接监听 mysql binlog，因为 server 端是把自己模拟成了 mysql slave，所以，只能接受数据，没有进行任何逻辑的处理，具体的逻辑处理，需要 client 端进行处理。&lt;/li&gt;
&lt;li&gt;client 端一般是需要大家进行简单的开发。&lt;a href=&#34;https://github.com/alibaba/canal/wiki/ClientAPI&#34;&gt;官网文档&lt;/a&gt;有一个简单的示例，很容易理解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用中遇到的问题&#34;&gt;使用中遇到的问题&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;column-size-is-not-match-问题&#34;&gt;column size is not match 问题&lt;/h4&gt;
&lt;p&gt;见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/Canal/Canal-errors-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原因是 ddl 变更，导致列不匹配，报了 &lt;code&gt;column size is not match for table: xx , 12 vs 13&lt;/code&gt; 的错误。解决方案是，删除 &lt;code&gt;conf/实例名&lt;/code&gt; 目录下的 &lt;code&gt;h2.mv.db&lt;/code&gt; 文件，如果没有 &lt;code&gt;h2.mv.db&lt;/code&gt; 文件，删除 &lt;code&gt;meta.dat&lt;/code&gt; 文件。&lt;code&gt;meta.dat&lt;/code&gt; 文件内容如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/Canal/Canal-errors-02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考文档：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/canal/wiki/TableMetaTSDB&#34;&gt;TableMetaTSDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/canal/issues/534&#34;&gt;https://github.com/alibaba/canal/issues/534&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;caused-by-javaioioexception-errorpacket-errornumber1142-fieldcount-1-messageshow-command-denied-to-user--问题&#34;&gt;Caused by: java.io.IOException: ErrorPacket [errorNumber=1142, fieldCount=-1, message=SHOW command denied to user  问题&lt;/h4&gt;
&lt;p&gt;见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/BigData/Canal/Canal-errors-03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原因是因为没有这个表的权限, 订阅时过滤掉，或者加权限即可。&lt;/p&gt;
&lt;hr&gt;
</description>
      
    </item>
    
    <item>
      <title>《Objective-C高级编程iOS与OS X多线程和内存管理》读书笔记</title>
      <link>https://liupengkun1993.github.io/post/reading-notes/objective-c%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bios%E4%B8%8Eos-x%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 08 Jun 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/reading-notes/objective-c%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bios%E4%B8%8Eos-x%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;这两天重读了《Objective-C高级编程 iOS与OS X多线程和内存管理》，此书主要详细讲解了“自动引用计数”“Blocks”“GCD”这三大模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;自动引用计数&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1.1 自动引用计数概念&lt;/li&gt;
&lt;li&gt;1.2 内存管理的思考方式&lt;/li&gt;
&lt;li&gt;1.3 所有权修饰符&lt;/li&gt;
&lt;li&gt;1.4 ARC 的规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Blocks&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2.1 Block 概念&lt;/li&gt;
&lt;li&gt;2.2 Block 本质&lt;/li&gt;
&lt;li&gt;2.3 Block 的三种类型&lt;/li&gt;
&lt;li&gt;2.4 Block 何时会复制到堆&lt;/li&gt;
&lt;li&gt;2.5 Block 循环引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Grand Central Dispatch&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;3.1 Grand Central Dispatch 概念&lt;/li&gt;
&lt;li&gt;3.2 多线程编程可能会出现的问题&lt;/li&gt;
&lt;li&gt;3.3 GCD API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-自动引用计数&#34;&gt;1. 自动引用计数&lt;/h2&gt;
&lt;h3 id=&#34;11-自动引用计数概念&#34;&gt;1.1 自动引用计数概念&lt;/h3&gt;
&lt;p&gt;在 LLVM 编译器中设置 ARC 为有效状态，就无需再次键入 retain 或者 release 代码，编译器将结合运行时基于引用计数自动进行内存管理。&lt;/p&gt;
&lt;h3 id=&#34;12-内存管理的思考方式&#34;&gt;1.2 内存管理的思考方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自己生成的对象，自己所持有。&lt;/li&gt;
&lt;li&gt;非自己生成的对象，自己也能持有。&lt;/li&gt;
&lt;li&gt;自己持有的对象不再需要时释放。&lt;/li&gt;
&lt;li&gt;非自己持有的对象无法释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-所有权修饰符&#34;&gt;1.3 所有权修饰符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;__strong
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__strong&lt;/code&gt; 修饰符是 id 类型和对象类型默认的所有权修饰符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__strong&lt;/code&gt; 修饰符表示对对象的“强引用”。持有强引用的变量在超出其作用域时被废弃，随着强引用的失效，引用的对象会随之释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__weak
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__weak&lt;/code&gt; 修饰符可以避免循环引用，是弱引用，&lt;code&gt;__weak&lt;/code&gt; 不持有对象，在超出其变量作用域时，对象即被释放。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__weak&lt;/code&gt; 修饰符还有另一优点，在持有某对象的弱引用时，若该对象被废弃，则此弱引用将自动失效且处于 nil 被赋值的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__unsafe_unretained
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__unsafe_unretained&lt;/code&gt; 修饰符类似于 &lt;code&gt;__weak&lt;/code&gt;，不会对对象进行retain，但该对象销毁时，会依然指向之前的内存空间（野指针）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__autoreleasing
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__autoreleasing&lt;/code&gt; 修饰符，在当前 autoreleasepool 作用域内有效，出了当前的 autoreleasepool 会被自动释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意点：循环引用容易发生内存泄漏，内存泄漏是指应当废弃的对象在超出其生存周期后继续存在。&lt;/p&gt;
&lt;h3 id=&#34;14-arc-的规则&#34;&gt;1.4 ARC 的规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不能使用 retain/release/retainCount/autorelease
&lt;ul&gt;
&lt;li&gt;内存管理是编译器的工作，因此没必要使用内存管理的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不能使用 NSAllocateObject/NSDeallocateObject
&lt;ul&gt;
&lt;li&gt;同 retain 等方法一样，如果使用会引起编译错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;须遵守内存管理的方法命名规则&lt;/li&gt;
&lt;li&gt;不要显示调用 dealloc
&lt;ul&gt;
&lt;li&gt;ARC 会自动对此进行处理，因此不必书写 [super dealloc]。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 @autoreleasepool 块替代 NSAutoreleasePool&lt;/li&gt;
&lt;li&gt;不能使用区域（NSZone）&lt;/li&gt;
&lt;li&gt;对象型变量不能作为 C 语言结构体（struct/union）的成员&lt;/li&gt;
&lt;li&gt;显示转换 &amp;ldquo;id&amp;rdquo; 和 &amp;ldquo;void *&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-blocks&#34;&gt;2. Blocks&lt;/h2&gt;
&lt;h3 id=&#34;21-block-概念&#34;&gt;2.1 Block 概念&lt;/h3&gt;
&lt;p&gt;带有自动变量值的匿名函数。&lt;/p&gt;
&lt;h3 id=&#34;22-block-本质&#34;&gt;2.2 Block 本质&lt;/h3&gt;
&lt;p&gt;Block 本质是一个 OC 对象，它内部有一个 isa 指针。是封装了函数调用和函数调用环境的 OC 对象。&lt;/p&gt;
&lt;p&gt;iOS 类的本质即 class_t 结构体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;IMP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vtable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;uintptr_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_NEVER_USE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该实例名称持有声明的成员变量、方法的名称、方法的实现（即函数指针）、属性以及父类的指针。&lt;/p&gt;
&lt;h3 id=&#34;23-block-的三种类型&#34;&gt;2.3 Block 的三种类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类&lt;/th&gt;
&lt;th&gt;设置对象的存储域&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_NSConcreteStackBlock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;栈&lt;/td&gt;
&lt;td&gt;捕获局部变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_NSConcreteGlobalBlock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;程序的数据区域（.data 区）&lt;/td&gt;
&lt;td&gt;不捕获自动变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_NSConcreteMallocBlock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;堆&lt;/td&gt;
&lt;td&gt;捕获成员变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;24-block-何时会复制到堆&#34;&gt;2.4 Block 何时会复制到堆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调用 Block 的 copy 实例方法时&lt;/li&gt;
&lt;li&gt;Block 作为函数返回值返回时&lt;/li&gt;
&lt;li&gt;将 Block 赋值给附有 __strong 修饰符 id 类型的类或 Block 类型成员变量时&lt;/li&gt;
&lt;li&gt;在方法名中含有 usingBlock 的 Cocoa 框架方法或 GCD 的 API 中传递 Block 时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-block-循环引用&#34;&gt;2.5 Block 循环引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原因：Block中附有__strong修饰符的对象类型自动变量在从栈复制到堆上时，该对象会被Block所持有。&lt;/li&gt;
&lt;li&gt;解决方案：通过 &lt;code&gt;__weak&lt;/code&gt; 或 &lt;code&gt;__unsafe_unretained&lt;/code&gt; 修饰符来替代 &lt;code&gt;__strong&lt;/code&gt; 类型的被截获的自动变量
通过 &lt;code&gt;__block&lt;/code&gt; 说明符和设置nil来打破循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-grand-central-dispatch&#34;&gt;3. Grand Central Dispatch&lt;/h2&gt;
&lt;h3 id=&#34;31-grand-central-dispatch-概念&#34;&gt;3.1 Grand Central Dispatch 概念&lt;/h3&gt;
&lt;p&gt;Grand Central Dispatch （GCD） 是异步执行任务的技术之一，一般将应用程序中记述的线程管理用的代码在系统级中实现，开发者只需要定义想执行的任务并追加到适当的 Dispatch Queue 中，GCD 就能生成必要的线程并计划执行任务。&lt;/p&gt;
&lt;h3 id=&#34;32-多线程编程可能会出现的问题&#34;&gt;3.2 多线程编程可能会出现的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多个线程更新相同的资源会导致数据的不一致（数据竞争）- 解决：使用 Serial Dispatch Queue （串行队列）&lt;/li&gt;
&lt;li&gt;停止等待事件的线程会导致多个线程相互持续等待（死锁）&lt;/li&gt;
&lt;li&gt;使用太多线程会消耗大量内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dispatch Queue 按照追加的顺序（先进先出 FIFO）执行处理，另在执行处理时存在两种 Dispatch Queue ：一种是等待现在执行中处理的 Serial Dispatch Queue，另一种是不等待现在执行中处理的 Concurrent Dispatch Queue。&lt;/p&gt;
&lt;h3 id=&#34;33-gcd-api&#34;&gt;3.3 GCD API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可使用 &lt;code&gt;dispatch_set_target_queue&lt;/code&gt; API 设置 &lt;code&gt;Dispatch Queue&lt;/code&gt; 的优先级，同时也可以使多个本应并行执行的多个 &lt;code&gt;Serial Dispatch Queue&lt;/code&gt;，在目标 &lt;code&gt;Serial Dispatch Queue&lt;/code&gt; 上串行执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_after&lt;/code&gt; 函数并不准时，因为 &lt;code&gt;Main Dispatch Queue&lt;/code&gt; 在主线程的 Runloop 中执行，所以在比如每隔 1/60 秒自行的 Runloop 中，Block 最快3秒后自行，最慢在3秒 + 1/60 秒后执行，并且在 &lt;code&gt;Main Dispatch Queue&lt;/code&gt; 有大量处理追加或主线程的处理本身有延迟时，这个时间会更长。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dispatch Group&lt;/code&gt; 在追加到 &lt;code&gt;Dispatch Queue&lt;/code&gt; 中的多个处理全部结束后想执行结束处理可使用 &lt;code&gt;Dispatch Group&lt;/code&gt; 实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_sync&lt;/code&gt; 如同简易版的 &lt;code&gt;dispatch_group_wait&lt;/code&gt; 函数，会在指定队列中同步执行任务，在任务执行结束之前不会返回。如果在主线程同步执行 Block 就会出现死锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_apply&lt;/code&gt; 函数可进行快速遍历。由于 &lt;code&gt;dispatch_apply&lt;/code&gt; 函数与 &lt;code&gt;dispatch_sync&lt;/code&gt; 函数相同，会等待处理执行结束，因此推荐在 &lt;code&gt;dispatch_async&lt;/code&gt; 函数中非同步地执行 &lt;code&gt;dispatch_apply&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_suspend&lt;/code&gt; 函数可暂时挂起指定的 &lt;code&gt;Dispatch Queue&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_resume&lt;/code&gt; 函数可恢复指定的 &lt;code&gt;Dispatch Queue&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore&lt;/code&gt; 函数可对操作进行更细粒度的排他控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore_wait&lt;/code&gt;(semaphore, &lt;code&gt;DISPATCH_TIME_FOREVER&lt;/code&gt;)，&lt;code&gt;dispatch_semaphore_wait&lt;/code&gt; 函数等待 &lt;code&gt;Dispatch Semaphore&lt;/code&gt; 的计数值达到大于或等于1。该处理结束是使用 &lt;code&gt;dispatch_semaphore_signal&lt;/code&gt; 函数将 &lt;code&gt;Dispatch Semaphore&lt;/code&gt; 的计数值加1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_once&lt;/code&gt; 函数是保证再应用程序执行中只执行一次指定处理的 API。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_IO&lt;/code&gt; 函数可多线程并发处理大文件，以提高文件读取速度。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>《代码整洁之道》读书笔记</title>
      <link>https://liupengkun1993.github.io/post/reading-notes/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 08 Jun 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/reading-notes/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_Clean_Code/CleanCode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;有意义的命名&#34;&gt;有意义的命名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命名语意化：有意义的命名能够替代注释&lt;/li&gt;
&lt;li&gt;类名和对象名应该是名词或名词短语&lt;/li&gt;
&lt;li&gt;方法名应该是动词或动词短语&lt;/li&gt;
&lt;li&gt;不要害怕名称过长&lt;/li&gt;
&lt;li&gt;命名要避免误导&lt;/li&gt;
&lt;li&gt;多使用能够读的出来的名称：避免自造词, 多使用合乎规范的英文单词&lt;/li&gt;
&lt;li&gt;避免使用双关语&lt;/li&gt;
&lt;li&gt;多使用大家达成统一认识的领域名称(术语)&lt;/li&gt;
&lt;li&gt;避免添加无意义的语境&lt;/li&gt;
&lt;li&gt;使用易搜索的名称
&lt;ul&gt;
&lt;li&gt;易搜索指的是在海量代码中快速定位到该命名&lt;/li&gt;
&lt;li&gt;以单个字母命名的名称仅适用于短方法中的本地变量(如 js 中 d(document)，w(window))&lt;/li&gt;
&lt;li&gt;命名的长短应该与作用域大小成对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函数的第一规则是短小，20行封顶&lt;/li&gt;
&lt;li&gt;每个函数只做一件事&lt;/li&gt;
&lt;li&gt;函数中的语句在一个抽象层级上&lt;/li&gt;
&lt;li&gt;函数的参数
&lt;ul&gt;
&lt;li&gt;函数参数个数：理想情况函数参数个数依次为 0、1、2，超过两个应该避免&lt;/li&gt;
&lt;li&gt;当函数需要三个或者超过三个以上参数时候，推荐把一些对象封装为类&lt;/li&gt;
&lt;li&gt;当我们需要传入个数可变的参数时候，可以使用参数列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽离 try/catch 代码块（一个函数只做一件事，错误处理就是一件事 ）&lt;/li&gt;
&lt;li&gt;DRY 原则：不要重复自己&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;尽量不写注释，能用代码表达就用代码表达&lt;/li&gt;
&lt;li&gt;值得写的注释
&lt;ul&gt;
&lt;li&gt;法律信息&lt;/li&gt;
&lt;li&gt;提供信息的注释&lt;/li&gt;
&lt;li&gt;对意图的解释&lt;/li&gt;
&lt;li&gt;警告&lt;/li&gt;
&lt;li&gt;TODO 注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;坏的注释
&lt;ul&gt;
&lt;li&gt;多余的注释：无法提供比代码本身提供更多的信息，或者说读注释并不比读代码效果好&lt;/li&gt;
&lt;li&gt;误导性注释：你的注释不够精确，甚至本身就有错误&lt;/li&gt;
&lt;li&gt;日志式注释：记录代码变更或者代码 log 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;格式的目的是保持可维护性和可扩展性&lt;/li&gt;
&lt;li&gt;遵守团队规则，一个团队的代码风格要统一&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误处理&#34;&gt;错误处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用异常而非返回码&lt;/li&gt;
&lt;li&gt;抽离try catch包含的代码块，其中代码块抽象为一个函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIRST原则
&lt;ul&gt;
&lt;li&gt;快速 Fast&lt;/li&gt;
&lt;li&gt;独立 Independent 测试应该相互独立&lt;/li&gt;
&lt;li&gt;可重复 Repeatable 测试应当在任何环境中重复通过&lt;/li&gt;
&lt;li&gt;自足验证 Self-Validating 测试应该有布尔值输出&lt;/li&gt;
&lt;li&gt;及时 Timely 最好的方式是 TDD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类&#34;&gt;类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类的封装&lt;/li&gt;
&lt;li&gt;遵守单一权责原则&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;迭进&#34;&gt;迭进&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要重复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发编程&#34;&gt;并发编程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分离并发相关代码与其它代码&lt;/li&gt;
&lt;li&gt;严格限制对可能被共享的数据的访问&lt;/li&gt;
&lt;li&gt;避免使用一个共享对象的多个同步方法&lt;/li&gt;
&lt;li&gt;保持同步区域微小，尽可能少设计临界区&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>QuickBI 问题汇总</title>
      <link>https://liupengkun1993.github.io/post/bigdata/quickbi-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 03 Jun 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/bigdata/quickbi-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;Quick BI 连接 MaxCompute 数据报错：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quick BI 连接 MaxCompute 数据源，参考了阿里云文档：&lt;a href=&#34;https://helpcdn.aliyun.com/document_detail/166109.html?spm=a2c4g.11174283.6.603.1dca7151UCWdWL&#34;&gt;云数据源MaxCompute&lt;/a&gt;，检查了参数，但还是连接不通。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;显示名称：****
数据库地址：http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api
项目名称：maxcompute 项目名
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;研究半天是 ak 账号的原因，子账户的 ak 需要自己创建，子账户又没有权限创建，所以只能主账户给子账户开权限，子账户创建 ak，这样就连通了。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Table(***) is full scan with all partitions, please specify partition predicates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仪表板报错：[46] execute failed: ODPS-0130071:[0,0] Semantic analysis exception - physical plan generation failed: java.lang.RuntimeException: Table(***) is full scan with all partitions, please specify partition predicates.&lt;/p&gt;
&lt;p&gt;这个问题是由于分区表引起的，有两个解决方案，第一是给该数据集开启全表扫描，参考文档：&lt;a href=&#34;https://help.aliyun.com/document_detail/169395.html?spm=a2c4g.11186623.6.630.2b6a74efA9S6X5#title-mdr-mh0-buh&#34;&gt;优化数据集性能&lt;/a&gt;，第二是给数据集设置过滤条件，只查询某一个分区的。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>LLDB调试常用命令</title>
      <link>https://liupengkun1993.github.io/post/ios/lldb/lldb%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 08 May 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/ios/lldb/lldb%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;LLDB 调试在 iOS 开发中经常会用到，这里记录一下常用的调试命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;断点命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set -n 函数名&lt;/td&gt;
&lt;td&gt;给某函数下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set -n &amp;ldquo;[类名 SEL]&amp;rdquo; -n &amp;ldquo;[类名 SEL]&amp;rdquo; &amp;hellip;&lt;/td&gt;
&lt;td&gt;给多个方法下断点,形成断点组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint list&lt;/td&gt;
&lt;td&gt;查看当前断点列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint disable(enable)组号(编号)&lt;/td&gt;
&lt;td&gt;禁 用(启用)某一组(某一个)断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint delete 编号&lt;/td&gt;
&lt;td&gt;禁用某一个断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint delete 组号&lt;/td&gt;
&lt;td&gt;删除某一组断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint delete&lt;/td&gt;
&lt;td&gt;删除所有断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set &amp;ndash;selectore 方法名&lt;/td&gt;
&lt;td&gt;全局方法断点,工程所有该方法都会下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;brepoint set &amp;ndash;file 文件名.m &amp;ndash;selector 方法名&lt;/td&gt;
&lt;td&gt;给.m实现文件某个方法下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint set -r 字符串&lt;/td&gt;
&lt;td&gt;遍历整个工程，含该字串的方法、函数都会下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint command add 标号&lt;/td&gt;
&lt;td&gt;某标号断点过后执行相应命令，以Done结束，类似于Xcode界面Edit breakpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint command list 标号&lt;/td&gt;
&lt;td&gt;列出断点过后执行的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakpoint command delete&lt;/td&gt;
&lt;td&gt;删除断点过后执行的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b 内存地址&lt;/td&gt;
&lt;td&gt;对内存地址下断点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;其他常用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;p 语句&lt;/td&gt;
&lt;td&gt;动态执行语句(expression的缩写)，内存操作（下同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expression 语句&lt;/td&gt;
&lt;td&gt;同上,可缩写成exp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;po 语句&lt;/td&gt;
&lt;td&gt;print object 常用于查看对象信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;程序继续执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;process interrput&lt;/td&gt;
&lt;td&gt;暂停程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;列出所有加载的模块 缩写im li&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list -o -f 模块名&lt;/td&gt;
&lt;td&gt;只列出输入模块名信息，常用于主模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bt&lt;/td&gt;
&lt;td&gt;查看当前调用栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;查看上一个调用函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;查看下一个调用函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame variable&lt;/td&gt;
&lt;td&gt;查看函数参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame select 标号&lt;/td&gt;
&lt;td&gt;查看指定调用函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dis -a $pc&lt;/td&gt;
&lt;td&gt;反汇编指定地址,此处为pc寄存器对应地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread info&lt;/td&gt;
&lt;td&gt;输出当前线程信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b trace -c xxx&lt;/td&gt;
&lt;td&gt;满足某个条件后中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;target stop-hook add -o &amp;ldquo;frame variable&amp;rdquo;&lt;/td&gt;
&lt;td&gt;断点进入后默认做的操作,这里是打印参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help 指令&lt;/td&gt;
&lt;td&gt;查看指令信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;跳转命令、读写命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;将子函数整体一步执行，源码级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;跳进子函数一步一步执行，源码级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ni&lt;/td&gt;
&lt;td&gt;跳到下一条指令,汇编级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;si&lt;/td&gt;
&lt;td&gt;跳到当前指令内部，汇编级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finish&lt;/td&gt;
&lt;td&gt;返回上层调用栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread return&lt;/td&gt;
&lt;td&gt;不再执行往下代码，直接从当前调用栈返回一个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register read&lt;/td&gt;
&lt;td&gt;读取所有寄存器值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register read $x0&lt;/td&gt;
&lt;td&gt;读取x0寄存器值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register write $x1 10&lt;/td&gt;
&lt;td&gt;修改x1寄存器的值为10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p/x&lt;/td&gt;
&lt;td&gt;以十六进制形式读取值，读取的对象可以很多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;watchpoint set variable p-&amp;gt;_name&lt;/td&gt;
&lt;td&gt;给属性添加内存断点，属性改变时会触发断点，可以看到属性的新旧值，类似KVO效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;watchpoint set expression 变量内存地址&lt;/td&gt;
&lt;td&gt;效果同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;命令缩写
&lt;ul&gt;
&lt;li&gt;breakpoint :br、b&lt;/li&gt;
&lt;li&gt;list:li&lt;/li&gt;
&lt;li&gt;delete:del&lt;/li&gt;
&lt;li&gt;disable:dis&lt;/li&gt;
&lt;li&gt;enable:ena&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Flutter 与 iOS 功能比较</title>
      <link>https://liupengkun1993.github.io/post/flutter/flutter-%E4%B8%8E-ios-%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83/</link>
      <pubDate>Wed, 06 May 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/flutter/flutter-%E4%B8%8E-ios-%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;此文档是学习过程中的总结，文章详情：&lt;a href=&#34;https://flutterchina.club/flutter-for-ios/#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8&#34;&gt;https://flutterchina.club/flutter-for-ios/#数据库和本地存储&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;views&#34;&gt;Views&lt;/h2&gt;
&lt;h3 id=&#34;uiview-相当于-flutter-中的什么&#34;&gt;UIView 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;Widget 类似于 UIView，两者区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生存时间不同，widgets 一直存在且保持不变，直到当它们需要被改变，当 widgets 和它们的状态被改变时，Flutter 会构建一颗新的 widgets 树； views 在改变时并不会被重新创建。&lt;/li&gt;
&lt;li&gt;Flutter 的 widgets 非常轻量。widgets 本身并不是什么控件，也不会被直接绘制出什么，而只是 UI 的描述。&lt;/li&gt;
&lt;li&gt;iOS 上更新 views，只需要直接改变它们就可以了。在 Flutter 中，widgets 是不可变的，而且不能被直接更新。你需要去操纵 widget 的 state。&lt;/li&gt;
&lt;li&gt;iOS 中可以通过约束或者 frame 来布局，Flutter 中，可以通过编写一个 widget 树来声明布局（可以给任何的 widget 添加 padding），这里是 &lt;a href=&#34;https://flutter.dev/docs/development/ui/widgets/layout&#34;&gt;Flutter 提供的布局&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;在 iOS 中，可以在父 view 中调用 addSubview() 或在子 view 中调用 removeFromSuperview() 来动态地添加或移除子 views。在 Flutter 中，由于 widget 不可变，所以没有和 addSubview() 直接等价的东西。作为替代，可以向 parent 传入一个返回 widget 的函数，并用一个布尔值来控制子 widget 的创建。&lt;/li&gt;
&lt;li&gt;在 iOS 中，可以通过调用 animate(withDuration:animations:) 方法来给一个 view 创建动画。在 Flutter 中，使用动画库来包裹 widgets，而不是创建一个动画 widget。在 Flutter 中，使用 AnimationController。这是一个可以暂停、寻找、停止、反转动画的 Animation&lt;!-- raw HTML omitted --&gt; 类型。它需要一个 Ticker 当 vsync 发生时来发送信号，并且在每帧运行时创建一个介于 0 和 1 之间的线性插值（interpolation）。你可以创建一个或多个的 Animation 并附加给一个 controller。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘图&#34;&gt;绘图&lt;/h3&gt;
&lt;p&gt;在 iOS 上，你通过 CoreGraphics 来在屏幕上绘制线条和形状。Flutter 有一套基于 Canvas 类的不同的 API，还有 CustomPaint 和 CustomPainter 这两个类来帮助你绘图。后者实现你在 canvas 上的绘图算法。&lt;/p&gt;
&lt;h3 id=&#34;怎么创建自定义的-widgets&#34;&gt;怎么创建自定义的 widgets&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你编写 UIView 的子类，或使用已经存在的 view 来重载并实现方法，以达到特定的功能。在 Flutter 中，你会组合（composing）多个小的 widgets 来构建一个自定义的 widget（而不是扩展它）。&lt;/p&gt;
&lt;h2 id=&#34;导航&#34;&gt;导航&lt;/h2&gt;
&lt;h3 id=&#34;页面之间跳转&#34;&gt;页面之间跳转&lt;/h3&gt;
&lt;p&gt;在 iOS 中，可以使用管理了 view controller 栈的 UINavigationController 来在不同的 view controller 之间跳转。&lt;/p&gt;
&lt;p&gt;Flutter 也有类似的实现，使用了 Navigator 和 Routes。一个路由是 App 中“屏幕”或“页面”的抽象，而一个 Navigator 是管理多个路由的 widget 。可以粗略地把一个路由对应到一个 UIViewController。Navigator 的工作原理和 iOS 中 UINavigationController 非常相似，当你想跳转到新页面或者从新页面返回时，它可以 push() 和 pop() 路由。&lt;/p&gt;
&lt;h3 id=&#34;跳转到其他-app&#34;&gt;跳转到其他 App&lt;/h3&gt;
&lt;p&gt;在 iOS 中，要跳转到其他 App，需要一个特定的 URL Scheme。对系统级别的 App 来说，这个 scheme 取决于 App。为了在 Flutter 中实现这个功能，你可以创建一个原生平台的整合层，或者使用现有的 plugin，例如 &lt;a href=&#34;https://pub.dartlang.org/packages/url_launcher&#34;&gt;url_launcher&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;线程和异步&#34;&gt;线程和异步&lt;/h2&gt;
&lt;h3 id=&#34;怎么编写异步的代码&#34;&gt;怎么编写异步的代码&lt;/h3&gt;
&lt;p&gt;Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。&lt;/p&gt;
&lt;p&gt;Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。&lt;/p&gt;
&lt;h3 id=&#34;把工作放到后台线程&#34;&gt;把工作放到后台线程&lt;/h3&gt;
&lt;p&gt;由于 Flutter 是单线程并且跑着一个 event loop 的（就像 Node.js 那样），你不必为线程管理或是开启后台线程而操心。如果你正在做 I/O 操作，如访问磁盘或网络请求，安全地使用 async / await 就完事了。如果，在另外的情况下，你需要做让 CPU 执行繁忙的计算密集型任务，你需要使用 Isolate 来避免阻塞 event loop。&lt;/p&gt;
&lt;p&gt;Isolates 是分离的运行线程，并且不和主线程的内存堆共享内存。这意味着你不能访问主线程中的变量，或者使用 setState() 来更新 UI。正如它们的名字一样，Isolates 不能共享内存。&lt;/p&gt;
&lt;h3 id=&#34;发起网络请求&#34;&gt;发起网络请求&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://pub.dartlang.org/packages/http&#34;&gt;http&lt;/a&gt; 做网络请求非常简单，类似于 AFNetworking 或 Alamofire。&lt;/p&gt;
&lt;h3 id=&#34;加载进度条&#34;&gt;加载进度条&lt;/h3&gt;
&lt;p&gt;在 iOS 中，在后台运行耗时任务时你会使用 UIProgressView。在 Flutter 中，使用一个 ProgressIndicator widget。通过一个布尔 flag 来控制是否展示进度。在任务开始时，告诉 Flutter 更新状态，并在结束后隐去。&lt;/p&gt;
&lt;h2 id=&#34;工程结构本地化依赖和资源&#34;&gt;工程结构、本地化、依赖和资源&lt;/h2&gt;
&lt;h3 id=&#34;怎么在-flutter-中引入-image-assets多分辨率怎么办&#34;&gt;怎么在 Flutter 中引入 image assets？多分辨率怎么办？&lt;/h3&gt;
&lt;p&gt;iOS 把 images 和 assets 作为不同的东西，而 Flutter 中只有 assets。Flutter 中的 assets 可以是任意类型的文件，而不仅仅是图片。例如，你可以把 json 文件放置到 my-assets 文件夹中。&lt;/p&gt;
&lt;p&gt;对于图片，Flutter 像 iOS 一样，遵循了一个简单的基于像素密度的格式。Image assets 可能是 1.0x 2.0x 3.0x 或是其他的任何倍数。&lt;/p&gt;
&lt;h3 id=&#34;在哪里放置字符串怎么做本地化&#34;&gt;在哪里放置字符串？怎么做本地化？&lt;/h3&gt;
&lt;p&gt;不像 iOS 拥有一个 Localizable.strings 文件，Flutter 目前并没有一个用于处理字符串的系统。目前，最佳实践是把你的文本拷贝到静态区，并在这里访问。&lt;/p&gt;
&lt;p&gt;默认情况下，Flutter 只支持美式英语字符串。如果你要支持其他语言，请引入 flutter_localizations 包。你可能也要引入 intl 包来支持其他的 i10n 机制，比如日期/时间格式化。&lt;/p&gt;
&lt;h3 id=&#34;cocoapods-相当于什么如何添加依赖&#34;&gt;Cocoapods 相当于什么？如何添加依赖？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你把依赖添加到 Podfile 中。Flutter 使用 Dart 构建系统和 Pub 包管理器来处理依赖。这些工具将本机 Android 和 iOS 包装应用程序的构建委派给相应的构建系统。&lt;/p&gt;
&lt;p&gt;如果你的 Flutter 工程中的 iOS 文件夹中拥有 Podfile，请仅在你为每个平台集成时使用它。总体来说，使用 pubspec.yaml 来在 Flutter 中声明外部依赖。一个可以找到优秀 Flutter 包的地方是 &lt;a href=&#34;https://pub.dev/flutter/packages&#34;&gt;Pub&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;viewcontrollers&#34;&gt;ViewControllers&lt;/h2&gt;
&lt;h3 id=&#34;viewcontroller-相当于-flutter-中的什么&#34;&gt;ViewController 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，一个 ViewController 代表了用户界面的一部分，最常用于一个屏幕，或是其中一部分。它们被组合在一起用于构建复杂的用户界面，并帮助你拆分 App 的 UI。在 Flutter 中，这一任务回落到了 widgets 中。就像在界面导航部分提到的一样，一个屏幕也是被 widgets 来表示的，因为“万物皆 widget！”。使用 Navigator 在 Route 之间跳转，或者渲染相同数据的不同状态。&lt;/p&gt;
&lt;h3 id=&#34;怎么监听-ios-中的生命周期事件&#34;&gt;怎么监听 iOS 中的生命周期事件？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你可以重写 ViewController 中的方法来捕获它的视图的生命周期，或者在 AppDelegate 中注册生命周期的回调函数。在 Flutter 中没有这两个概念，但你可以通过 hook WidgetsBinding 观察者来监听生命周期事件，并监听 didChangeAppLifecycleState() 的变化事件。&lt;/p&gt;
&lt;p&gt;可观察的生命周期事件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inactive - 应用处于不活跃的状态，并且不会接受用户的输入。这个事件仅工作在 iOS 平台，在 Android 上没有等价的事件。&lt;/li&gt;
&lt;li&gt;paused - 应用暂时对用户不可见，虽然不接受用户输入，但是是在后台运行的。&lt;/li&gt;
&lt;li&gt;resumed - 应用可见，也响应用户的输入。&lt;/li&gt;
&lt;li&gt;suspending - 应用暂时被挂起，在 iOS 上没有这一事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多细节：&lt;a href=&#34;https://docs.flutter.io/flutter/dart-ui/AppLifecycleState-class.html&#34;&gt;AppLifecycleState&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;布局&#34;&gt;布局&lt;/h2&gt;
&lt;h3 id=&#34;uitableview-和-uicollectionview-相当于-flutter-中的什么&#34;&gt;UITableView 和 UICollectionView 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你可能用 UITableView 或 UICollectionView 来展示一个列表。在 Flutter 中，你可以用 ListView 来达到相似的实现。在 iOS 中，你通过代理方法来确定行数，每一个 index path 的单元格，以及单元格的尺寸。由于 Flutter 中 widget 的不可变特性，你需要向 ListView 传递一个 widget 列表，Flutter 会确保滚动是快速且流畅的。&lt;/p&gt;
&lt;h3 id=&#34;怎么知道列表的哪个元素被点击了&#34;&gt;怎么知道列表的哪个元素被点击了？&lt;/h3&gt;
&lt;p&gt;iOS 中，你通过 tableView:didSelectRowAtIndexPath: 代理方法来实现。在 Flutter 中，使用传递进来的 widget 的 touch handle。&lt;/p&gt;
&lt;h3 id=&#34;怎么动态地更新-listview&#34;&gt;怎么动态地更新 ListView？&lt;/h3&gt;
&lt;p&gt;一个更新 ListView 的简单方法是，在 setState() 中创建一个新的 list，并把旧 list 的数据拷贝给新的 list。虽然这样很简单，但当数据集很大时，并不推荐这样做。&lt;/p&gt;
&lt;p&gt;一个推荐的、高效的且有效的做法是，使用 ListView.Builder 来构建列表。这个方法在你想要构建动态列表，或是列表拥有大量数据时会非常好用。&lt;/p&gt;
&lt;h3 id=&#34;scrollview-相当于-flutter-里的什么&#34;&gt;ScrollView 相当于 Flutter 里的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你给 view 包裹上 ScrollView 来允许用户在需要时滚动你的内容。在 Flutter 中，最简单的方法是使用 ListView widget。它表现得既和 iOS 中的 ScrollView 一致，也能和 TableView 一致，因为你可以给它的 widget 做垂直排布。&lt;/p&gt;
&lt;h2 id=&#34;手势检测及触摸事件处理&#34;&gt;手势检测及触摸事件处理&lt;/h2&gt;
&lt;h3 id=&#34;怎么给-flutter-的-widget-添加一个点击监听者&#34;&gt;怎么给 Flutter 的 widget 添加一个点击监听者？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你给一个 view 添加 GestureRecognizer 来处理点击事件。在 Flutter 中，有两种方法来添加点击监听者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 widget 本身支持事件监测，直接传递给它一个函数，并在这个函数里实现响应方法。&lt;/li&gt;
&lt;li&gt;如果 widget 本身不支持事件监测，则在外面包裹一个 GestureDetector，并给它的 onTap 属性传递一个函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么处理-widget-上的其他手势&#34;&gt;怎么处理 widget 上的其他手势？&lt;/h3&gt;
&lt;p&gt;使用 GestureDetector 你可以监听更广阔范围内的手势，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tapping
&lt;ul&gt;
&lt;li&gt;onTapDown — 在特定位置轻触手势接触了屏幕。&lt;/li&gt;
&lt;li&gt;onTapUp — 在特定位置产生了一个轻触手势，并停止接触屏幕。&lt;/li&gt;
&lt;li&gt;onTap — 产生了一个轻触手势。&lt;/li&gt;
&lt;li&gt;onTapCancel — 触发了 onTapDown 但没能触发 tap。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Double tapping
&lt;ul&gt;
&lt;li&gt;onDoubleTap — 用户在同一个位置快速点击了两下屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Long pressing
&lt;ul&gt;
&lt;li&gt;onLongPress — 用户在同一个位置长时间接触屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vertical dragging
&lt;ul&gt;
&lt;li&gt;onVerticalDragStart — 接触了屏幕，并且可能会垂直移动。&lt;/li&gt;
&lt;li&gt;onVerticalDragUpdate — 接触了屏幕，并继续在垂直方向移动。&lt;/li&gt;
&lt;li&gt;onVerticalDragEnd — 之前接触了屏幕并垂直移动，并在停止接触屏幕前以某个垂直的速度移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizontal dragging
&lt;ul&gt;
&lt;li&gt;onHorizontalDragStart — 接触了屏幕，并且可能会水平移动。&lt;/li&gt;
&lt;li&gt;onHorizontalDragUpdate — 接触了屏幕，并继续在水平方向移动。&lt;/li&gt;
&lt;li&gt;onHorizontalDragEnd — 之前接触屏幕并水平移动的触摸点与屏幕分离。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主题和文字&#34;&gt;主题和文字&lt;/h2&gt;
&lt;h3 id=&#34;怎么给-app-设置主题&#34;&gt;怎么给 App 设置主题？&lt;/h3&gt;
&lt;p&gt;Flutter 实现了一套漂亮的 MD 组件，并且开箱可用。它接管了一大堆你需要的样式和主题。&lt;/p&gt;
&lt;p&gt;为了充分发挥你的 App 中 MD 组件的优势，声明一个顶级 widget，MaterialApp，用作你的 App 入口。MaterialApp 是一个便利组件，包含了许多 App 通常需要的 MD 风格组件。它通过一个 WidgetsApp 添加了 MD 功能来实现。&lt;/p&gt;
&lt;h3 id=&#34;怎么给-text-widget-设置自定义字体&#34;&gt;怎么给 Text widget 设置自定义字体？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你在项目中引入任意的 ttf 文件，并在 info.plist 中设置引用。在 Flutter 中，在文件夹中放置字体文件，并在 pubspec.yaml 中引用它，然后在你的 Text widget 中指定字体。&lt;/p&gt;
&lt;h2 id=&#34;表单输入&#34;&gt;表单输入&lt;/h2&gt;
&lt;h3 id=&#34;flutter-中表单怎么工作我怎么拿到用户的输入&#34;&gt;Flutter 中表单怎么工作？我怎么拿到用户的输入？&lt;/h3&gt;
&lt;p&gt;在表单处理的实践中，就像在 Flutter 中任何其他的地方一样，要通过特定的 widgets。如果你有一个 TextField 或是 TextFormField，你可以通过 &lt;a href=&#34;https://docs.flutter.io/flutter/widgets/TextEditingController-class.html&#34;&gt;TextEditingController&lt;/a&gt; 来获得用户输入。&lt;/p&gt;
&lt;h3 id=&#34;text-field-中的-placeholder-相当于什么&#34;&gt;Text field 中的 placeholder 相当于什么？&lt;/h3&gt;
&lt;p&gt;在 Flutter 中，你可以轻易地通过向 Text widget 的装饰构造器参数重传递 InputDecoration 来展示“小提示”，或是占位符文字。&lt;/p&gt;
&lt;h3 id=&#34;怎么展示验证错误信息&#34;&gt;怎么展示验证错误信息？&lt;/h3&gt;
&lt;p&gt;就像展示“小提示”一样，向 Text widget 的装饰器构造器参数中传递一个 InputDecoration。然而，你并不想在一开始就显示错误信息。相反，当用户输入了验证信息，更新状态，并传入一个新的 InputDecoration 对象。&lt;/p&gt;
&lt;h2 id=&#34;和硬件第三方服务以及平台交互&#34;&gt;和硬件、第三方服务以及平台交互&lt;/h2&gt;
&lt;h3 id=&#34;怎么和平台以及平台的原生代码交互&#34;&gt;怎么和平台，以及平台的原生代码交互？&lt;/h3&gt;
&lt;p&gt;Flutter 提供了 &lt;a href=&#34;https://flutter.io/platform-channels/&#34;&gt;platform channels&lt;/a&gt; ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。&lt;/p&gt;
&lt;p&gt;除了直接使用平台管道之外，你还可以使用一系列预先制作好的 &lt;a href=&#34;https://flutter.io/using-packages/&#34;&gt;plugins&lt;/a&gt;。例如，你可以直接使用插件来访问相机胶卷或是设备的摄像头，而不必编写你自己的集成层代码。你可以在 &lt;a href=&#34;https://pub.dartlang.org&#34;&gt;Pub&lt;/a&gt; 上找到插件，这是一个 Dart 和 Flutter 的开源包仓库。其中一些包可能会支持集成 iOS 或 Android，或两者均可。&lt;/p&gt;
&lt;p&gt;如果你在 Pub 上找不到符合你需求的插件，你可以&lt;a href=&#34;https://flutter.io/developing-packages/&#34;&gt;自己编写&lt;/a&gt;，并且发布在 &lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/developing-packages&#34;&gt;Pub&lt;/a&gt; 上。&lt;/p&gt;
&lt;h3 id=&#34;怎么访问-gps-传感器&#34;&gt;怎么访问 GPS 传感器？&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&#34;https://pub.dartlang.org/packages/location&#34;&gt;location&lt;/a&gt; 社区插件。&lt;/p&gt;
&lt;h3 id=&#34;怎么访问摄像头&#34;&gt;怎么访问摄像头？&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&#34;https://pub.dartlang.org/packages/image_picker&#34;&gt;image_picker&lt;/a&gt; 插件。&lt;/p&gt;
&lt;h3 id=&#34;怎么登录-facebook&#34;&gt;怎么登录 Facebook？&lt;/h3&gt;
&lt;p&gt;登录 Facebook 可以使用 &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_facebook_login&#34;&gt;flutter_facebook_login&lt;/a&gt; 社区插件。&lt;/p&gt;
&lt;h3 id=&#34;怎么创建自己的原生集成层&#34;&gt;怎么创建自己的原生集成层？&lt;/h3&gt;
&lt;p&gt;如果有一些 Flutter 和社区插件遗漏的平台相关的特性，可以根据 &lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/developing-packages&#34;&gt;developing packages and plugins&lt;/a&gt; 页面构建自己的插件。&lt;/p&gt;
&lt;h2 id=&#34;数据库和本地存储&#34;&gt;数据库和本地存储&lt;/h2&gt;
&lt;h3 id=&#34;怎么在-flutter-中访问-userdefaults&#34;&gt;怎么在 Flutter 中访问 UserDefaults？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你可以使用属性列表来存储键值对的集合，即我们熟悉的 UserDefaults。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，可以使用 &lt;a href=&#34;https://pub.dartlang.org/packages/shared_preferences&#34;&gt;Shared Preferences plugin&lt;/a&gt; 来达到相似的功能。它包裹了 UserDefaluts 以及 Android 上等价的 SharedPreferences 的功能。&lt;/p&gt;
&lt;h3 id=&#34;coredata-相当于-flutter-中的什么&#34;&gt;CoreData 相当于 Flutter 中的什么？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你通过 CoreData 来存储结构化的数据。这是一个 SQL 数据库的上层封装，让查询和关联模型变得更加简单。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，使用 &lt;a href=&#34;https://pub.dartlang.org/packages/sqflite&#34;&gt;SQFlite&lt;/a&gt; 插件来实现这个功能。&lt;/p&gt;
&lt;h2 id=&#34;通知&#34;&gt;通知&lt;/h2&gt;
&lt;h3 id=&#34;怎么推送通知&#34;&gt;怎么推送通知？&lt;/h3&gt;
&lt;p&gt;在 iOS 中，你需要向苹果开发者平台中注册来允许推送通知。&lt;/p&gt;
&lt;p&gt;在 Flutter 中，使用 &lt;a href=&#34;https://pub.dartlang.org/packages/firebase_messaging&#34;&gt;firebase_messaging&lt;/a&gt; 插件来实现这一功能。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Docker 用法</title>
      <link>https://liupengkun1993.github.io/post/docker/docker-%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 28 Apr 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/docker/docker-%E7%94%A8%E6%B3%95/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。
容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是 Docker 的一些常见用法：&lt;/p&gt;
&lt;h3 id=&#34;拉取镜像&#34;&gt;拉取镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker pull NAME&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:TAG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker pull centos:latest&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;查看镜像列表列出本地的所有-images&#34;&gt;查看镜像列表，列出本地的所有 images&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker images &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;NAME&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker images&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Docker/docker01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;REPOSITORY：表示镜像的仓库源&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;TAG：镜像的标签&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;IMAGE ID：镜像ID&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;CREATED：镜像创建时间&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;SIZE：镜像大小&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;查看容器列表可看到我们创建过的所有-container&#34;&gt;查看容器列表，可看到我们创建过的所有 container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker ps &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker ps -a&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;启动-container&#34;&gt;启动 Container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker run 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;sudo docker run -it 镜像id /bin/bash&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;停止-container&#34;&gt;停止 Container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker stop 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;重启-container&#34;&gt;重启 Container&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;sudo docker restart 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;通过-id-删除镜像&#34;&gt;通过 ID 删除镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rmi 镜像id&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;docker-批量删除镜像&#34;&gt;Docker 批量删除镜像&lt;/h3&gt;
&lt;p&gt;Docker 使用一段时间后，可能会存在许多无用的镜像。一个个删除比较麻烦，可以用下面的命令进行批量删除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; 会查看所有的镜像；&lt;code&gt;grep &amp;quot;none&amp;quot;&lt;/code&gt; 命令会筛选所有名字包括 &lt;code&gt;none&lt;/code&gt; 以及标签为 &lt;code&gt;none&lt;/code&gt; 的镜像；&lt;code&gt;awk &#39;{print $3}&#39;&lt;/code&gt; 会处理筛选后的文本，打印所有镜像 &lt;code&gt;id&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Docker/docker02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除容器及镜像详细&#34;&gt;删除容器及镜像详细&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;杀死所有正在运行的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除所有已经停止的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rm &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除所有未打 dangling 标签的镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images -q -f &lt;span class=&#34;nv&#34;&gt;dangling&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除所有镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;问题汇总&#34;&gt;问题汇总&lt;/h4&gt;
&lt;p&gt;1.报错 &lt;code&gt;Error response from daemon: conflict: unable to delete 4a67b006c338 (cannot be forced) - image is being used by running container 451b7b600276&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法：使用 &lt;code&gt;docker rmi -f 镜像id&lt;/code&gt; 进行删除&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;学习资料：https://www.runoob.com/docker/docker-tutorial.html&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Mac 配置 Flutter 环境，运行 iOS Android 两端</title>
      <link>https://liupengkun1993.github.io/post/flutter/mac-%E9%85%8D%E7%BD%AE-flutter-%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C-ios-android-%E4%B8%A4%E7%AB%AF/</link>
      <pubDate>Wed, 08 Apr 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/flutter/mac-%E9%85%8D%E7%BD%AE-flutter-%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C-ios-android-%E4%B8%A4%E7%AB%AF/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;Flutter 入门，从下载 Flutter SDK 到成功运行在 iOS Android 平台。编辑器：Xcode(11.3.1)、 Android Studio(3.2.1)、VSCode(1.43.2)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1在-flutter-官网httpsflutterdevdocsdevelopmenttoolssdkreleasestabmacosmacos-下载其最新可用的安装包解压之后放在想安装的目录下记住文件目录比如usersliupengkundocumentsflutter_learn&#34;&gt;1.在 &lt;a href=&#34;https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos&#34;&gt;Flutter 官网&lt;/a&gt; 下载其最新可用的安装包，解压之后，放在想安装的目录下，记住文件目录，比如：&lt;code&gt;/Users/liupengkun/Documents/flutter_learn&lt;/code&gt;。&lt;/h4&gt;
&lt;h4 id=&#34;2接着打开终端输入命令行-open-bash_profile打开文件后添加-flutter-相关工具到-path-中&#34;&gt;2.接着打开终端，输入命令行 &lt;code&gt;open ~/.bash_profile&lt;/code&gt;，打开文件后，添加 flutter 相关工具到 path 中：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;// 路径要使用你上面放置Sdk的目录路径
export PATH=/Users/liupengkun/Documents/flutter_learn/flutter/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;3使用镜像由于在国内访问-flutter-有时可能会受到限制flutter-官方为中国开发者搭建了临时镜像此镜像为临时镜像并不能保证一直可用读者可以参考-using-flutter-in-chinahttpsflutteriocommunitychina-以获得有关镜像服务器的最新动态&#34;&gt;3.使用镜像，由于在国内访问 Flutter 有时可能会受到限制，Flutter 官方为中国开发者搭建了临时镜像（此镜像为临时镜像，并不能保证一直可用，读者可以参考 &lt;a href=&#34;https://flutter.io/community/china&#34;&gt;Using Flutter in China&lt;/a&gt; 以获得有关镜像服务器的最新动态。）：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;export PUB_HOSTED_URL=https://pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;4改完之后关闭-bash_profile-文件执行-source-bash_profile-更新配置环境变量&#34;&gt;4.改完之后，关闭 bash_profile 文件，执行 &lt;code&gt;source ~/.bash_profile&lt;/code&gt; 更新配置环境变量。&lt;/h4&gt;
&lt;h4 id=&#34;5接着终端执行-flutter-doctor-检测环境报了以下问题&#34;&gt;5.接着终端执行 &lt;code&gt;flutter doctor&lt;/code&gt; 检测环境，报了以下问题：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Flutter/flutter_01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个人的环境不太一样，因此 flutter doctor 检测出来的问题也会有差异。因为我电脑之前使用过 Xcode、 Android Studio、VSCode，所以报的问题相对较少，IntelliJ IDEA 倒是用的不多。&lt;/p&gt;
&lt;p&gt;接下来开始解决报的问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个简单，接受这些协议即可。直接终端执行 &lt;code&gt;flutter doctor --android-licenses&lt;/code&gt;，一直输入 &lt;code&gt;y&lt;/code&gt; 并换行，直至成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;✗ Flutter plugin not installed; this adds Flutter specific functionality.
✗ Dart plugin not installed; this adds Dart specific functionality.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个意思也很清楚，打开 AS，在 configure 里安装 Flutter 以及 Dart 插件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Flutter/flutter_02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;! No devices available&lt;/code&gt; 的问题后面会讲到。&lt;/p&gt;
&lt;p&gt;接着重新在终端执行 flutter doctor：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Flutter/flutter_03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现刚刚的两个问题已经好了，关于 IntelliJ IDEA，暂时我这边很少用到 IntelliJ IDEA，先搁置，其实想解决也很简单，在 IntelliJ IDEA 里安装 Flutter 以及 Dart 插件就可以了。&lt;/p&gt;
&lt;h4 id=&#34;6创建-flutter-项目并运行&#34;&gt;6.创建 Flutter 项目并运行&lt;/h4&gt;
&lt;p&gt;cd 到存放项目的文件夹，然后执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;flutter create hello_flutter
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;稍等一会儿，项目就构建成功了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Flutter/flutter_04.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开上图 ios 或 android 项目，并运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Flutter/flutter_05.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;! No devices available&lt;/code&gt; 的问题，我这里测试的结论是，用模拟器运行的话是没作用的，只有真机运行，才会有改变：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/Flutter/flutter_06.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;2020.04.08 更新
&lt;ul&gt;
&lt;li&gt;问题 1：之前安装并配置好了 flutter，但是之后运行 &lt;code&gt;flutter doctor&lt;/code&gt;时，报错 &lt;code&gt;zsh: command not found: flutter&lt;/code&gt;，暂时性解决方案是执行&lt;code&gt;source ~/.bash_profile&lt;/code&gt;；彻底解决方案是复制一份 &lt;code&gt;.bash_profile&lt;/code&gt; 文件，改名为 &lt;code&gt;.zprofile&lt;/code&gt;，终端执行 &lt;code&gt;source ~./zprofile&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;问题 2：用 VSCode 运行项目到 iOS 模拟器时，一直 &lt;code&gt;Launching...&lt;/code&gt;，用 Xcode 直接运行也不行，解决方案是手动删除 &lt;code&gt;~/Library/Developer/Xcode/DerivedData&lt;/code&gt; 文件夹下的文件，重新运行。&lt;/li&gt;
&lt;li&gt;问题 3：执行命令时有时卡在了 &lt;code&gt;Waiting for another flutter command to release the startup lock&lt;/code&gt;，解决方案是删除 flutter 的安装目录 /bin/cache/ 下的 lockfile 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>高性能iOS应用开发 - iOS性能</title>
      <link>https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-ios%E6%80%A7%E8%83%BD/</link>
      <pubDate>Tue, 31 Mar 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-ios%E6%80%A7%E8%83%BD/</guid>
      
        <description>&lt;h1 id=&#34;高性能ios应用开发---ios性能&#34;&gt;高性能iOS应用开发 - iOS性能&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;《高性能iOS应用开发》是一本质量很高的 iOS 书籍，我从此书中系统的学到了很多东西。这篇博客是《高性能iOS应用开发》一书第三部分“iOS性能”的读书笔记，因为我对 APP 性能比较感兴趣，所以就先从第三部分“iOS性能”开始了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_High_Performance/01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-应用启动&#34;&gt;1. 应用启动&lt;/h2&gt;
&lt;p&gt;iOS 应用在启动时会调用 &lt;code&gt;UIApplicationMain&lt;/code&gt; 方法，并传入 &lt;code&gt;UIApplicationDelegate&lt;/code&gt; 类的引用。委托接收应用范围的事件，并且有明确的生命周期，&lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; 方法表明应用已经启动。&lt;/p&gt;
&lt;p&gt;应用的窗口有一个 rootViewController，对应的 UIViewController 对象同样具有明确的生命周期。UIViewController 的方法&lt;code&gt;viewDidAppear:&lt;/code&gt;执行时，说明启动已完成。&lt;/p&gt;
&lt;p&gt;APP 启动过程中，应尽量减少不必要的操作，从而缩短应用的启动时长，实现更好的用户体验。应用有四种启动类型。&lt;/p&gt;
&lt;h3 id=&#34;11-首次启动&#34;&gt;1.1 首次启动&lt;/h3&gt;
&lt;p&gt;安装应用后的首次启动。此时没有之前的状态，也没有本地缓存。这意味着将会出现以下两种情况中的一种:没有需要加载的内容(因此加载时间会缩短)，或者需要从服务器上下载初始数据(可能需要很长的加载时间)。在应用首次启动时，你可以选择提供引导图来总结应用的功能和用法。&lt;/p&gt;
&lt;p&gt;首次启动时，应用通常会执行多个任务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载应用的默认项(NSUserDefaults、捆绑的配置等)&lt;/li&gt;
&lt;li&gt;检查私有 / 测试版本&lt;/li&gt;
&lt;li&gt;初始化应用标识符，包括但不限于对匿名用户使用的供应商标识符(Identifier for
Vendor，IDFV)、广告标识符(Identifier for Advertiser，IDFA)等&lt;/li&gt;
&lt;li&gt;初始化崩溃报告系统&lt;/li&gt;
&lt;li&gt;建立 A/B 测试&lt;/li&gt;
&lt;li&gt;建立分析方法&lt;/li&gt;
&lt;li&gt;使用操作或 GCD 建立网络&lt;/li&gt;
&lt;li&gt;建立 UI 基础设施(导航、主题、初始 UI)&lt;/li&gt;
&lt;li&gt;显示登录提示或从服务器加载最新内容及其他更新&lt;/li&gt;
&lt;li&gt;建立内存缓存(如图片缓存)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述列举的内容只是应用在首次启动时可能执行的任务。其中一些还会在后续启动中执行。问题是，任务数量的快速增加必然会导致应用的启动速度变慢。&lt;/p&gt;
&lt;p&gt;那么怎么避免这样的问题呢？可以遵循下述具体步骤，拆解任务列表，从而获得更高的性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定在展示 UI 前必须执行的任务。如果应用是第一次启动，那么没有必要加载任何用户偏好，如主题、刷新间隔、缓存大小等。此时是没有任何自定义值的。初始缓存肆意增长也是没问题的，因为它的增长不会超过最终的限制值。崩溃报告系统应该第一个被初始化。&lt;/li&gt;
&lt;li&gt;按顺序执行任务。排序是非常重要的，因为任务之间可能具有相互依赖性，同时，排序还可以节省用户的宝贵时间。&lt;/li&gt;
&lt;li&gt;将任务拆分为两类:一类是必须在主线程中执行的任务，另一类是可以在其他线程中执行的任务 ，然后分别执行。还可以进一步将在非主线程中执行的任务分为可以并发执行的和不能并发执行的。&lt;/li&gt;
&lt;li&gt;其他任务可以在加载 UI 后执行或异步执行。延迟其他子系统(如记录仪和分析方法)的初始化。在应用的后续阶段将一些操作(例如，写日志消息或跟踪事件)放入队列中，直到子系统完全完成初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-冷启动&#34;&gt;1.2 冷启动&lt;/h3&gt;
&lt;p&gt;应用后续的启动。在启动期间，可能需要恢复原来的状态，例如，游戏中达到的最高等级、消息应用中的聊天记录、新闻应用中上一次同步的文章、已登录用户的证书，或者 仅仅是用户已经使用过的引导图标记符。&lt;/p&gt;
&lt;p&gt;冷启动中一个较为重要的任务是，载入之前的状态。在应用中，显示给用户(登录后)的第一个画面是 feed 流。如果用户在以前的启动中登录过，并且数据已经同步，那我们就会考虑加载之前已经缓存的 feed 流。&lt;/p&gt;
&lt;p&gt;为了实现向用户展示 feed 流的任务，必须向服务器请求最近的更新，同时还要从本地缓存加载数据。这些行为是不用思考就知道的。但是，以下几点却是不容忽视的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示有用且有意义的 UI 所需要的最少信息数目(min)。&lt;/li&gt;
&lt;li&gt;记录从本地缓存加载 M 条信息花费的时间(记作 tl)。&lt;/li&gt;
&lt;li&gt;记录从服务器获取最新的 M 条信息花费的时间(记作 tr)。&lt;/li&gt;
&lt;li&gt;为了获得更快的速度，任何时刻在内存中存储的最大信息数目(max)，特别是在快速滑动和滚动时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-热重启动&#34;&gt;1.3 热(重)启动&lt;/h3&gt;
&lt;p&gt;这是指当应用处于后台，但并未被挂起或关闭时，用户切换至应用而触发的启动。在这种情况下，当用户通过点击应用图标或深层链接返回应用时，不会触发启动时的回调，而是直接用 &lt;code&gt;applicationDidBecomeActive:&lt;/code&gt;(或 &lt;code&gt;application:openURL:source:annotation:&lt;/code&gt;)回调。&lt;/p&gt;
&lt;p&gt;通常来说，这种情况和继续执行没什么区别，只是视图控制器可能需要处理一些额外的事件。&lt;/p&gt;
&lt;p&gt;热启动是指切换到一个已经运行了的应用。两个原因可能会使应用变成非激活状态:一是用户向下拉拽状态栏，二是用户点击 home 键或切换至其他应用。&lt;/p&gt;
&lt;p&gt;热启动有两种情境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户点击图标&lt;/li&gt;
&lt;li&gt;应用接收到深层链接&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;131-应用重启&#34;&gt;1.3.1 应用重启&lt;/h4&gt;
&lt;p&gt;当用户点击应用图标时，一般不需要执行其他特殊的操作。&lt;/p&gt;
&lt;p&gt;应用处于安全状态，或者运行很多动画时，可以监测背景和前景通知。在第一种情况下， 应用每次进入前景状态时，都会展示登录界面;在后一种情况下，动画或者游戏状态会被暂停，需要恢复。&lt;/p&gt;
&lt;h4 id=&#34;132-深层链接&#34;&gt;1.3.2 深层链接&lt;/h4&gt;
&lt;p&gt;当应用接收到 &lt;code&gt;application:openURL:sourceApplication:annotation:&lt;/code&gt; 回调时，期望能跳转
到应用的特定页面，实现用户想要完成的操作。但此时的目标应用可能已经发生变化，处于某一特定状态了。&lt;/p&gt;
&lt;p&gt;如果深层链接需要从服务器获取数据，那么可以先展示与深层链接相关的原始页面，或者先展示一个进度条，等从服务器获取到了最新数据，再执行刷新操作。&lt;/p&gt;
&lt;h3 id=&#34;14-升级后的启动&#34;&gt;1.4 升级后的启动&lt;/h3&gt;
&lt;p&gt;应用升级以后的启动。通常而言，升级后的启动与冷启动没有差别。但是，不同的启动叫法表明了本地存储发生变化的时刻是不同的，这些变化包括模式、内容、之前版本挂起的同步操作，以及内部的 API/ 默认依赖。&lt;/p&gt;
&lt;p&gt;应用升级后的首次启动将遵循下列情形之一:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无本地缓存或应用完全放弃缓存;&lt;/li&gt;
&lt;li&gt;本地缓存可用，可以直接使用或需要切换至升级版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果无本地缓存或应用决定放弃缓存(例如，数据不可用或从服务器同步获取更快)，则不需要进行特殊处理。本地数据发生改变时通知用户。以下的最佳实践可以让用户有更好的体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果本地缓存可用，通知用户该情况。如果没有迁移到本地缓存的必要，则无需通知用户，因为本地缓存的使用是隐式的。&lt;/li&gt;
&lt;li&gt;如果必须花几分钟对数据进行迁移，那么向用户展示一个可以推迟该操作的选项。&lt;/li&gt;
&lt;li&gt;如果从服务器检索数据更快、更容易，因而必须放弃本地缓存的使用，那么这种情况下需要通知用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-用户界面&#34;&gt;2. 用户界面&lt;/h2&gt;
&lt;p&gt;当与 UI 进行交互时，大部分用户才注意到性能问题。如果某个应用在数据同步和刷新上耗时较长，或用户交互不够稳定，那么应用会被认为是迟钝的。&lt;/p&gt;
&lt;p&gt;功耗、网络使用率、本地存储等因素对用户来说是不可见的。因此，虽然这些因素是解决性能问题的要素，但 UI 却是应用的门面，如果 UI 反应迟钝，则必然会直接影响用户的反馈。&lt;/p&gt;
&lt;p&gt;还有一些无法控制的外部因素，如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络
&lt;ul&gt;
&lt;li&gt;弱网环境会增加同步所需的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬件
&lt;ul&gt;
&lt;li&gt;硬件越好，其提供的性能越高。与旧型号的 iPhone 相比，搭载新系统的新 iPhone 执行 速度更快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储
&lt;ul&gt;
&lt;li&gt;应用可以在存储容量不同的设备上运行，存储容量小至 16GB，大到 128GB，它们限制了应用在本地离线缓存数据的规模。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-视图控制器&#34;&gt;2.1 视图控制器&lt;/h3&gt;
&lt;p&gt;在应用开发的最初阶段，视图控制器都较为精简，状态较好。随着时间的推移，这些视图控制器慢慢变成了所有业务逻辑的垃圾场，代码量也增长至几千行。虽然逻辑的“总量”是不可避免的，但将代码重构成短小、可复用的方法是很好的主意。这样不仅能解除耦合，还可以发现无用的、重复的代码。&lt;/p&gt;
&lt;p&gt;下面列举了创建视图控制器时需要遵循的一些较为基本的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持视图控制器轻量。在 MVC 结构的应用中，控制器只是纽带，而不是存放所有业务逻辑的地方。它甚至不属于模型。业务逻辑应该属于服务层或业务逻辑组件。将它放在那里。&lt;/li&gt;
&lt;li&gt;不要在视图控制器中编写动画逻辑。动画可以在独立的动画类中实现，该类接受视图作为参数传入，这些视图就是用来运行动画的视图。然后，视图控制器会将动画添加至视图或转场效果上。&lt;/li&gt;
&lt;li&gt;使用数据源和委托协议，将代码按照数据检索、数据更新和其他的业务逻辑进行分离。 视图控制器只能用来选择正确的视图，并将它们连接到供应源。&lt;/li&gt;
&lt;li&gt;视图控制器响应来自视图的事件，如按钮点击事件或列表单元格的选择事件，然后将它们连接至数据接收器。&lt;/li&gt;
&lt;li&gt;视图控制器响应来自操作系统的 UI 相关事件，如方向变化或低内存警告。这可能会触发视图的重新布局。&lt;/li&gt;
&lt;li&gt;不要在视图控制器中使用代码手工布局 UI，也不要在视图控制器中实现全部的 UI、视图创建和视图布局逻辑等操作。&lt;/li&gt;
&lt;li&gt;比较好的方式是，创建一个实现了公共设置的基类视图控制器，其他视图控制器从这里继承就好。&lt;/li&gt;
&lt;li&gt;在各视图控制器之间，使用 category 创建可复用的代码。如果父视图控制器不能满足使用(例如，在应用中需要不同种类的视图控制器)，那就创建 category，并在 category 中加上自定义的方法或属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;211-视图加载&#34;&gt;2.1.1 视图加载&lt;/h4&gt;
&lt;p&gt;视图初始化时会涉及两个方法——loadView 和 viewDidLoad。&lt;/p&gt;
&lt;p&gt;如果通过覆写 loadView 方法创建了自定义 UI，你需要牢记以下几点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 view 属性设置到视图层级的根上。&lt;/li&gt;
&lt;li&gt;确保视图正被其他的视图控制器所共享。&lt;/li&gt;
&lt;li&gt;不要调用 [super loadView]。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在执行过程中，应该尽量缩短在 viewDidLoad 方法上花费的时间。具体来讲，将要被渲染的数据应该是已经可用的，或是在其他线程进行加载的。在 viewDidLoad 的完成中发生的任何延迟，都将导致与视图控制器相关的 UI 展示发生延迟。用户会卡在应用启动或前一个视图控制器中。&lt;/p&gt;
&lt;h4 id=&#34;212-视图层级&#34;&gt;2.1.2 视图层级&lt;/h4&gt;
&lt;p&gt;展示出来的 UI 是由嵌套在树形结构中的各层次视图组成的，它们的位置受自动布局或其他编排方式的约束。视图结构和渲染包括以下步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) 构造子视图。&lt;/li&gt;
&lt;li&gt;(2) 计算并提供约束。&lt;/li&gt;
&lt;li&gt;(3) 为子视图递归地执行步骤 1 和步骤 2。&lt;/li&gt;
&lt;li&gt;(4) 递归渲染。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视图层次越复杂，构建和渲染视图消耗的时间也就越长，因此要尽量减少视图层级。&lt;/p&gt;
&lt;h4 id=&#34;213-视图可见性&#34;&gt;2.1.3 视图可见性&lt;/h4&gt;
&lt;p&gt;视图控制器提供了四个生命周期方法，以接收有关视图可视性的通知。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;viewWillAppear: 当视图层级已经准备好，且视图即将被放入视图窗口时，此方法会被调用。在即将展示视图控制器或之前入栈(modal 或者其他)的视图控制器弹出时，这种情况就会发生。在这个时刻，过渡动画还未开始，视图对终端用户也是不可见的。不要启动任何视图动画，因为没有任何作用。&lt;/li&gt;
&lt;li&gt;viewDidAppear: 当视图在视图窗口展示出来，且过渡动画完成后，此方法会被调用。因为动画会耗费约 300 毫秒，所以，对比 viewWillAppear: 和 viewDidLoad:，viewDidAppear: 和 viewWillAppear: 之间的时间差可能会比较大。启动或恢复任何想要呈现给用户的视图动画。&lt;/li&gt;
&lt;li&gt;viewWillDisappear: 该方法表示视图将要从屏幕上隐藏起来。这可能是因为其他视图控制器想要接管屏幕， 或该视图控制器将要出栈。&lt;/li&gt;
&lt;li&gt;viewDidDisappear: 当上一个 / 下一个视图控制器的过渡动画完成时，此方法会被调用。正如 viewDidAppear:，viewWillDisappear: 事件也会有约 300 毫秒的差值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下列举了一些高效使用生命周期事件的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需多说，不要重写 loadView。&lt;/li&gt;
&lt;li&gt;将 viewDidLoad 作为最后的检查点，查看来自数据源的数据是否可用。如果可用，则更新 UI 元素。&lt;/li&gt;
&lt;li&gt;如果每次都需要展示最新的信息，那么就使用 viewWillAppear: 更新 UI 元素。&lt;/li&gt;
&lt;li&gt;在 viewDidAppear: 中开始动画。如果有视频等流式内容，那么就可以开始播放了。订 阅应用事件来检测动画 / 视频或其他持续更新视频的处理是应该继续还是停止。不推荐在该方法中用最新的数据更新 UI。如果你这样做了，最终的效果是，在过渡动 画完成之后，用户会过渡至旧的 UI，然后产生更新。这个体验不是很友好。&lt;/li&gt;
&lt;li&gt;使用 viewWillDisappear: 来暂停或停止动画。同样，不要做其他多余的操作。&lt;/li&gt;
&lt;li&gt;使用 viewDidDisappear:销毁内存中的复杂数据结构。也可以在这里注销与视图控制器绑定的数据源通知，以及与动画、数据源、UI 更新有 关的应用事件通知中心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-视图&#34;&gt;2.2 视图&lt;/h3&gt;
&lt;p&gt;优化视图方面最具挑战性的部分是，很少有普适于所有视图的技术。每个视图都有其独特
的用途，且大部分的优化技术都与特定的视图和暴露出的 API 有关。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本准则：
&lt;ul&gt;
&lt;li&gt;尽量减少在主线程中所做的工作。任何额外代码的执行都意味着更高的丢帧概率。过多的丢帧会导致不流畅。&lt;/li&gt;
&lt;li&gt;避免较大的 nibs 或故事板。故事板很强大，但整个 XML 在真正使用之前必须被加载(I/O) 和解析(XML 处理)。应该最小化故事板中的单元数目。&lt;/li&gt;
&lt;li&gt;避免在视图层次结构中多层嵌套。尽量保持扁平化。&lt;/li&gt;
&lt;li&gt;尽可能延迟加载视图并进行重用。更多的视图不仅会导致加载时间变长，还会使渲染时间变长，这些会影响内存和 CPU 的使用。&lt;/li&gt;
&lt;li&gt;对于复杂的 UI 而言，最好使用自定义绘图。这样只会触发一个视图进行绘制，而不是多个子视图，同时也避免了调用代价较高的 layoutSubviews 和 drawRect: 方法。此外，要避免使用具有通用目的及功能丰富的组件而带来的消耗，你可以使用那些直接实现了绘制方法的视图来代替。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;221-uilabel&#34;&gt;2.2.1 UILabel&lt;/h4&gt;
&lt;p&gt;这可能是 iOS 上最常用的视图了。它虽然看起来简单，但是渲染代价却不容小觑。下列是涉及的一些复杂步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用字体、字体类型以及要被渲染的文本时，计算需要的像素数目。这是一个消耗较大的过程，应尽可能少地去做。&lt;/li&gt;
&lt;li&gt;检查要被渲染的宽度。&lt;/li&gt;
&lt;li&gt;检查 numberOfLines，计算将要展示的行数。&lt;/li&gt;
&lt;li&gt;sizeToFit 是否被调用?如果是，则计算高度。&lt;/li&gt;
&lt;li&gt;如果 sizeToFit 没有被调用，检查当前的内容能否在给定的高度下展示出来。&lt;/li&gt;
&lt;li&gt;如果 frame 不够，使用 lineBreakMode 确定隐藏或截断的位置。&lt;/li&gt;
&lt;li&gt;最后，使用字体、类型及颜色来渲染最终展示的文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体说明每个 UILabel 是一件工作量很大的事情。使用较少的标签，更容易管理效果，使用较多的标签，你就需要多留意这些标签的创建、配置和重用。&lt;/p&gt;
&lt;h4 id=&#34;222-uibutton&#34;&gt;2.2.2 UIButton&lt;/h4&gt;
&lt;p&gt;渲染按钮的方式有以下四种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用自定义文本的默认渲染&lt;/li&gt;
&lt;li&gt;全尺寸资源的按钮&lt;/li&gt;
&lt;li&gt;可变大小的资源&lt;/li&gt;
&lt;li&gt;使用 CALayer 和贝塞尔路径自定义绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;223-uiimageview&#34;&gt;2.2.3 UIImageView&lt;/h4&gt;
&lt;p&gt;在渲染代价较大的各种 UI 元素中，图像首屈一指。在使用 UIImage 和 UIImageView 时，遵循以下的最佳实践可以提升性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于已知的图像，使用 imageNamed: 方法加载图像。它可以确保内容只被加载至内存一次， 还可以确保在多个 UIImage 对象间改变用途。&lt;/li&gt;
&lt;li&gt;在使用 imageNamed: 方法加载包图片时，使用资源包。如果应用有一堆图标，且每个图 标都较小时，这种方式极其有用。可以随意地创建相关图像(即通常被一起使用的图片) 的多个目录。&lt;/li&gt;
&lt;li&gt;对于其他图像，使用高性能的图像缓存库。AFNetworking 和 SDWebImage 都是可选的强大库。当使用内存中的图片时，确保正确配置了内存的使用参数。不要使用硬编码。让它能够自适应——使用合理的 RAM 百分比可以较好地进行配置。&lt;/li&gt;
&lt;li&gt;载入的图像与即将渲染的 UIImageView 大小相同。如果被解析的图像尺寸与 UIImageView 相同，那么你会得到极高的性能，因为调整图像大小是一个耗费较大的操作，如果该图像被包含在 UIScrollView 中，则耗费会更大。如果图像来自网络下载，那么尽量下载和视图大小匹配的图像。如果行不通，适当地对图片进行预处理，调整其大小。&lt;/li&gt;
&lt;li&gt;如果需要使用一些类似于模糊或色调的效果，那么可以创建一份图像内容的副本，在副本上施加效果，然后使用最终的位图创建所需的 UIImage。如此一来，这些附加的效果只会被使用一次，如果有需要，原始图像还可以用于其他显示。&lt;/li&gt;
&lt;li&gt;无论使用何种技术加载图像，在非主线程中执行，最好在一个专用的队列中执行。尤其要在非主线程中解压 JPG/PNG 图像。&lt;/li&gt;
&lt;li&gt;最后同样重要的是，确定是否真的需要图像。如果要展示一个评分栏，最好使用直接绘制的自定义视图，而不是使用多个图像，通过调整透明或覆盖来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;224-uitableview&#34;&gt;2.2.4 UITableView&lt;/h4&gt;
&lt;p&gt;无论是在新闻应用、邮件应用、照片流，还是其他的应用中，UITableView 都是最常用于显示数据的视图。UITableView 提供了一个展示信息条的极好选择，这些信息条既可以是同一类别，也可以是不同类别。&lt;/p&gt;
&lt;p&gt;UITableView 绑定了两个协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UITableViewDataSource&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须将 dataSource 属性设置到数据源上。顾名思义，数据源是指将要填充至列表单元格中的数据源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UITableViewDelegate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须将 delegate 属性设置到委托上，当用户与列表或单元格交互时，此处的委托必须能接收到回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下列是使用 UITableView 时需要牢记的一些最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在数据源的 tableView:cellForRowAtIndexPath: 方法中，使用 tableView:dequeueReusa bleCellWithIdentifier: 或 tableView:dequeueReusableCellWithIdentifier:forIndexPa th: 进行单元格的重用，而不是每次都创建新的单元格。&lt;/li&gt;
&lt;li&gt;尽可能避免动态高度的单元格。诚然，已经确定的高度代表着只需很少的计算量。如果内容是动态配置的，那么不仅需要计算高度，而且每次视图要被渲染时，单元格的内容也需要刷新和重新布局。这是一个很大的性能损失。&lt;/li&gt;
&lt;li&gt;如果你真的需要动态高度的单元格，那么定义一个规则来标记单元格是脏的。如果某个单元格是脏的，计算它的高度并缓存。在委托的 tableView:heightForRowAtIndexPath: 回调中继续返回缓存的高度，直到单元格不再被标记为脏。如果要被渲染的模型是不可变的，一个可用的简单规则是，检查当前被渲染的模型是否 和相应的 indexPath 的值一样。如果一样，则使用同样的值渲染，无需进一步的处理。如果不一样，则重新计算值，并将新的对象(模型)附加至该单元格。&lt;/li&gt;
&lt;li&gt;当用自定义视图重用单元格时，要避免通过调用 layoutIfNeeded 每次都对其进行布局。即使一个单元格的高度是固定的，也有可能出现这样的情况:在单元格中的独立元素可能会被设置成不同的高度，例如，UILabel 支持多行内容，UIImageView 可以装入不同大小的图像。&lt;/li&gt;
&lt;li&gt;避免透明的单元格子视图。创建 UITableViewCell 时，尽量引入不透明元素。半透明或透明元素(alpha 低于 1.0 的视图)很好看，但会有性能损失。&lt;/li&gt;
&lt;li&gt;在快速滚动时考虑使用界面外壳(可以参考这个&lt;a href=&#34;https://github.com/gonzalonunez/Skeleton&#34;&gt;Skeleton&lt;/a&gt;)。当用户快速滚动列表视图时，虽然使用了 所有的优化，但视图的重用和渲染仍然需要超过 16 毫秒，还有可能出现偶发的丢帧现 象，从而导致不流畅的体验。&lt;/li&gt;
&lt;li&gt;避免渐变、图像缩放以及任何屏幕外的绘制。这些效果对 CPU 以及图形处理单元(GPU) 来说都是消耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;225-uiwebview&#34;&gt;2.2.5 UIWebView&lt;/h4&gt;
&lt;p&gt;UIWebView 是用于渲染未知或动态内容的最常见视图。&lt;/p&gt;
&lt;p&gt;虽然有些应用可能全部都是原生的，但还是有需要使用 UIWebView 的场景，以下是一些常见场景。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何应用中的用户登录。Spotify、Mint 和 LinkedIn 这样的应用使用原生 UI 渲染登录表单。但这有一定的限制。&lt;/li&gt;
&lt;li&gt;在任何应用中显示隐私政策或使用条款。因为这些会随着时间变化，并且需要大量的格式化(文本样式、编号列表、其他内容的交叉引用)，使用原生视图不是较好的选择。&lt;/li&gt;
&lt;li&gt;新闻或文章阅读器，因为大部分的文章都是为 Web 创建的，几乎都是 HTML。&lt;/li&gt;
&lt;li&gt;邮件应用。例如，初始邮件是 HTML 形式，当呈现消息或跟帖，以及撰写回复时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 UIWebView 时，请将以下几个最佳实践牢记在心。(需要注意的是，关于 UIWebView 能做的事情非常少，并非都是关注性能的;相反，此处的重点是以最恰当的方式展示 HTML 内容。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIWebView 可能比较笨重且迟钝，所以尽可能复用 web view。同时，UIWebView 也因内存泄漏而知名。因此，每个应用的实例都应该足够好。&lt;/li&gt;
&lt;li&gt;附加一个自定义的 UIWebViewDelegate。实现 webView:shouldStartLoadWithRequest: navigationType: 方法。要留意 URL scheme。如果是 http 或 https 以外的东西，需要注意: 应用应该知道如何处理这种情况，或警告用户该网站正试图脱离应用。&lt;/li&gt;
&lt;li&gt;你可以通过 stringByEvaluatingJavaScriptFromString: 方法创建一个桥来连接应用和 JavaScript，从而在当前已经加载的 web 页面执行 JavaScript。如果想要调用原生应用的方法，你可以参考之前的处理方法，使用自定义的 URL scheme。&lt;/li&gt;
&lt;li&gt;实现委托的 webView:didFailLoadWithError: 方法，以保持对所有可能出现的错误的紧密追踪。&lt;/li&gt;
&lt;li&gt;实现 webView:didFailLoadWithError: 方法来处理特定的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-自动布局&#34;&gt;2.3 自动布局&lt;/h3&gt;
&lt;p&gt;通过 Auto Layout，可以描述一个元素距另一元素的距离(水平或垂直)、其大小(宽度或高度)，或其与另一元素的对齐方式(水平或垂直)。&lt;/p&gt;
&lt;p&gt;关于 Auto Layout 的性能问题，书中只介绍了 Auto Layout 在视图数量很多时，消耗会比 Frame 布局大很多，介绍的比较笼统，具体还可以参考下这篇博客：&lt;a href=&#34;https://github.com/draveness/analyze/blob/master/contents/AsyncDisplayKit/%E4%BB%8E%20Auto%20Layout%20%E7%9A%84%E5%B8%83%E5%B1%80%E7%AE%97%E6%B3%95%E8%B0%88%E6%80%A7%E8%83%BD.md&#34;&gt;从 Auto Layout 的布局算法谈性能&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3-网络&#34;&gt;3. 网络&lt;/h2&gt;
&lt;p&gt;在应用中使用网络是必不可少的，但减少网络延迟的方法却是有限的，因此，你应该着手对网络条件进行最大程度的优化，并预先对不同的场景进行规划。&lt;/p&gt;
&lt;h3 id=&#34;31-指标和测量&#34;&gt;3.1 指标和测量&lt;/h3&gt;
&lt;p&gt;在网络中完成的大多数工作是无法控制的，因此确定衡量的标准非常重要。接下来会列出在性能优化相关的测量中更为重要的一些指标。&lt;/p&gt;
&lt;h4 id=&#34;311-dns查找时间&#34;&gt;3.1.1 DNS查找时间&lt;/h4&gt;
&lt;p&gt;发起连接的第一步是 DNS 查找。如果你的应用严重依赖网络操作，DNS 的查找时间会使应用变慢。&lt;/p&gt;
&lt;p&gt;为了最大限度地减少 DNS 查询时间所产生的延迟，你应该遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小化应用使用的专有域名的数量。按照路由的一般工作方式，多个域名是不可避免的。最好是能做到以下几点:
&lt;ul&gt;
&lt;li&gt;身份管理(登录、注销、配置文件)&lt;/li&gt;
&lt;li&gt;数据服务(API 端点)&lt;/li&gt;
&lt;li&gt;CDN(图片和其他静态人工产品)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在应用启动时不需要连接所有的域名，可能只需要身份管理和初始画面所需的数据。对于后续的子域名，尝试更早地进行 DNS 解析，也被称为 DNS 预先下载。为实现此操作， 你可以参考以下两点。
&lt;ul&gt;
&lt;li&gt;如果子域名和主机在控制范围内，可以配置一个预设的 URL，不返回任何数据，只返回 HTTP 204 的状态码，然后提前对该 URL 发起连接。&lt;/li&gt;
&lt;li&gt;第二个方法是使用 gethostbyname 执行一个明确的 DNS 查找。然而，针对不同的协议， 主机可能会解析至不同的 IP，例如，HTTP 请求可能会解析至一个地址，而 HTTPS 会解析至另一个地址。虽然不是很常见，但第 7 层的路由可以根据实际的请求解析 IP 地址，例如，图像是一个地址，视频是另外一个地址。鉴于这些因素，在连接之前解析 DNS 经常是无用的，对主机进行伪连接会更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;312-ssl握手时间&#34;&gt;3.1.2 SSL握手时间&lt;/h4&gt;
&lt;p&gt;为了安全起见，可以假设应用中所有的连接均是通过 TLS/SSL 的(使用 HTTPS)。HTTPS 在连接开始时，先进行 SSL 握手，SSL 握手主要是验证服务器证书，同时共享用于通信的随机密钥。这一操作听起来简单，但是却有很多步骤，还会耗费较多时间。&lt;/p&gt;
&lt;p&gt;你应该遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大程度地减少应用发起的连接数。因此，也需要减少应用连接的独有域名的数量。&lt;/li&gt;
&lt;li&gt;请求结束后不要关闭 HTTP/S 连接。为所有的HTTPS请求添加头Connection: keep-alive。这确保了同样的连接在下一次 请求时可以复用。&lt;/li&gt;
&lt;li&gt;使用域分片。如此一来，虽然连接的是不同的主机名，你也可以使用同一个 socket，只 要它们解析为相同的 IP，可以使用相同的证书(例如，在通配符域)就行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;313-网络类型&#34;&gt;3.1.3 网络类型&lt;/h4&gt;
&lt;p&gt;一般情况下，iPhone 和 iPad 可以使用 WiFi、4G、3G 等网络连接到互联网。&lt;/p&gt;
&lt;p&gt;遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计时考虑不同的网络可用性。在移动网络中，唯一不变的是，网络可用性是多变的。 对于流媒体，最好选择 HTTP 实时流或任何可用的自适应比特率流媒体技术，这些技术可以在某一时刻针对可用带宽进行动态切换，切换至当前带宽的最佳流质量，从而提供流畅的视频播放。对于非流媒体内容，你需要实现一些策略，确定在单次拉取时应该下载多少数据，并且数据量必须是自适应的。例如，你可能不希望在最新一次更新时，一次拉取所有的 200 封新邮件。你可以先下载前 50 封邮件，再逐步下载更多邮件。同样，在低速网络时，不要打开视频自动播放功能，这可能会花费用户很多钱。&lt;/li&gt;
&lt;li&gt;出现失败时，在随机的、以指数增长的延迟后进行重试。例如，第一次失败后，应用可能会在 1 秒后重试。第二次失败时，应用在 2 秒后重试， 接着是 4 秒的延迟。不要忘记对每个会话设置最多的自动重试次数。&lt;/li&gt;
&lt;li&gt;设立强制刷新之间的最短时间。当用户明确要求刷新时，不要立即发出请求。相反，检查是否已经存在一个请求，或当前请求与上次请求的时间间隔是否小于阈值。如果满足上述条件，则不要发送此次请求。&lt;/li&gt;
&lt;li&gt;使用可到达性库发现网络状态的变化。&lt;/li&gt;
&lt;li&gt;不要缓存网络状态。不论是通过触发请求时的回调来获取状态，还是在发送请求之前显式地检查状态，要始终使用网络敏感度高的任务的最新值。&lt;/li&gt;
&lt;li&gt;基于网络类型下载内容。如果想要展示一个图像，不用总是下载原始的、高质量的图像。应该始终下载和设备适配的图像——iPhone 4S 所需的图像尺寸和第三代 iPad 所需的差别很大。&lt;/li&gt;
&lt;li&gt;乐观地预先下载。在 WiFi 网络中预先下载用户在后续时刻需要的内容。随后就可以使用缓存内容了。最好分次下载内容，在使用之后关掉网络连接，这有助于节省电量。&lt;/li&gt;
&lt;li&gt;如果适用，当网络可用时，支持同步的离线存储。通常情况下，网络缓存就足够了。但如果需要更多的结构化数据，使用本地文件或 Core Data 会是一个较好的选择。对游戏来说，缓存最近一级的详细信息。对邮件应用来说，存储一些带有附件的最新电子邮件是一个不错的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;314-延迟&#34;&gt;3.1.4 延迟&lt;/h4&gt;
&lt;p&gt;延迟是指从服务器请求资源时，在网络传输上花费的额外时间。设置用于测量网络延迟的系统是很重要的。&lt;/p&gt;
&lt;p&gt;网络延迟可以通过使用请求过程中花费的总时间减去服务器上花费的时间(计算和服务响 应)来测量:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MD&#34; data-lang=&#34;MD&#34;&gt;Round-Trip Time = (Timestamp of Response - Timestamp of Request)
Network Latency = Round-Trip Time - Time Spent on Server
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;花费在服务器上的时间可以由服务器来计算。对客户端而言，往返的时间是准确可用的。服务器可以将花费的时间放在响应的自定义头部，然后客户端就可以用来计算延迟了。&lt;/p&gt;
&lt;p&gt;如果你有数据来分析任何模式下的延迟，还需跟踪下列数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;连接超时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟踪连接超时的次数是非常重要的。根据网络质量(较薄弱的基础设施或较低的容量)，该指标会提供详细的地理区域分类，网络质量将反过来帮助规划同步时间的传输。例如，同步会在短时间间隔传输，比如几分钟，而不用在某一个特定时间跨时区同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应超时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;捕捉连接成功但响应超时的数量。这有助于根据地理位置和日期、年份的时间来规划数据中心的容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;载荷大小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求以及响应的大小完全可以在服务器端进行测量。使用此数据可以识别任何可能降 低网络操作速度的峰值，并确定一些可用选项:通过选择合适的序列化格式(JSON、 CSV、Protobuf 等)减少数据占位，或者分割数据并使用增量同步(例如，通过使用小的批量大小或在多个块中发送部分数据)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-应用部署&#34;&gt;3.2 应用部署&lt;/h3&gt;
&lt;p&gt;随着对这些指标的统计，你可以更好地规划应用的部署。这不仅包括服务器、服务器的位置和容量，还包括客户端，以及如何在给定的场景下获得最好的。&lt;/p&gt;
&lt;h4 id=&#34;321-服务器&#34;&gt;3.2.1 服务器&lt;/h4&gt;
&lt;p&gt;在查看网络延迟的地域分布时，我们可以使用这个信息为数据中心选择适当的位置。如果使用托管的数据中心提供商，不妨选择有多个地理位置的，如 Amazon AWS 或 Rackspace Cloud。如果你有自己的数据中心，那么应该确保它们在地理上是分散的。&lt;/p&gt;
&lt;p&gt;无需多想，服务器应该安装在多个位置，这样你可以更好地服务本地内容。&lt;/p&gt;
&lt;p&gt;以下是一些应该遵循的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用多个数据中心，让服务器在地理上分散开来，更贴近用户。&lt;/li&gt;
&lt;li&gt;使用 CDN 提供静态内容，如图像、JavaScript、CSS、字体等。&lt;/li&gt;
&lt;li&gt;使用接近的&lt;a href=&#34;http://serverfault.com/a/67489&#34;&gt;边缘服务器&lt;/a&gt;来提供动态内容。&lt;/li&gt;
&lt;li&gt;避免使用多个域名(DNS 查询时间可能会很长，这会降低用户体验)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;322-请求&#34;&gt;3.2.2 请求&lt;/h4&gt;
&lt;p&gt;为了恰当地设置网络，正确地配置 HTTP/S 请求很重要。你应该遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要为每一个操作单元都进行一次请求，使用批量请求。即使必须实现多个后端子系统来完成，但是合并批量请求会带来较大的性能提升，所以还是值得的。&lt;/li&gt;
&lt;li&gt;使用持续的 HTTP 连接，该连接也被称为 HTTP 长连接。它们有助于最大限度地减少 TCP 和 SSL 握手的消耗，同时也减少了网络拥塞。&lt;/li&gt;
&lt;li&gt;在任何可以的情况下都使用 &lt;a href=&#34;https://http2.github.io/&#34;&gt;HTTP/2&lt;/a&gt;。通过单一的连接， HTTP/2 支持 HTTP 请求的真正复用;如果请求解析为一个 IP 地址，那么 HTTP/2 会将跨越了多个子域的请求聚集到一起;HTTP/2 还支持报头压缩等。使用 HTTP/2 的好处是巨大的。最好的是，就消息结构而言，该协议仍旧保持不变，依然包括头部和主体。&lt;/li&gt;
&lt;li&gt;使用 HTTP 缓存头设置正确的缓存级别。对于想要下载的标准图像(如主题背景或表情)， 内容的有效期可以设置为较长的时间。这不仅保证了网络库在本地缓存它们，还保证了其他设备可以从在本地进行了缓存的中介服务器(ISP 服务器或代理)中受益。影响 HTTP 缓存的响应头是 Last-Modified、Expires、ETag 和 Cache-Control。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;323-数据格式&#34;&gt;3.2.3 数据格式&lt;/h4&gt;
&lt;p&gt;选择正确的数据格式和选择网络参数一样重要。一些选择可能会使应用的性能产生很大的不同，比如对无损图像压缩使用 PNG 还是 WEBP。&lt;/p&gt;
&lt;p&gt;如果你的应用是以数据为导向的，那么选择适合其传输的正确格式很关键。其他协议支持的功能也可以提供帮助。&lt;/p&gt;
&lt;p&gt;在选择数据格式时，你应该遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用数据压缩。当传送 JSON 或 XML 这样的文本内容时，这一点尤为重要。 NSURLRequest 会自动给头部添加 Accept-Encoding:gzip、deflate，这样你就无需自己动手了。但这也意味着服务器应该承认头部，并使用适当的传输编码发送数据。&lt;/li&gt;
&lt;li&gt;选择正确的数据格式。不用多想，JSON 和 XML 这样冗长、人类可读的格式是资源密集型的——序列化、传输、反序列化会比使用自定义制作的、二进制的、机器友好的格式更耗费时间。此处不讨论媒体压缩(即图像压缩和视频编解码器)，而是着眼于文本数据格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-工具&#34;&gt;3.3 工具&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.charlesproxy.com&#34;&gt;Charles&lt;/a&gt; 是一个非常强大的网络调试代理。使用比较简单，这里不做过多介绍，如有需要可参考网上博客。&lt;/p&gt;
&lt;p&gt;推荐一些之前收集的性能优化的博客：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS网络深度优化
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ChenYilong/ParseSourceCodeStudy/blob/master/02_Parse%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%93%E5%AD%98%E4%B8%8E%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8/iOS%E7%BD%91%E7%BB%9C%E7%BC%93%E5%AD%98%E6%89%AB%E7%9B%B2%E7%AF%87.md#80%E7%9A%84%E7%BC%93%E5%AD%98%E9%9C%80%E6%B1%82%E4%B8%A4%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B0%B1%E5%8F%AF%E6%BB%A1%E8%B6%B3&#34;&gt;iOS网络缓存扫盲篇&amp;ndash;使用两行代码就能完成80%的缓存需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/how-ctrip-improves-app-networking-performance/#&#34;&gt;携程App的网络性能优化实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cnbang.net/tech/3531/&#34;&gt;移动 APP 网络优化概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mrpeak.cn/blog/ios-network/&#34;&gt;深度优化iOS网络模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://renchao0711.github.io/2017/08/29/iOS%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/&#34;&gt;iOS网络请求优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ios.jobbole.com/93110/&#34;&gt;移动端网络常见问题及优化对策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://taobaofed.org/blog/2015/12/16/h5-performance-optimization-and-domain-convergence/?utm_source=tuicool&#34;&gt;无线性能优化：域名收敛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000010001767&#34;&gt;App的网络测试中性能优化方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/ziyi--caolu/p/8176331.html&#34;&gt;iOS网络模块优化（失败重发、缓存请求有网发送）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/byeweiyang/article/details/80128027&#34;&gt;58 同城 iOS 客户端网络框架的演进之路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/mobile-taobao-521-performance-optimization-project/&#34;&gt;阿里无线11.11：手机淘宝 521 性能优化项目揭秘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-数据共享&#34;&gt;4. 数据共享&lt;/h2&gt;
&lt;p&gt;有时你会需要与其他应用共享数据，或访问设备上其他应用的共享数据。共享数据的场景包括以下几个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与其他应用集成(例如，让用户使用微信的登录信息登录你的应用)。&lt;/li&gt;
&lt;li&gt;发布一系列互补的应用。&lt;/li&gt;
&lt;li&gt;将用户数据从统一的应用移动到有多个特定用途的应用，检测其是否存在，并在需要时传递控制。&lt;/li&gt;
&lt;li&gt;在可用的最佳查看器中打开文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-深层链接&#34;&gt;4.1 深层链接&lt;/h3&gt;
&lt;p&gt;在移动应用的上下文中，深层链接包括使用统一的资源标识符(uniform resourceidentifier，
URI)，其链接到移动应用内的特定位置，而不是简单地启动应用。&lt;/p&gt;
&lt;p&gt;深层链接为应用之间的共享数据提供了解耦的方案。与访问网站时的 HTTP 网址类似，iOS 中的深层链接通过所谓的自定义 URL scheme 来提供。你可以配置自己的应用，让它响应唯一的 scheme，操作系统会确保无论何时使用该 scheme，都由你的应用进行处理。应用可以响应任何数量的 scheme。&lt;/p&gt;
&lt;p&gt;不论是访问共享数据，还是对外共享数据，深层链接可能是最常用的选项，同时，优化创建和解析的时间也很重要。以下列表涵盖了可以遵循的一些最佳实践，从而让应用实现最优性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好使用较短的 URL，因为它们的构建速度和解析速度都比较快。&lt;/li&gt;
&lt;li&gt;避免基于正则表达式的模式。&lt;/li&gt;
&lt;li&gt;优先选择基于查询的 URL 进行标准解析。用基于字符的分隔符解析比使用正则表达式解析更快。&lt;/li&gt;
&lt;li&gt;在你的 URL 中支持深层链接回调，以帮助用户完成意图。一个较好的方法是支持三个选项:success、failure 和 cancel。&lt;/li&gt;
&lt;li&gt;URL 最好使用深层链接，以帮助用户定义一个需要多个应用协调的工作流。&lt;/li&gt;
&lt;li&gt;不要在 URL 中放置任何敏感数据。具体来说，不要使用任何身份验证令牌。这些令牌可能会被未知的应用劫持。&lt;/li&gt;
&lt;li&gt;不要信任任何传入的数据。始终验证 URL。作为附加的措施，可以让应用在传递 URL 前对数据进行签名，并在处理前验证签名，这可能会是个不错的主意。但是，为了安全地进行，私钥必须保存在服务器上，如此一来，就必须要有网络连接。&lt;/li&gt;
&lt;li&gt;使用 sourceApplication 来标识源。有一个应用白名单非常有用，你可以始终信任这些数 据。sourceApplication 的使用与签名验证不正交。这可以是 URL 开始处理前的第一步。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-剪贴板&#34;&gt;4.2 剪贴板&lt;/h3&gt;
&lt;p&gt;官方文档对剪贴板的描述如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;剪贴板是用于在应用之内或之间交换数据的安全且标准化的机制。许多操作取决 于剪贴板，特别是复制—剪切—粘贴。&amp;hellip;&amp;hellip;但你也可以在其他情况下使用剪贴板，例如，在应用之间共享数据时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可通过 UIPasteBoard 类使用剪贴板，该类可以访问共享存储库，写对象和读对象在共享存储库中进行数据交换。写对象也被称为剪贴板所有者，将数据存储在剪贴板实例上。读对象访问剪贴板，将数据复制到其地址空间中。&lt;/p&gt;
&lt;p&gt;与深层链接相比，剪贴板具有以下优点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它具有支持复杂数据(如图像)的能力。&lt;/li&gt;
&lt;li&gt;它支持在多种形式中表示数据，这些形式可以基于目标应用的功能来选择。例如，消息应用可以使用纯文本格式，邮件应用可以使用来自同一剪贴板项目的富文本格式。&lt;/li&gt;
&lt;li&gt;即使应用关闭后，剪贴板内容仍然会保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用剪贴板时，你应该遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;剪贴板本质上是由剪贴板服务进行调解的进程间通信。IPC 的所有安全规则都适用(例如，不发送任何安全数据、不信任任何传入数据)。&lt;/li&gt;
&lt;li&gt;因为不能控制哪个应用会访问剪贴板，所以使用时总是不安全的，除非数据被加密。&lt;/li&gt;
&lt;li&gt;不要在剪贴板中使用大量数据。虽然剪贴板支持交换图像以及多种格式，但请记住，每个条目不仅消耗内存，也需要额外的时间来读写。&lt;/li&gt;
&lt;li&gt;当应用将使用 UIApplicationDidEnterBackgroundNotification 通知或 UIApplicationWillResignActiveNotification 通知进入后台时，清除剪贴板。更好的做法是，你可以实现 UIApplicationDelegate 相应的回调方法。通过将 items 设置为 nil，你可以清除剪贴板，如下所示: myPasteboard.items = nil;&lt;/li&gt;
&lt;li&gt;为了防止任何类型的复制 / 粘贴，继承 UITextView，并在 canPerformAction 的 copy: 动作中返回 NO。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-安全&#34;&gt;5. 安全&lt;/h2&gt;
&lt;p&gt;应用可能会在未知的执行环境中运行，并通过未知的传输网络交换数据，因此，应始终将安全性作为首要任务之一，以便保护用户及应用的敏感数据。&lt;/p&gt;
&lt;p&gt;不论是通过代码的执行(例如，从 1024 位 DSA 密钥的加密密钥转为 2048 位 RSA 的加密密钥)还是通过用户干预(例如，引入双因素认证或应用 PIN)，任何附加的安全层都会导致应用变慢。因此，在保证用户完成意图的前提下，你需要对添加的安全措施(会导致延迟)进行权衡。&lt;/p&gt;
&lt;h3 id=&#34;51-应用访问&#34;&gt;5.1 应用访问&lt;/h3&gt;
&lt;h4 id=&#34;511-匿名访问&#34;&gt;5.1.1 匿名访问&lt;/h4&gt;
&lt;p&gt;应用可能需要验证，也可能不需要验证。&lt;/p&gt;
&lt;p&gt;有两个选项可用于识别设备:供应商的标识符(Identifier for Vendor，IDFV)和广告商的 标识符(Identifier for Advertiser，IDFA)。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://apple.co/1xxe8oK&#34;&gt;IDFV&lt;/a&gt; 是设备上每个应用的持久唯一的标识符，用于向应用的供应商标识设备。应用包 ID 的一部分用于生成 IDFV，因此，即使应用来自同一家公司， IDFV 也可能不同。&lt;/p&gt;
&lt;p&gt;IDFA 是可重置的标识符，在设备上的所有应用中是唯一的。正因为在众多应用中是唯一的，所以它才是真正唯一的 ID。但是，IDFA 可以被用户重置。此外，苹果公司对它的使用设置了限制，你必须保证在提交应用到 iTunes Connect 审核时使用它。此 ID 只应由广告投放系统使用。&lt;/p&gt;
&lt;h4 id=&#34;512-认证访问&#34;&gt;5.1.2 认证访问&lt;/h4&gt;
&lt;p&gt;当需要识别用户时，你需要认证访问。这并不意味着认证必须在你的应用中完成。以下是一些可用的认证选项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;应用密码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它也被称为应用 PIN，无论是否存在登录至应用的一组凭据，应用 PIN 都是你想要添加到应用的本地凭据。实际上，它就是只存储在设备本地的密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游戏中心&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此选项仅适用于游戏。用 GameKit 连接游戏中心，后者会负责使用凭据对用户进行验证。游戏中心可以访问用户资料、个人记录等，但仅共享唯一标识用户所需的内容(即用户 ID)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;52-网络安全&#34;&gt;5.2 网络安全&lt;/h3&gt;
&lt;p&gt;前面已经对网络进行了深入的讨论。这里将讨论在与远程设备通信中与安全有关的最佳实践，该远程设备可以是服务器，也可以是点对点设备。&lt;/p&gt;
&lt;h4 id=&#34;521-使用https&#34;&gt;5.2.1 使用HTTPS&lt;/h4&gt;
&lt;p&gt;假设你将 HTTP 作为底层消息传递协议(TCP 是传输层协议)，那么你必须通过 TLS/SSL 使用它。这也就是说，你应该一直使用 HTTPS。但是，使用 HTTPS 有几个问题。如果这些潜在风险未得到解决，则 HTTPS 可能会受到影响。&lt;/p&gt;
&lt;h5 id=&#34;1crime攻击&#34;&gt;1.CRIME攻击&lt;/h5&gt;
&lt;p&gt;不要使用 SSL/TLS 压缩。如果你现在在使用，请在继续之前立即关闭它。这会让你处于较大的风险当中。使用 TLS 压缩(gzip、deflate 或其他格式)，任何请求都会受到 CRIME(Compression Ratio Info-leak Made Easy，压缩率使信息很容易泄露)攻击。要想缓解风险，可以关闭 TLS 压缩，并给每个响应发送反 CRIME cookie，较为简单的方式是发送一个唯 一的随机序列 cookie。&lt;/p&gt;
&lt;h5 id=&#34;2breach攻击&#34;&gt;2.BREACH攻击&lt;/h5&gt;
&lt;p&gt;如果使用请求/响应正文压缩(Transfer-Encoding = gzip或deflate)，你的通信会受到BREACH(Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext，通过自适应超文本压缩的浏览器侦听和渗透)攻击，这种攻击类型于 2012 年 9 月首次发现。当满足以下标准时，就会存在风险。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用使用 HTTP 压缩。&lt;/li&gt;
&lt;li&gt;响应反映了用户输入。&lt;/li&gt;
&lt;li&gt;响应反映了隐私。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没有单一的方法可以降低这种风险。&lt;a href=&#34;http://www.breachattack.com&#34;&gt;The Breach Attack&lt;/a&gt;网站按有效性列出了以下方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;禁用 HTTP 压缩。这种方法增加了传输的数据量，可能不会作为实际的解决方案。&lt;/li&gt;
&lt;li&gt;从用户输入分离出隐私。将授权码放在远离请求正文的地方。&lt;/li&gt;
&lt;li&gt;对每个请求进行随机化加密。但是，由于每个请求的加密是随机的，因此，多个并行请求可能无法实现了。&lt;/li&gt;
&lt;li&gt;修饰隐私。不要以原始格式发送隐私。&lt;/li&gt;
&lt;li&gt;使用 CSRF 保护易受攻击的 HTML 页面。在移动原生应用上，除非使用移动 Web，否
则不需要 CSRF。&lt;/li&gt;
&lt;li&gt;隐藏长度。一个较好的方法是在 HTTP 响应中使用分块传输编码。&lt;/li&gt;
&lt;li&gt;对请求限速(这应该作为最后的方法)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;522-使用证书锁定&#34;&gt;5.2.2 使用证书锁定&lt;/h4&gt;
&lt;p&gt;HTTPS 不是万灵药——采取 HTTPS 不会神奇地确保所有的通信都是安全的。HTTPS 的基础是对公钥的信任，该公钥用于加密初始消息(在 SSL 握手期间)。中间人(man-in-the- middle，MITM)攻击会捕获用于加密消息的密钥。&lt;/p&gt;
&lt;p&gt;不让请求变成无效的唯一方法就是信任，该信任由网络库放置在接收到的证书之中。证书只是签名的公钥。因此，如果网络库信任签名者，那它也会信任主机提供的公钥。黑客提供的假的根证书成为了让所有安全措施崩溃的罪魁祸首。&lt;/p&gt;
&lt;p&gt;这个问题的解决方案就是所谓的&lt;a href=&#34;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning&#34;&gt;证书锁定&lt;/a&gt;。这种方案的工作原理是，通过只信任一个或几个能够作为应用根证书的证书，应用创建一个自定义的信任级别。这允许应用仅信任来自白名单的证书， 确保设备上永不安装那些允许网络监视的未知证书。&lt;/p&gt;
&lt;h3 id=&#34;53-本地存储&#34;&gt;5.3 本地存储&lt;/h3&gt;
&lt;p&gt;与通过网络交换的数据类似，存储在设备上的数据是不能防止被篡改的，而且如果不小心处理的话，入侵者是可以读取或修改数据的。以下是需要注意的几个要点，以及为了保护本地存储空间需要遵循的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地存储不安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在越狱设备上非常容易访问本地存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密本地存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地存储可以利用操作系统提供的数据保护能力进行加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54-数据共享&#34;&gt;5.4 数据共享&lt;/h3&gt;
&lt;p&gt;共享数据和处理传入数据时遵循的简单基本规则是:不要信任对方。&lt;/p&gt;
&lt;p&gt;当接收数据时，总是进行验证。应用对数据的唯一假设应该是，它可能是无效且错误的。为了提高安全性，要求数据进行签名。&lt;/p&gt;
&lt;p&gt;同样，因为不知道哪个应用会处理数据，所以永远不要发送敏感数据。如果你确实需要共享敏感数据，那么提供令牌，然后要求其他应用从你的应用(或服务器)请求数据。&lt;/p&gt;
&lt;h3 id=&#34;55-安全和应用性能&#34;&gt;5.5 安全和应用性能&lt;/h3&gt;
&lt;p&gt;额外添加的加密或安全措施会计入总内存的消耗之中，同时还会增加处理时间。你没有办法在所有维度上进行优化，只能做一些权衡。&lt;/p&gt;
&lt;p&gt;有时，并非必须使用 2048 位的 RSA 密钥，1024 位的 DSA 密钥也许就已经足够了。其他时候，Rijndael 这样的对称加密算法就足以保护数据的安全了。&lt;/p&gt;
&lt;p&gt;从钥匙串检索初始值可能会导致加载时间延长。你在使用时应该小心谨慎。&lt;/p&gt;
&lt;p&gt;证书锁定有其自己的成本，有可能会减慢所有的网络操作。&lt;/p&gt;
&lt;p&gt;创建和验证数据签名需要计算内容哈希，这意味着会产生额外的内容传递。根据内容的大小，这可能需要较多时间，更不用说计算和验证数字签名所需的额外时间了。&lt;/p&gt;
&lt;p&gt;所有这些步骤会快速叠加起来。也许你有了世界上最保险和最安全的应用，但如果仅加载程序就需要 30 分钟，估计也没有人想使用它。对于这一点，即使 5 秒钟都可能对用户体验产生负面影响，甚者永远失去用户，尤其在其他应用可以满足同样需求的情况下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;相关文章：&lt;a href=&#34;https://github.com/liuzhongning/Articles/blob/master/contents/High-performance-iOS-application-development/%E9%AB%98%E6%80%A7%E8%83%BDiOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%20-%20%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96.md&#34;&gt;高性能iOS应用开发 - 核心优化&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>高性能iOS应用开发 - 核心优化</title>
      <link>https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 31 Mar 2020 15:43:48 +0800</pubDate>
      
      <guid>https://liupengkun1993.github.io/post/reading-notes/%E9%AB%98%E6%80%A7%E8%83%BDios%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;此篇博客是《高性能iOS应用开发》一书第二部分“核心优化”的读书笔记，主要包括“内存管理”、“能耗(电量消耗)”、“并发编程”这三方面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_High_Performance/03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-内存管理&#34;&gt;1. 内存管理&lt;/h2&gt;
&lt;p&gt;iPhone 和 iPad 设备的内存资源非常有限。如果某个应用的内存使用量超过了单个进程的上限，那么它就会被操作系统终止使用。正是由于这个原因，成功的内存管理在 iOS 应用的实现过程中扮演着核心的角色。&lt;/p&gt;
&lt;p&gt;与(基于垃圾回收的)Java 运行时不同，Objective-C 和 Swift 的 iOS 运行时使用引用计数。使用引用计数的负面影响在于，如果开发人员不够小心，那么可能会出现重复的内存释放和循环引用的情况。&lt;/p&gt;
&lt;p&gt;因此，理解 iOS 的内存管理是十分重要的。&lt;/p&gt;
&lt;h3 id=&#34;11-内存消耗&#34;&gt;1.1 内存消耗&lt;/h3&gt;
&lt;p&gt;内存消耗指的是应用消耗的 RAM。&lt;/p&gt;
&lt;p&gt;iOS 的虚拟内存模型并不包含交换内存，与桌面应用不同，这意味着磁盘不会被用来分页内存。最终的结果是应用只能使用有限的 RAM。这些 RAM 的使用者不仅包括在前台运行的应用，还包括操作系统服务，甚至还包括其他应用所执行的后台任务。&lt;/p&gt;
&lt;p&gt;应用中的内存消耗分为两部分:栈大小和堆大小。&lt;/p&gt;
&lt;h4 id=&#34;111-栈大小&#34;&gt;1.1.1 栈大小&lt;/h4&gt;
&lt;p&gt;应用中新创建的每个线程都有专用的栈空间，该空间由保留的内存和初始提交的内存组成。栈可以在线程存在期间自由使用。线程的最大栈空间很小，这就决定了以下的限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可被递归调用的最大方法数。每个方法都有其自己的栈帧，并会消耗整体的栈空间。&lt;/li&gt;
&lt;li&gt;一个方法中最多可以使用的变量个数。所有的变量都会载入方法的栈帧中，并消耗一定的栈空间。&lt;/li&gt;
&lt;li&gt;视图层级中可以嵌入的最大视图深度。渲染复合视图将在整个视图层级树中递归地调用 layoutSubViews 和 drawRect 方法。如果层级过深，可能会导致栈溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;112-堆大小&#34;&gt;1.1.2 堆大小&lt;/h4&gt;
&lt;p&gt;每个进程的所有线程共享同一个堆。一个应用可以使用的堆大小通常远远小于设备的 RAM 值。&lt;/p&gt;
&lt;p&gt;应用并不能控制分配给它的堆。只有操作系统才能管理堆。&lt;/p&gt;
&lt;p&gt;使用 NSString、载入图片、创建或使用 JSON/XML 数据、使用视图等都会消耗大量的堆内存。如果你的应用大量使用图片(与 Flickr 和 Instagram 应用类似)，那么你需要格外关注平均值和峰值内存使用的最小化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;保持应用的内存需求总是处于 RAM 的较低占比是一个非常好的主意。虽然没有强制规定，但强烈建议使用量不要超过 80%~85%，要给操作系统的核心服务留下足够多的内存。不要忽视 didReceiveMemoryWarning 信号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12-内存管理模型&#34;&gt;1.2 内存管理模型&lt;/h3&gt;
&lt;p&gt;内存管理模型基于持有关系的概念。当一个对象创建于某个方法的内部时，那该方法就持有这个对象了。如果一个对象正处于被持有状态，那它占用的内存就不能被回收。&lt;/p&gt;
&lt;p&gt;一旦与某个对象相关的任务全部完成，那么就是放弃了持有关系。这一过程没有转移持有关系，而是分别增加或减少了持有者的数量。当持有者的数量降为零时，对象会被释放。&lt;/p&gt;
&lt;p&gt;这种持有关系计数通常被正式称为引用计数。&lt;/p&gt;
&lt;h3 id=&#34;13-自动释放池块&#34;&gt;1.3 自动释放池块&lt;/h3&gt;
&lt;p&gt;自动释放池块是允许你放弃对一个对象的持有关系、但可避免它立即被回收的一个工具。当从方法返回对象时，这种功能非常有用。&lt;/p&gt;
&lt;p&gt;它还能确保在块内创建的对象会在块完成时被回收。这在创建了多个对象的场景中非常有用。本地的块可以用来尽早地释放其中的对象，从而使内存用量保持在较低的水平。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;appDelegateClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;@autoreleasepool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Setup code that might create autoreleased objects goes here.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;appDelegateClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppDelegate&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UIApplicationMain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;appDelegateClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上代码是 main.m 中的 @autoreleasepool 块，块中收到过 autorelease 消息的所有对象都会在 autoreleasepool 块结束时收到 release 消息。更加重要的是，每个 autorelease 调用都会发送一个 release 消息。这意味着如果一个对象收到了不止一次的 autorelease 消息，那它也会多次收到 release 消息。这一点很棒，因为这能保证对象的引用计数下降到使用 autoreleasepool 块之前的值。如果计数为 0，则对象将被回收，从而保持较低的内存使用率。&lt;/p&gt;
&lt;p&gt;看了 main 方法的代码后，你会发现整个应用都在一个 autoreleasepool 块中，这意味着所有的 autorelease 对象最后都会被回收，不会导致内存泄漏。&lt;/p&gt;
&lt;h3 id=&#34;14-自动引用计数&#34;&gt;1.4 自动引用计数&lt;/h3&gt;
&lt;p&gt;ARC 是一种编译器特性。它评估了对象在代码中的生命周期，并在编译时自动注入适合的内存管理调用。编译器还会生成适合的 dealloc 方法。这意味着与跟踪内存使用(如确保对象被及时回收了)有关的最大难题被解决了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARC的规则
&lt;ul&gt;
&lt;li&gt;不能实现或调用 retain、release、autorelease 或 retainCount 方法。这一限制不仅针对对象，对选择器同样有效。因此，[obj release]或@selector(retain)是编译时的错误。&lt;/li&gt;
&lt;li&gt;可以实现 dealloc 方法，但不能调用它们。不仅不能调用其他对象的 dealloc 方法，也不能调用超类。[super dealloc] 是编译时的错误。但你仍然可以对 Core Foundation 类型的对象调用 CFRetain、CFRelease 等相关方法。&lt;/li&gt;
&lt;li&gt;不能调用 NSAllocateObject 和 NSDeallocateObject 方法。应使用 alloc 方法创建对象， 运行时负责回收对象。&lt;/li&gt;
&lt;li&gt;不能在 C 语言的结构体内使用对象指针。&lt;/li&gt;
&lt;li&gt;不能在 id 类型和 void * 类型之间自动转换。如果需要，那么你必须做显示转换。&lt;/li&gt;
&lt;li&gt;不能使用 NSAutoreleasePool，要替换使用 autoreleasepool 块。&lt;/li&gt;
&lt;li&gt;不能使用 NSZone 内存区域。&lt;/li&gt;
&lt;li&gt;属性的访问器名称不能以 new 开头，以确保与 MRC 的互操作性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-引用类型&#34;&gt;1.5 引用类型&lt;/h3&gt;
&lt;p&gt;ARC 带来了新的引用类型:弱引用。深入理解这些引用类型对内存管理非常重要。支持的类型包括以下两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强引用。强引用是默认的引用类型。被强引用指向的内存不会被释放。强引用会对引用计数加 1，从而扩展对象的生命周期。&lt;/li&gt;
&lt;li&gt;弱引用。弱引用是一种特殊的引用类型。它不会增加引用计数，因而不会扩展对象的生命周期。在启用了 ARC 的 Objective-C 编程中，弱引用格外重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;151-变量限定符&#34;&gt;1.5.1 变量限定符&lt;/h4&gt;
&lt;p&gt;ARC 为变量供了四种生命周期限定符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__strong&lt;/code&gt; 这是默认的限定符，无需显示引入。只要有强引用指向，对象就会长时间驻留在内存中。可以将 &lt;code&gt;__strong&lt;/code&gt; 理解为 retain 调用的 ARC 版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__weak&lt;/code&gt; 这表明引用不会保持被引用对象的存活。当没有强引用指向对象时，弱引用会被置为 nil。可将 &lt;code&gt;__weak&lt;/code&gt; 看作是 assign 操作符的 ARC 版本，只是对象被回收时，&lt;code&gt;__weak&lt;/code&gt; 具有安全性——指针将自动被设置为 nil。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__unsafe_unretained&lt;/code&gt; 与 &lt;code&gt;__weak&lt;/code&gt; 类似，只是当没有强引用指向对象时，&lt;code&gt;__unsafe_unretained&lt;/code&gt; 不会被置为 nil。可将其看作 assign 操作符的 ARC 版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__autoreleasing&lt;/code&gt;。&lt;code&gt;__autoreleasing&lt;/code&gt; 用于由引用使用id *传递的消息参数。它预期了autorelease方法会在传递参数的方法中被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;152-属性限定符&#34;&gt;1.5.2 属性限定符&lt;/h4&gt;
&lt;p&gt;属性声明有两个新的持有关系限定符:strong 和 weak。此外，assign 限定符的语义也被更新了。一言以蔽之，现在共有六个限定符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strong。默认符，指定了 __strong 关系。&lt;/li&gt;
&lt;li&gt;weak。指定了 __weak 关系。&lt;/li&gt;
&lt;li&gt;assign。这不是新的限定符，但其含义发生了改变。在 ARC 之前，assign 是默认的持有关系限 定符。在启用 ARC 之后，assign 表示了 __unsafe_unretained 关系。&lt;/li&gt;
&lt;li&gt;copy。暗指了 __strong 关系。此外，它还暗示了 setter 中的复制语义的常规行为。&lt;/li&gt;
&lt;li&gt;retain。指定了 __strong 关系。&lt;/li&gt;
&lt;li&gt;unsafe_unretained。指定了 __unsafe_unretained 关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-僵尸对象&#34;&gt;1.6 僵尸对象&lt;/h3&gt;
&lt;p&gt;僵尸对象是用于捕捉内存错误的调试功能。&lt;/p&gt;
&lt;p&gt;通常情况下，当引用计数降为 0 时对象会立即被释放，但这使得调试变得困难。如果开启了僵尸对象，那么对象就不会立即释放内存，而是被标记为僵尸。任何试图对其进行访问的行为都会被日志记录，因而你可以在对象的生命周期中跟踪对象在代码中被使用的位置。&lt;/p&gt;
&lt;p&gt;NSZombieEnabled 是一个环境变量，可以控制 Core Foundation 的运行时是否将使用僵尸对象。不应长期保留 NSZombieEnabled，因为默认情况下不会有对象被真正析构，这会导致应用使用大量的内存。特别说明一点，在发布的构建包中一定要禁用 NSZombieEnabled。&lt;/p&gt;
&lt;p&gt;要想设置 NSZombieEnabled 环境变量，需要进入 Product → Scheme → Edit Scheme。选择 左侧的 Run，然后在右侧选取 Diagnostics 标签页。选中 Zombie Objects 选项，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://liupengkun1993.github.io/image/iOS/iOS_High_Performance/02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;17-循环引用&#34;&gt;1.7 循环引用&lt;/h3&gt;
&lt;p&gt;引用计数的最大陷阱在于，它不能处理环状的引用关系，即 Objective-C 的循环引用。&lt;/p&gt;
&lt;h4 id=&#34;171-避免循环引用的规则&#34;&gt;1.7.1 避免循环引用的规则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对象不应该持有它的父对象，应该用 weak 引用指向它的父对象。&lt;/li&gt;
&lt;li&gt;作为必然的结果，一个层级体系中的子对象应该保留祖先对象。&lt;/li&gt;
&lt;li&gt;连接对象不应持有它们的目标对象。目标对象的角色是持有者。连接对象包括以下几种。
&lt;ul&gt;
&lt;li&gt;使用委托的对象。委托应该被当作目标对象，即持有者。&lt;/li&gt;
&lt;li&gt;包含目标和 action 的对象，这是由上一条规则推理得到的。例如，UIButton 会调用它的目标对象上的 action 方法。按钮不应该保留它的目标。&lt;/li&gt;
&lt;li&gt;观察者模式中被观察的对象。观察者就是持有者，并会观察发生在被观察对象上的变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用专用的销毁方法中断循环引用。双向链表中存在循环引用，环形链表中也存在循环引用。在这类情况下，一旦明确对象不会再被使用时(当链表的表头超出作用范围)，你要编写代码以打破链表的链接。创建一个方法切断其自身与链表中下一个节点的链接。通过访问者模式递归地执行这一过程，从而避免无限递归。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;172-循环引用的常见场景&#34;&gt;1.7.2 循环引用的常见场景&lt;/h4&gt;
&lt;p&gt;大把的常见场景会导致循环引用。例如，使用线程、计时器、简单的块方法或委托都可能会导致循环引用。接下来我们将逐步探索这些场景，并给出避免循环引用的步骤。&lt;/p&gt;
&lt;h5 id=&#34;1-委托&#34;&gt;1. 委托&lt;/h5&gt;
&lt;p&gt;委托很可能是引入循环引用的最常见的地方。在应用启动时，从服务器获取最新的数据并更新 UI 是常见的事情。当用户点击刷新按钮时也会触发类似的刷新逻辑。&lt;/p&gt;
&lt;p&gt;解决方案是在委托中建立对操作的强引用，并在操作中建立对委托的弱引用。&lt;/p&gt;
&lt;h5 id=&#34;2-block&#34;&gt;2. block&lt;/h5&gt;
&lt;p&gt;与不正确地使用委托对象导致的问题类似，在使用 block 时，捕获外部变量也是导致循环引用的原因。&lt;/p&gt;
&lt;p&gt;解决方案是通过弱引用获得强引用，类似于 &lt;code&gt;__weak typeof(self) weakSelf = self;&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;3-线程与计时器&#34;&gt;3. 线程与计时器&lt;/h5&gt;
&lt;p&gt;不正确地使用 NSThread 和 NSTimer 对象也可能会导致循环引用。运行异步操作的典型步骤如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有编写更高级的代码来管理自定义的队列，则在全局队列上使用 dispatch_async 方法。&lt;/li&gt;
&lt;li&gt;在需要的时间和地点用 NSThread 开启异步执行。&lt;/li&gt;
&lt;li&gt;使用 NSTimer 周期性地执行一段代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：NSTimer 在主线程中不会造成循环引用，但是子线程会造成循环引用，问题应该是出在子线程问题上。在定时器释放时必须要调用 invalidate 方法，这个方法会做一些释放 self、block、RunLoop 等释放资源的工作，而且释放 RunLoop 只能释放和定时器同一个线程的 RunLoop。&lt;/p&gt;
&lt;h4 id=&#34;173-观察者&#34;&gt;1.7.3 观察者&lt;/h4&gt;
&lt;h5 id=&#34;1-键-值观察&#34;&gt;1. 键-值观察&lt;/h5&gt;
&lt;p&gt;Objective-C 允许用 addObserver:forKeyPath:options:context: 方法在任何 NSObject 子类的 对象上添加观察者。观察者会通过 observeValueForKeyPath:ofObject:change:context: 方法得到通知。removeObserver:forKeyPath:context: 方法用于解除注册或移除观察者。这就是众所周知的键 - 值观察。&lt;/p&gt;
&lt;p&gt;这是一个极为有用的特性，尤其是在以调试为目的跟踪某些共享于应用多个部分(如用户接口、业务逻辑、持久化以及网络)的对象时。&lt;/p&gt;
&lt;p&gt;键 - 值观察在双向数据绑定中也非常有用。视图可以关联委托来响应那些会导致模型更新的用户交互。键 - 值观察可以用于反向的绑定，以便在模型发生变化时更新 UI。&lt;/p&gt;
&lt;p&gt;这意味着观察者需要有足够长的生命周期才能够持续地监控变化。你需要额外关注观察者的生命周期，而且要持续到所观察的内存被废弃之后。&lt;/p&gt;
&lt;p&gt;当你为目标对象添加键 - 值观察者时，目标对象的生命周期至少应该和观察者一样长，因为只有这样才有可能从目标对象移除观察者。这可能会导致目标对象的生命周期比预期要长，也是你需要额外小心的地方。&lt;/p&gt;
&lt;h5 id=&#34;2-通知中心&#34;&gt;2. 通知中心&lt;/h5&gt;
&lt;p&gt;一个对象可以注册为通知中心(NSNotificationCenter 对象)的观察者，并接收 NSNotification 对象。与键 - 值观察者相似，通知中心不会对观察者持有强引用。这意味着开发人员得到了解放，无需为观察者的析构过早或过晚而操心。&lt;/p&gt;
&lt;h3 id=&#34;18-对象寿命与泄漏&#34;&gt;1.8 对象寿命与泄漏&lt;/h3&gt;
&lt;p&gt;对象在内存中活动的时间越长，内存不能被清理的可能性就越大。所以应当尽可能地避免出现长寿命的对象。当然，你需要保留代码中关键操作对象的引用，为的是不必每次都浪费时间来创建它们。尽量在使用这些对象时完成对它们的引用。&lt;/p&gt;
&lt;p&gt;长寿命对象的常见形式是单例。日志器是典型的例子——只创建一次，从不销毁。&lt;/p&gt;
&lt;p&gt;另一个方案是使用全局变量。全局变量在程序开发中是可怕的东西。&lt;/p&gt;
&lt;p&gt;要想合理地使用全局变量，必须满足以下条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有被其他对象所持有;&lt;/li&gt;
&lt;li&gt;不是常量;&lt;/li&gt;
&lt;li&gt;整个应用中只有一个，而不是每个组件一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果某个变量不符合这些要求，那么它不应该被用作全局变量。&lt;/p&gt;
&lt;p&gt;复杂的对象图使得回收内存的机会变得更少，同时增加了应用因内存耗尽而崩溃的风险。如果主线程总是被迫等待子线程的操作(如网络或数据库存取)，那么应用的响应性能会变得很差。&lt;/p&gt;
&lt;h3 id=&#34;19-单例&#34;&gt;1.9 单例&lt;/h3&gt;
&lt;p&gt;单例模式是限制一个类只初始化一个对象的一种设计模式。在实践中，初始化常常在应用启动不久后执行，而且这些对象不会被销毁。&lt;/p&gt;
&lt;p&gt;让一个对象有着与应用一样长的生命周期可不是什么好主意。如果这个对象是其他对象的源头(如一个服务定位器)，若定位器的实现不正确则有可能造成内存风险。&lt;/p&gt;
&lt;p&gt;毫无疑问，单例是必要的。但单例的实现对其使用方式有重要影响。&lt;/p&gt;
&lt;p&gt;在充分讨论单例引入的问题之前，我们不妨先更好地理解单例，了解一下为什么确实需要使用单例。&lt;/p&gt;
&lt;p&gt;单例极为有用，尤其是在某个系统确定只需要一个对象实例时。应该在以下情形中使用单例:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列操作(如日志和埋点)&lt;/li&gt;
&lt;li&gt;访问共享资源(如缓存)&lt;/li&gt;
&lt;li&gt;资源池(如线程池或连接池)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦创建，单例会一直存活到应用关闭。日志器、埋点服务以及缓存都是使用单例的合理场景。&lt;/p&gt;
&lt;p&gt;更重要的是，单例通常会在应用启动时进行初始化，打算使用单例的组件需要等它们准备得当。这会增加应用的启动时间。&lt;/p&gt;
&lt;p&gt;你可以使用以下的指导原则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽可能地避免使用单例。&lt;/li&gt;
&lt;li&gt;识别需要内存的部分，如用于埋点的内存缓冲区(在尚未将数据同步到服务器前使用)。寻求减少内存的方法。注意，你需要将减少内存与其他事情做权衡。减小缓冲区意味着更多的服务器通信。&lt;/li&gt;
&lt;li&gt;尽量避免对象级的属性，因为它们会与对象共存亡。尽量使用本地变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;110-最佳实践&#34;&gt;1.10 最佳实践&lt;/h3&gt;
&lt;p&gt;通过遵循这些最佳实践，你将很大程度上避免许多麻烦，如内存泄漏、循环引用和较大内
存消耗。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免大量的单例。具体来说，不要出现上帝对象(如职责特别多或状态信息特别多的对象)。这是一个反模式，指代一种常见解决方案的设计模式，但很快产生了不良效果。日志器、埋点服务和任务队列这样的辅助单例都是很不错的，但全局状态对象不可取。&lt;/li&gt;
&lt;li&gt;对子对象使用 __strong。&lt;/li&gt;
&lt;li&gt;对父对象使用 __weak。&lt;/li&gt;
&lt;li&gt;对使引用图闭合的对象(如委托)使用 __weak。&lt;/li&gt;
&lt;li&gt;对数值属性(NSInteger、SEL、CGFloat 等)而言，使用 assign 限定符。&lt;/li&gt;
&lt;li&gt;对于块属性，使用 copy 限定符。&lt;/li&gt;
&lt;li&gt;当声明使用&lt;code&gt;NSError **&lt;/code&gt; 参数的方法时，需要使用 &lt;code&gt;__autoreleasing&lt;/code&gt;，并要注意用正确的 语法: &lt;code&gt;NSError * __autoreleasing *&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;避免在块内直接引用外部的变量。在块外面将它们 weakify，并在块内再将它们 strongify。 参见 &lt;a href=&#34;https://github.com/jspahrsummers/libextobjc&#34;&gt;libextobjc 库&lt;/a&gt; 来了解 @weakify 和 @strongify。&lt;/li&gt;
&lt;li&gt;进行必要清理时遵循以下准则:
&lt;ul&gt;
&lt;li&gt;销毁计时器&lt;/li&gt;
&lt;li&gt;移除观察者(具体来说，移除对通知的注册)&lt;/li&gt;
&lt;li&gt;解除回调(具体来说，将强引用的委托设置为 nil)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-能耗&#34;&gt;2. 能耗&lt;/h2&gt;
&lt;p&gt;设备中的每个硬件模块都会消耗电量。电量的最大消费者是 CPU，但这只是系统的一个方面。一个编写良好的应用需要谨慎地使用电能。用户往往会删除耗电量大的应用。&lt;/p&gt;
&lt;p&gt;除 CPU 外，耗电量高、值得关注的硬件模块还包括:网络硬件、蓝牙、GPS、麦克风、加 速计、摄像头、扬声器和屏幕。&lt;/p&gt;
&lt;h3 id=&#34;21-cpu&#34;&gt;2.1 CPU&lt;/h3&gt;
&lt;p&gt;不论用户是否正在直接使用，CPU 都是应用所使用的主要硬件。在后台操作和处理推送通知时，应用仍会消耗 CPU 资源。&lt;/p&gt;
&lt;p&gt;应用计算得越多，消耗的电量就越多。在完成相同的基本操作时，老一代的设备会消耗更多的电量。计算量的消耗取决于不同的因素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对数据的处理(例如，对文本进行格式化)。&lt;/li&gt;
&lt;li&gt;待处理的数据大小——更大的显示屏允许软件在单个视图中展示更多的信息，但这也意味着要处理更多的数据。&lt;/li&gt;
&lt;li&gt;处理数据的算法和数据结构。&lt;/li&gt;
&lt;li&gt;执行更新的次数，尤其是在数据更新后，触发应用的状态或 UI 进行更新(应用收到的推送通知也会导致数据更新，如果此时用户正在使用应用，你还需要更新 UI)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没有单一规则可以减少设备中的执行次数。很多规则都取决于操作的本质。以下是一些可以在应用中投入使用的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对不同的情况选择优化的算法。例如，当你在排序时，如果列表少于 43 个实例，则插入排序优于归并排序，但实例多于 286 个时，应当使用快速排序。要优先使用双枢轴快速排序而不是传统的单枢轴快速排序。&lt;/li&gt;
&lt;li&gt;如果应用从服务器接收数据，尽量减少需要在客户端进行的处理例如，如果一段文字需要在客户端进行渲染，尽可能在服务器将数据清理干净。&lt;/li&gt;
&lt;li&gt;优化静态编译(ahead-of-time，AOT)处理。动态编译(just-in-time，JIT)处理的缺点在于它会强制用户等待操作完成。但是激进的 AOT 处理则会导致计算资源的浪费。需要根据应用和设备选择精确定量的 AOT 处理。&lt;/li&gt;
&lt;li&gt;分析电量消耗。测量目标用户的所有设备上的电量消耗。找到高能耗的区域并想办法降低能耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-网络&#34;&gt;2.2 网络&lt;/h3&gt;
&lt;p&gt;智能的网络访问管理可以让应用响应得更快，并有助于延长电池寿命。在无法访问网络时，应当推迟后续的网络请求，直到网络连接恢复为止。&lt;/p&gt;
&lt;p&gt;此外，应避免在没有连接 WiFi 的情况下进行高带宽消耗的操作，比如视频流。众所周知，蜂窝无线系统(LTE、4G、3G 等)对电量的消耗远大于 WiFi 信号。根源在于 LTE 设备基于多输入、多输出技术，使用多个并发信号以维护两端的 LTE 链接。类似地，所有的蜂窝数据连接都会定期扫描以寻找更强的信号。&lt;/p&gt;
&lt;p&gt;因此，我们需要:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在进行任何网络操作之前，先检查合适的网络连接是否可用;&lt;/li&gt;
&lt;li&gt;持续监视网络的可用性，并在连接状态发生变化时给予适当的反馈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-定位管理器和gps&#34;&gt;2.3 定位管理器和GPS&lt;/h3&gt;
&lt;p&gt;了解定位服务包括 GPS(或 GLONASS)和 WiFi 硬件这一点很重要，同时要知道定位服务需要大量的电量。&lt;/p&gt;
&lt;p&gt;使用 GPS 计算坐标需要确定两点信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间锁
&lt;ul&gt;
&lt;li&gt;每个 GPS 卫星每毫秒广播唯一一个 1023 位随机数，因而数据传播速率是 1.024Mbit/s。 GPS 的接收芯片必须正确地与卫星的时间锁槽对齐。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;频率锁
&lt;ul&gt;
&lt;li&gt;GPS 接收器必须计算由接收器与卫星的相对运动导致的多普勒偏移带来的信号误差。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算坐标会不断地使用 CPU 和 GPS 的硬件资源，因此它们会迅速地消耗电池电量。&lt;/p&gt;
&lt;h4 id=&#34;231-最佳的初始化&#34;&gt;2.3.1 最佳的初始化&lt;/h4&gt;
&lt;p&gt;CLLocationManager的常用操作和属性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 开始用户定位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;startUpdatingLocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 停止用户定位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stopUpdatingLocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;说明：当调用了 startUpdatingLocation 方法后，就开始不断地定位用户的位置，中途会频繁地调用代理的下面方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;locationManager:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;didUpdateLocations:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在调用 startUpdatingLocation 方法时，两个参数起着非常重要的作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distanceFilter
&lt;ul&gt;
&lt;li&gt;只要设备的移动超过了最小距离，距离过滤器就会导致管理器对委托对象的 locationManager:didUpdateLocations: 事件通知发生变化。该距离使用公制单位(米)。这并不会有助于减少 GPS 接收器的使用，但会影响应用的处理速度，从而直接减少 CPU 的使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;desiredAccuracy
&lt;ul&gt;
&lt;li&gt;精度参数的使用直接影响了使用天线的个数，进而影响了对电池的消耗。精度级别的选取取决于应用的具体用途。按照降序排列，精度由以下常量定义。
&lt;ul&gt;
&lt;li&gt;kCLLocationAccuracyBestForNavigation 用于导航的最佳精度级别。&lt;/li&gt;
&lt;li&gt;kCLLocationAccuracyBest 设备可能达到的最佳精度级别。&lt;/li&gt;
&lt;li&gt;kCLLocationAccuracyNearestTenMeters 精度接近 10 米。如果对用户所走的每一米并不感兴趣，不妨使用这个值(例如，可 在测量大块距离时使用)。&lt;/li&gt;
&lt;li&gt;kCLLocationAccuracyHundredMeters 精度接近 100 米。&lt;/li&gt;
&lt;li&gt;kCLLocationAccuracyKilometer 精度在千米范围。这在粗略测量两个距离数百千米的兴趣点时非常有用。&lt;/li&gt;
&lt;li&gt;kCLLocationAccuracyThreeKilometers 精度在 3 千米范围。在距离真的很远时使用这个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;232-关闭无关紧要的特性&#34;&gt;2.3.2 关闭无关紧要的特性&lt;/h4&gt;
&lt;p&gt;判断何时需要跟踪位置的变化。在需要跟踪时调用 startUpdatingLocation 方法，无需跟踪时调用 stopUpdatingLocation 方法。&lt;/p&gt;
&lt;p&gt;假设用户需要用一个消息类的应用与朋友分享位置。如果该应用只是发送城市的名称，则只需要一次性地获取位置信息，然后就可以通过调用 stopUpdatingLocation 关闭位置跟踪。&lt;/p&gt;
&lt;h4 id=&#34;233-只在必要时使用网络&#34;&gt;2.3.3 只在必要时使用网络&lt;/h4&gt;
&lt;p&gt;为了提高电量的使用效率，iOS 总是尽可能地保持无线网络关闭。当应用需要建立网络连接时，iOS 会利用这个机会向后台应用分享网络会话，以便一些低优先级的事件能够被处理，如推送通知、收取电子邮件等。&lt;/p&gt;
&lt;p&gt;关键在于每当应用建立网络连接时，网络硬件都会在连接完成后多维持几秒的活动时间。每次集中的网络通信都会消耗大量的电量。&lt;/p&gt;
&lt;p&gt;要想减轻这个问题带来的危害，你的软件需要有所保留地使用网络。应该定期集中短暂地使用网络，而不是持续地保持着活动的数据流。只有这样，网络硬件才有机会被关闭。&lt;/p&gt;
&lt;h4 id=&#34;234-后台定位服务&#34;&gt;2.3.4 后台定位服务&lt;/h4&gt;
&lt;p&gt;CLLocationManager 提供了一个替代的方法来监听位置的更新。startMonitoringSigni-ficantLocationChanges 可以帮助你在更远的距离跟踪运动。精确的值由内部决定，且与 distanceFilter 无关。&lt;/p&gt;
&lt;p&gt;使用这一模式可以在应用进入后台后继续跟踪运动。(除非应用是导航类应用，且你想在锁屏期间也获得很好的细节。)典型的做法是在应用进入后台时执行 startMonitoringSigni-ficantLocationChanges 方法，而当应用回到前台时执行 startUpdatingLocation。&lt;/p&gt;
&lt;h4 id=&#34;235-nstimernsthread和定位服务&#34;&gt;2.3.5 NSTimer、NSThread和定位服务&lt;/h4&gt;
&lt;p&gt;当应用位于后台时，任何定时器或线程都会挂起。但如果你在应用位于后台状态时申请了定位，那么应用会在每次收到更新后被短暂唤醒。在此期间，线程和计时器都会被唤醒。&lt;/p&gt;
&lt;p&gt;可怕之处在于，如果你在这段时间做了任何网络操作，则会启动所有相关的天线(如 WiFi 和 LTE/4G/3G)。&lt;/p&gt;
&lt;p&gt;想要控制这种状况往往非常棘手。最佳的选择是使用 NSURLSession 类。&lt;/p&gt;
&lt;h3 id=&#34;24-屏幕&#34;&gt;2.4 屏幕&lt;/h3&gt;
&lt;p&gt;屏幕非常耗电。屏幕越大就越费电。当然，如果你的应用在前台运行且与用户进行交互，则势必会使用屏幕并消耗电量。&lt;/p&gt;
&lt;p&gt;然而，仍然有一些方案可以优化屏幕的使用。&lt;/p&gt;
&lt;h4 id=&#34;241-动画&#34;&gt;2.4.1 动画&lt;/h4&gt;
&lt;p&gt;你可以遵守一个简单的规则:当应用在前台时使用动画，一旦应用进入后台则立即暂停动 画。通常来说，你可以通过监听 UIApplicationWillResignActiveNotification 或 UIApplic ationDidEnterBackgroundNotification 的通知事件来暂停或停止动画，也可以通过监听 UI ApplicationDidBecomeActiveNotification 的通知事件来恢复动画。&lt;/p&gt;
&lt;h4 id=&#34;242-视频播放&#34;&gt;2.4.2 视频播放&lt;/h4&gt;
&lt;p&gt;在视频播放期间，最好强制保持屏幕常亮。可以使用 UIApplication 对象的 idleTimerDisabled 属性来实现这个目的。一旦设置为 YES，它会阻止屏幕休眠，从而实现常亮。与动画类似，你可以通过响应应用的通知来释放和获取锁。&lt;/p&gt;
&lt;h3 id=&#34;25-其他硬件&#34;&gt;2.5 其他硬件&lt;/h3&gt;
&lt;p&gt;当应用进入后台时，应该释放对这些硬件的锁定:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝牙&lt;/li&gt;
&lt;li&gt;相机&lt;/li&gt;
&lt;li&gt;扬声器，除非应用是音乐类的&lt;/li&gt;
&lt;li&gt;麦克风&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们并不会在这里讨论这些硬件的特性，但是基本规则是一致的——只有当应用处于前台时才与这些硬件进行交互，应用处于后台时应停止交互。&lt;/p&gt;
&lt;p&gt;扬声器和无线蓝牙可能是例外。如果你正在开发音乐、收音机或其他的音频类应用，则需要在应用进入后台后继续使用扬声器。不要让屏幕仅仅为音频播放的目的而保持常亮。类似地，若应用还有未完成的数据传输，则需要在应用进入后台后持续使用无线蓝牙，例如，与其他设备传输文件。&lt;/p&gt;
&lt;h3 id=&#34;26-电池电量与代码感知&#34;&gt;2.6 电池电量与代码感知&lt;/h3&gt;
&lt;p&gt;一个智能的应用会考虑到电池的电量和自身的状态，从而决定是否要真正执行资源密集消耗型的操作。另外一个有价值的点是对充电的判断，确定设备是否处于充电状态。&lt;/p&gt;
&lt;p&gt;使用 UIDevice 实例可以获取 batteryLevel 和 batteryState(充电状态)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当剩余电量较低时提示用户，并请求用户授权执行电源密集型的操作——当然，只在用户同意的前提下执行。总是用一个指示符显示长时间任务的进度，包括设备上即将完成的计算或者只是下载一些内容。向用户提供完成进度的估算，以帮助他们决定是否需要为设备充电。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;27-分析电量使用&#34;&gt;2.7 分析电量使用&lt;/h3&gt;
&lt;p&gt;利用 Xcode Instruments 的 Energy Log。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开手机设置，点击 &amp;ldquo;开发者&amp;rdquo;，选中 Logging。&lt;/li&gt;
&lt;li&gt;iOS 设置中的 Instruments 勾选 Energy，并点击startRecording。然后打开你的 APP 跑起来。操作五分钟左右 (具体看你的需要) ，再进入手机设置点击 stopRecording。&lt;/li&gt;
&lt;li&gt;接着，把 iOS 设备连接 Xcode，并打开 Instruments 中的 Energy Log(Xcode &amp;ndash;&amp;gt; Open Developer Tool &amp;ndash;&amp;gt; Instruments &amp;ndash;&amp;gt; Energy Log)，点击工具栏中 Import Logged Data from Device。导入我们 iOS 性能优化中能耗的数据。&lt;/li&gt;
&lt;li&gt;Instruments 中可以看到你的 APP 的功耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;28-最佳实践&#34;&gt;2.8 最佳实践&lt;/h3&gt;
&lt;p&gt;以下的最佳实践可以确保对电量的谨慎使用。遵循以下要点，应用可以实现对电量的高效使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小化硬件使用。换句话说，尽可能晚地与硬件打交道，并且一旦完成任务立即结束使用。&lt;/li&gt;
&lt;li&gt;在进行密集型任务前，检查电池电量和充电状态。&lt;/li&gt;
&lt;li&gt;在电量低时，提示用户是否确定要执行任务，并在用户同意后再执行。&lt;/li&gt;
&lt;li&gt;或提供设置的选项，允许用户定义电量的阈值，以便在执行密集型操作前提示用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-并发编程&#34;&gt;3. 并发编程&lt;/h2&gt;
&lt;h3 id=&#34;31-线程&#34;&gt;3.1 线程&lt;/h3&gt;
&lt;p&gt;线程是运行时执行的一组指令序列。&lt;/p&gt;
&lt;p&gt;每个进程至少应包含一个线程。在 iOS 中，进程启动时的主要线程通常被称作主线程。所有的 UI 元素都需要在主线程中创建和管理。与用户交互相关的所有中断最终都会分发到 UI 线程，处理代码会在这些地方执行——IBAction 方法的代码都会在主线程中执行。&lt;/p&gt;
&lt;p&gt;Cocoa 编程不允许其他线程更新 UI 元素。这意味着，无论何时应用在后台线程执行了耗时操作，比如网络或其他处理，代码都必须将上下文切换到主线程再更新 UI——例如，进度条指示任务进度或标签展示处理结果。&lt;/p&gt;
&lt;h3 id=&#34;32-线程开销&#34;&gt;3.2 线程开销&lt;/h3&gt;
&lt;p&gt;虽然应用有多个线程看起来非常赞，但每个线程都有一定的开销，从而影响到应用的性能。线程不仅仅有创建时的时间开销，还会消耗内核的内存，即应用的内存空间。&lt;/p&gt;
&lt;h4 id=&#34;321-内核数据结构&#34;&gt;3.2.1 内核数据结构&lt;/h4&gt;
&lt;p&gt;每个线程大约消耗 1KB 的内核内存空间。这块内存用于存储与线程有关的数据结构和属性。这块内存是联动内存(wired memory)，无法被分页。&lt;/p&gt;
&lt;h4 id=&#34;322-栈空间&#34;&gt;3.2.2 栈空间&lt;/h4&gt;
&lt;p&gt;主线程的栈空间大小为 1M，而且无法修改。所有的二级线程默认分配 512KB 的栈空间。注意，完整的栈并不会立即被创建出来。实际的栈空间大小会随着使用而增长。因此，即使主线程有 1MB 的栈空间，某个时间点的实际栈空间很可能要小很多。&lt;/p&gt;
&lt;p&gt;在线程启动前，栈空间的大小可以被改变。栈空间的最小值是 16KB，而且其数值必须是 4KB 的倍数。&lt;/p&gt;
&lt;h4 id=&#34;323-创建耗时&#34;&gt;3.2.3 创建耗时&lt;/h4&gt;
&lt;p&gt;创建线程后启动线程的耗时区间为 5~100 毫秒，平均大约在 29 毫秒。这是很大的时间开销，若在应用启动时开启多个线程，则尤为明显。&lt;/p&gt;
&lt;p&gt;线程的启动时间之所以如此之长，是因为多次的上下文切换所带来的开销。&lt;/p&gt;
&lt;h3 id=&#34;33-gcd&#34;&gt;3.3 GCD&lt;/h3&gt;
&lt;p&gt;GCD 提供的功能列表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务或分发队列，允许主线程中的执行、并行执行和串行执行。&lt;/li&gt;
&lt;li&gt;分发组，实现对一组任务执行情况的跟踪，而与这些任务所基于的队列无关。&lt;/li&gt;
&lt;li&gt;信号量。&lt;/li&gt;
&lt;li&gt;屏障，允许在并行分发队列中创建同步的点。&lt;/li&gt;
&lt;li&gt;分发对象和管理源，实现更为底层的管理和监控。&lt;/li&gt;
&lt;li&gt;异步 I/O，使用文件描述符或管道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCD 同样解决了线程的创建与管理。它帮助我们跟踪应用中线程的总数，且不会造成任何的泄漏。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数情况下，应用单独使用 GCD 就可以很好地工作，但仍有特定的情况需要考虑使用 NSThread 或 NSOperationQueue。当应用中有多个长耗时的任务需要并行执行时，最好对线程的创建过程加以控制。如果代码执行的时间过长，很有可能达到线程的限制 64 个，即 GCD 的线程池上限。 应该避免浪费地使用 dispatch_async 和 dispatch_sync，因为那会导致应用 崩溃 4。虽然 64 个线程对移动应用来说是个很高的合理值，但不加控制的应 用迟早会超出这个限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于 GCD 线程池上限，可以参考这个文档：&lt;a href=&#34;https://stackoverflow.com/questions/7213845/number-of-threads-created-by-gcd&#34;&gt;stackoverflow.com:number-of-threads-created-by-gcd&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;34-操作与队列&#34;&gt;3.4 操作与队列&lt;/h3&gt;
&lt;p&gt;操作和操作队列是 iOS 编程中和任务管理有关的又一个重要概念。&lt;/p&gt;
&lt;p&gt;NSOperation 封装了一个任务以及和任务相关的数据和代码，而 NSOperationQueue 以先入先出的顺序控制了一个或多个这类任务的执行。&lt;/p&gt;
&lt;p&gt;NSOperation 和 NSOperationQueue 都提供控制线程个数的能力。可用 maxConcurrentOpera-tionCount 属性控制队列的个数，也可以控制每个队列的线程个数。&lt;/p&gt;
&lt;p&gt;以下是对 NSThread、NSOperationQueue 和 GCD API 的一个快速比较。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GCD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象程度最高。&lt;/li&gt;
&lt;li&gt;两种队列开箱即用:main 和 global。&lt;/li&gt;
&lt;li&gt;可以创建更多的队列(使用 dispatch_queue_create)。&lt;/li&gt;
&lt;li&gt;可以请求独占访问(使用 dispatch_barrier_sync 和 dispatch_barrier_async)。&lt;/li&gt;
&lt;li&gt;基于线程管理。&lt;/li&gt;
&lt;li&gt;硬性限制创建 64 个线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NSOperationQueue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无默认队列。&lt;/li&gt;
&lt;li&gt;应用管理自己创建的队列。&lt;/li&gt;
&lt;li&gt;队列是优先级队列。&lt;/li&gt;
&lt;li&gt;操作可以有不同的优先级(使用 queuePriority 属性)。&lt;/li&gt;
&lt;li&gt;使用 cancel 消息可以取消操作。注意，cancel 仅仅是个标记。如果操作已经开始执行，则可能会继续执行下去。&lt;/li&gt;
&lt;li&gt;可以等待某个操作执行完毕(使用 waitUntilFinished 消息)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NSThread&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低级别构造，最大化控制。&lt;/li&gt;
&lt;li&gt;应用创建并管理线程。&lt;/li&gt;
&lt;li&gt;应用创建并管理线程池。&lt;/li&gt;
&lt;li&gt;应用启动线程。&lt;/li&gt;
&lt;li&gt;线程可以拥有优先级，操作系统会根据优先级调度它们的执行。&lt;/li&gt;
&lt;li&gt;无直接 API 用于等待线程完成。需要使用互斥量(如 NSLock)和自定义代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-线程安全的代码&#34;&gt;3.5 线程安全的代码&lt;/h3&gt;
&lt;h4 id=&#34;351-原子属性&#34;&gt;3.5.1 原子属性&lt;/h4&gt;
&lt;p&gt;原子属性是实现应用状态线程安全的一个良好开始。如果一个属性是 atomic，则修改和读取肯定都是原子的。&lt;/p&gt;
&lt;p&gt;这一点很重要，因为这样可以阻止两个线程同时更新一个值，反之则有可能导致错误的状态。正在修改属性的线程必须处理完毕后，其他线程才能开始处理。&lt;/p&gt;
&lt;p&gt;所有的属性默认都是原子性的。作为最佳实践，在需要时应该显式地使用 atomic。否则使 用 nonatomic 标记属性。&lt;/p&gt;
&lt;p&gt;因为原子属性存在开销，所以过度使用它们并不明智。例如，如果能够保证某个属性在任何时刻都不会被多个线程访问，那最好还是将其标记为 nonatomic。&lt;/p&gt;
&lt;h4 id=&#34;352-锁&#34;&gt;3.5.2 锁&lt;/h4&gt;
&lt;p&gt;锁是进入临界区的基础构件。atomic 属性和 @synchronized 块是为了实现便捷实用的高级
别抽象。&lt;/p&gt;
&lt;p&gt;以下是三种可用的锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NSLock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一种低级别的锁。一旦获取了锁，执行则进入临界区，且不会允许超过一个线程并行执行。释放锁则标记着临界区的结束。&lt;/li&gt;
&lt;li&gt;NSLock 必须在锁定的线程中进行解锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NSRecursiveLock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSRecursiveLock 允许在被解锁前锁定多次。如果解锁的次数与锁定的次数相匹配，则 认为锁被释放，其他线程可以获取锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NSCondition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有些情况需要协调线程之间的执行。例如，一个线程可能需要等待其他线程返回结果。NSCondition 可以原子性地释放锁，从而使得其他等待的线程可以获取锁，而初始的线程继续等待。一个线程会等待释放锁的条件变量。另一个线程会通知条件变量释放该锁，并唤醒等待中的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;353-将读写锁应用于并发读写&#34;&gt;3.5.3 将读写锁应用于并发读写&lt;/h4&gt;
&lt;p&gt;有这么一个情况：如果有多个线程试图读取一个属性，同步的代码在同一时刻只允许单个线程进行访问。使用上文提到的 atomic 属性会拖慢应用的性能。&lt;/p&gt;
&lt;p&gt;读写锁允许并行访问只读操作，而写操作需要互斥访问。这意味着多个线程可以并行地读取数据，但是修改数据时需要一个互斥锁。&lt;/p&gt;
&lt;p&gt;GCD 屏障允许在并行分发队列上创建一个同步的点。当遇到屏障时，GCD 会延迟执行提交的代码块，直到队列中所有在屏障之前提交的代码块都执行完毕。随后，通过屏障提交的代码块会单独地执行。我们将这个代码块称为屏障块。待其完成后，队列会按照原有行为继续执行。&lt;/p&gt;
&lt;p&gt;要想实现这一行为，我们需要遵循以下步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个并行队列。&lt;/li&gt;
&lt;li&gt;在这个队列上使用 dispatch_sync 执行所有的读操作。&lt;/li&gt;
&lt;li&gt;在相同的队列上使用 dispatch_barrier_sync 执行所有的写操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;354-使用不可变实体&#34;&gt;3.5.4 使用不可变实体&lt;/h4&gt;
&lt;p&gt;如果需要访问一个正在修改的状态，那将会怎么样呢？例如，如果缓存被清空，但因为用户执行了一个交互，其中部分状态要求立即被使用，情况将会是怎样的呢?是否存在更有效的机制以管理状态，而不是多个组件试图同时更新状态?&lt;/p&gt;
&lt;p&gt;你的团队应该遵循以下的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用不可变实体。&lt;/li&gt;
&lt;li&gt;通过更新子系统提供支持。&lt;/li&gt;
&lt;li&gt;允许观察者接收有关数据变化的通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;355-异步优于同步&#34;&gt;3.5.5 异步优于同步&lt;/h4&gt;
&lt;p&gt;要想实现线程安全、不死锁且易于维护的代码，强烈建议使用异步风格。能放到异步处理的，就放到异步。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;相关文章：&lt;a href=&#34;https://github.com/liuzhongning/Articles/blob/master/contents/High-performance-iOS-application-development/%E9%AB%98%E6%80%A7%E8%83%BDiOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%20-%20iOS%E6%80%A7%E8%83%BD.md&#34;&gt;高性能iOS应用开发 - iOS性能&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
